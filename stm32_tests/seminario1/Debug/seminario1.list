
seminario1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a14  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08007b9c  08007b9c  00017b9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007bb8  08007bb8  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08007bb8  08007bb8  00017bb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007bc0  08007bc0  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007bc0  08007bc0  00017bc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007bc4  08007bc4  00017bc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08007bc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          00000810  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200008a0  200008a0  00020090  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019dde  00000000  00000000  000200ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a1e  00000000  00000000  00039e98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001108  00000000  00000000  0003d8b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000fa8  00000000  00000000  0003e9c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023a49  00000000  00000000  0003f968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016c79  00000000  00000000  000633b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb64c  00000000  00000000  0007a02a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00145676  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000487c  00000000  00000000  001456cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007b84 	.word	0x08007b84

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	08007b84 	.word	0x08007b84

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b96c 	b.w	80004b8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	468e      	mov	lr, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	f040 8082 	bne.w	800030e <__udivmoddi4+0x116>
 800020a:	428a      	cmp	r2, r1
 800020c:	4617      	mov	r7, r2
 800020e:	d946      	bls.n	800029e <__udivmoddi4+0xa6>
 8000210:	fab2 f282 	clz	r2, r2
 8000214:	b14a      	cbz	r2, 800022a <__udivmoddi4+0x32>
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa05 f302 	lsl.w	r3, r5, r2
 800021e:	fa20 f101 	lsr.w	r1, r0, r1
 8000222:	4097      	lsls	r7, r2
 8000224:	ea41 0e03 	orr.w	lr, r1, r3
 8000228:	4094      	lsls	r4, r2
 800022a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022e:	0c23      	lsrs	r3, r4, #16
 8000230:	fbbe fcf8 	udiv	ip, lr, r8
 8000234:	b2b9      	uxth	r1, r7
 8000236:	fb08 ee1c 	mls	lr, r8, ip, lr
 800023a:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 800023e:	fb0c f001 	mul.w	r0, ip, r1
 8000242:	4298      	cmp	r0, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f10c 35ff 	add.w	r5, ip, #4294967295	; 0xffffffff
 800024c:	f080 8116 	bcs.w	800047c <__udivmoddi4+0x284>
 8000250:	4298      	cmp	r0, r3
 8000252:	f240 8113 	bls.w	800047c <__udivmoddi4+0x284>
 8000256:	f1ac 0c02 	sub.w	ip, ip, #2
 800025a:	443b      	add	r3, r7
 800025c:	1a1b      	subs	r3, r3, r0
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f101 	mul.w	r1, r0, r1
 8000270:	42a1      	cmp	r1, r4
 8000272:	d909      	bls.n	8000288 <__udivmoddi4+0x90>
 8000274:	193c      	adds	r4, r7, r4
 8000276:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800027a:	f080 8101 	bcs.w	8000480 <__udivmoddi4+0x288>
 800027e:	42a1      	cmp	r1, r4
 8000280:	f240 80fe 	bls.w	8000480 <__udivmoddi4+0x288>
 8000284:	3802      	subs	r0, #2
 8000286:	443c      	add	r4, r7
 8000288:	1a64      	subs	r4, r4, r1
 800028a:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40d4      	lsrs	r4, r2
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d14f      	bne.n	800034a <__udivmoddi4+0x152>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2101      	movs	r1, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c25      	lsrs	r5, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	42ab      	cmp	r3, r5
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	197d      	adds	r5, r7, r5
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	42ab      	cmp	r3, r5
 80002d6:	f200 80e7 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 80002da:	4684      	mov	ip, r0
 80002dc:	1aed      	subs	r5, r5, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb5 f0fe 	udiv	r0, r5, lr
 80002e4:	fb0e 5510 	mls	r5, lr, r0, r5
 80002e8:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d7 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7c0      	b.n	8000290 <__udivmoddi4+0x98>
 800030e:	428b      	cmp	r3, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	2e00      	cmp	r6, #0
 8000314:	f000 80af 	beq.w	8000476 <__udivmoddi4+0x27e>
 8000318:	2100      	movs	r1, #0
 800031a:	e9c6 0500 	strd	r0, r5, [r6]
 800031e:	4608      	mov	r0, r1
 8000320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000324:	fab3 f183 	clz	r1, r3
 8000328:	2900      	cmp	r1, #0
 800032a:	d14b      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032c:	42ab      	cmp	r3, r5
 800032e:	d302      	bcc.n	8000336 <__udivmoddi4+0x13e>
 8000330:	4282      	cmp	r2, r0
 8000332:	f200 80b7 	bhi.w	80004a4 <__udivmoddi4+0x2ac>
 8000336:	1a84      	subs	r4, r0, r2
 8000338:	eb65 0303 	sbc.w	r3, r5, r3
 800033c:	2001      	movs	r0, #1
 800033e:	469e      	mov	lr, r3
 8000340:	2e00      	cmp	r6, #0
 8000342:	d0aa      	beq.n	800029a <__udivmoddi4+0xa2>
 8000344:	e9c6 4e00 	strd	r4, lr, [r6]
 8000348:	e7a7      	b.n	800029a <__udivmoddi4+0xa2>
 800034a:	f1c2 0c20 	rsb	ip, r2, #32
 800034e:	fa01 f302 	lsl.w	r3, r1, r2
 8000352:	4097      	lsls	r7, r2
 8000354:	fa20 f00c 	lsr.w	r0, r0, ip
 8000358:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035c:	fa21 fc0c 	lsr.w	ip, r1, ip
 8000360:	4318      	orrs	r0, r3
 8000362:	fbbc f1fe 	udiv	r1, ip, lr
 8000366:	0c05      	lsrs	r5, r0, #16
 8000368:	fb0e cc11 	mls	ip, lr, r1, ip
 800036c:	fa1f f887 	uxth.w	r8, r7
 8000370:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000374:	fb01 f308 	mul.w	r3, r1, r8
 8000378:	42ab      	cmp	r3, r5
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	197d      	adds	r5, r7, r5
 8000382:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
 8000386:	f080 808b 	bcs.w	80004a0 <__udivmoddi4+0x2a8>
 800038a:	42ab      	cmp	r3, r5
 800038c:	f240 8088 	bls.w	80004a0 <__udivmoddi4+0x2a8>
 8000390:	3902      	subs	r1, #2
 8000392:	443d      	add	r5, r7
 8000394:	1aeb      	subs	r3, r5, r3
 8000396:	b285      	uxth	r5, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	42ab      	cmp	r3, r5
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	197d      	adds	r5, r7, r5
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003b2:	d271      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d96f      	bls.n	8000498 <__udivmoddi4+0x2a0>
 80003b8:	3802      	subs	r0, #2
 80003ba:	443d      	add	r5, r7
 80003bc:	1aeb      	subs	r3, r5, r3
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c1 0c20 	rsb	ip, r1, #32
 80003c8:	408b      	lsls	r3, r1
 80003ca:	fa22 f70c 	lsr.w	r7, r2, ip
 80003ce:	431f      	orrs	r7, r3
 80003d0:	fa20 f40c 	lsr.w	r4, r0, ip
 80003d4:	fa05 f301 	lsl.w	r3, r5, r1
 80003d8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003dc:	fa25 f50c 	lsr.w	r5, r5, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fbb5 f9fe 	udiv	r9, r5, lr
 80003e8:	fa1f f887 	uxth.w	r8, r7
 80003ec:	fb0e 5519 	mls	r5, lr, r9, r5
 80003f0:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
 80003f4:	fb09 fa08 	mul.w	sl, r9, r8
 80003f8:	45aa      	cmp	sl, r5
 80003fa:	fa02 f201 	lsl.w	r2, r2, r1
 80003fe:	fa00 f301 	lsl.w	r3, r0, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x21e>
 8000404:	197d      	adds	r5, r7, r5
 8000406:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800040a:	d247      	bcs.n	800049c <__udivmoddi4+0x2a4>
 800040c:	45aa      	cmp	sl, r5
 800040e:	d945      	bls.n	800049c <__udivmoddi4+0x2a4>
 8000410:	f1a9 0902 	sub.w	r9, r9, #2
 8000414:	443d      	add	r5, r7
 8000416:	eba5 050a 	sub.w	r5, r5, sl
 800041a:	b2a4      	uxth	r4, r4
 800041c:	fbb5 f0fe 	udiv	r0, r5, lr
 8000420:	fb0e 5510 	mls	r5, lr, r0, r5
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb00 f808 	mul.w	r8, r0, r8
 800042c:	45a0      	cmp	r8, r4
 800042e:	d907      	bls.n	8000440 <__udivmoddi4+0x248>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000436:	d22d      	bcs.n	8000494 <__udivmoddi4+0x29c>
 8000438:	45a0      	cmp	r8, r4
 800043a:	d92b      	bls.n	8000494 <__udivmoddi4+0x29c>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000444:	eba4 0408 	sub.w	r4, r4, r8
 8000448:	fba0 8902 	umull	r8, r9, r0, r2
 800044c:	454c      	cmp	r4, r9
 800044e:	46c6      	mov	lr, r8
 8000450:	464d      	mov	r5, r9
 8000452:	d319      	bcc.n	8000488 <__udivmoddi4+0x290>
 8000454:	d016      	beq.n	8000484 <__udivmoddi4+0x28c>
 8000456:	b15e      	cbz	r6, 8000470 <__udivmoddi4+0x278>
 8000458:	ebb3 020e 	subs.w	r2, r3, lr
 800045c:	eb64 0405 	sbc.w	r4, r4, r5
 8000460:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000464:	40ca      	lsrs	r2, r1
 8000466:	ea4c 0202 	orr.w	r2, ip, r2
 800046a:	40cc      	lsrs	r4, r1
 800046c:	e9c6 2400 	strd	r2, r4, [r6]
 8000470:	2100      	movs	r1, #0
 8000472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000476:	4631      	mov	r1, r6
 8000478:	4630      	mov	r0, r6
 800047a:	e70e      	b.n	800029a <__udivmoddi4+0xa2>
 800047c:	46ac      	mov	ip, r5
 800047e:	e6ed      	b.n	800025c <__udivmoddi4+0x64>
 8000480:	4618      	mov	r0, r3
 8000482:	e701      	b.n	8000288 <__udivmoddi4+0x90>
 8000484:	4543      	cmp	r3, r8
 8000486:	d2e6      	bcs.n	8000456 <__udivmoddi4+0x25e>
 8000488:	ebb8 0e02 	subs.w	lr, r8, r2
 800048c:	eb69 0507 	sbc.w	r5, r9, r7
 8000490:	3801      	subs	r0, #1
 8000492:	e7e0      	b.n	8000456 <__udivmoddi4+0x25e>
 8000494:	4628      	mov	r0, r5
 8000496:	e7d3      	b.n	8000440 <__udivmoddi4+0x248>
 8000498:	4660      	mov	r0, ip
 800049a:	e78f      	b.n	80003bc <__udivmoddi4+0x1c4>
 800049c:	4681      	mov	r9, r0
 800049e:	e7ba      	b.n	8000416 <__udivmoddi4+0x21e>
 80004a0:	4661      	mov	r1, ip
 80004a2:	e777      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a4:	4608      	mov	r0, r1
 80004a6:	e74b      	b.n	8000340 <__udivmoddi4+0x148>
 80004a8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004ac:	443d      	add	r5, r7
 80004ae:	e715      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b0:	3802      	subs	r0, #2
 80004b2:	443c      	add	r4, r7
 80004b4:	e726      	b.n	8000304 <__udivmoddi4+0x10c>
 80004b6:	bf00      	nop

080004b8 <__aeabi_idiv0>:
 80004b8:	4770      	bx	lr
 80004ba:	bf00      	nop

080004bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b082      	sub	sp, #8
 80004c0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c2:	f000 fc07 	bl	8000cd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c6:	f000 f833 	bl	8000530 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ca:	f000 f92f 	bl	800072c <MX_GPIO_Init>
  MX_I2C1_Init();
 80004ce:	f000 f899 	bl	8000604 <MX_I2C1_Init>
  MX_I2S3_Init();
 80004d2:	f000 f8c5 	bl	8000660 <MX_I2S3_Init>
  MX_SPI1_Init();
 80004d6:	f000 f8f3 	bl	80006c0 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004da:	f006 ff47 	bl	800736c <MX_USB_HOST_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin, GPIO_PIN_SET);
 80004de:	2201      	movs	r2, #1
 80004e0:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80004e4:	480f      	ldr	r0, [pc, #60]	; (8000524 <main+0x68>)
 80004e6:	f000 ff2f 	bl	8001348 <HAL_GPIO_WritePin>
      for (int t=0;t<100000000;t++);
 80004ea:	2300      	movs	r3, #0
 80004ec:	607b      	str	r3, [r7, #4]
 80004ee:	e002      	b.n	80004f6 <main+0x3a>
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	3301      	adds	r3, #1
 80004f4:	607b      	str	r3, [r7, #4]
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	4a0b      	ldr	r2, [pc, #44]	; (8000528 <main+0x6c>)
 80004fa:	4293      	cmp	r3, r2
 80004fc:	ddf8      	ble.n	80004f0 <main+0x34>
      HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin, GPIO_PIN_RESET);
 80004fe:	2200      	movs	r2, #0
 8000500:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000504:	4807      	ldr	r0, [pc, #28]	; (8000524 <main+0x68>)
 8000506:	f000 ff1f 	bl	8001348 <HAL_GPIO_WritePin>
      for (int t=0;t<1000000;t++);
 800050a:	2300      	movs	r3, #0
 800050c:	603b      	str	r3, [r7, #0]
 800050e:	e002      	b.n	8000516 <main+0x5a>
 8000510:	683b      	ldr	r3, [r7, #0]
 8000512:	3301      	adds	r3, #1
 8000514:	603b      	str	r3, [r7, #0]
 8000516:	683b      	ldr	r3, [r7, #0]
 8000518:	4a04      	ldr	r2, [pc, #16]	; (800052c <main+0x70>)
 800051a:	4293      	cmp	r3, r2
 800051c:	ddf8      	ble.n	8000510 <main+0x54>

    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800051e:	f006 ff4b 	bl	80073b8 <MX_USB_HOST_Process>
      HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin, GPIO_PIN_SET);
 8000522:	e7dc      	b.n	80004de <main+0x22>
 8000524:	40020c00 	.word	0x40020c00
 8000528:	05f5e0ff 	.word	0x05f5e0ff
 800052c:	000f423f 	.word	0x000f423f

08000530 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b094      	sub	sp, #80	; 0x50
 8000534:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000536:	f107 0320 	add.w	r3, r7, #32
 800053a:	2230      	movs	r2, #48	; 0x30
 800053c:	2100      	movs	r1, #0
 800053e:	4618      	mov	r0, r3
 8000540:	f007 fa52 	bl	80079e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000544:	f107 030c 	add.w	r3, r7, #12
 8000548:	2200      	movs	r2, #0
 800054a:	601a      	str	r2, [r3, #0]
 800054c:	605a      	str	r2, [r3, #4]
 800054e:	609a      	str	r2, [r3, #8]
 8000550:	60da      	str	r2, [r3, #12]
 8000552:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000554:	2300      	movs	r3, #0
 8000556:	60bb      	str	r3, [r7, #8]
 8000558:	4b28      	ldr	r3, [pc, #160]	; (80005fc <SystemClock_Config+0xcc>)
 800055a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800055c:	4a27      	ldr	r2, [pc, #156]	; (80005fc <SystemClock_Config+0xcc>)
 800055e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000562:	6413      	str	r3, [r2, #64]	; 0x40
 8000564:	4b25      	ldr	r3, [pc, #148]	; (80005fc <SystemClock_Config+0xcc>)
 8000566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000568:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800056c:	60bb      	str	r3, [r7, #8]
 800056e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000570:	2300      	movs	r3, #0
 8000572:	607b      	str	r3, [r7, #4]
 8000574:	4b22      	ldr	r3, [pc, #136]	; (8000600 <SystemClock_Config+0xd0>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a21      	ldr	r2, [pc, #132]	; (8000600 <SystemClock_Config+0xd0>)
 800057a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800057e:	6013      	str	r3, [r2, #0]
 8000580:	4b1f      	ldr	r3, [pc, #124]	; (8000600 <SystemClock_Config+0xd0>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000588:	607b      	str	r3, [r7, #4]
 800058a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800058c:	2301      	movs	r3, #1
 800058e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000590:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000594:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000596:	2302      	movs	r3, #2
 8000598:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800059a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800059e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005a0:	2308      	movs	r3, #8
 80005a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005a4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005a8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005aa:	2302      	movs	r3, #2
 80005ac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005ae:	2307      	movs	r3, #7
 80005b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b2:	f107 0320 	add.w	r3, r7, #32
 80005b6:	4618      	mov	r0, r3
 80005b8:	f003 fa2a 	bl	8003a10 <HAL_RCC_OscConfig>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005c2:	f000 f9b1 	bl	8000928 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c6:	230f      	movs	r3, #15
 80005c8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ca:	2302      	movs	r3, #2
 80005cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ce:	2300      	movs	r3, #0
 80005d0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005d2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005d6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005dc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005de:	f107 030c 	add.w	r3, r7, #12
 80005e2:	2105      	movs	r1, #5
 80005e4:	4618      	mov	r0, r3
 80005e6:	f003 fc8b 	bl	8003f00 <HAL_RCC_ClockConfig>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005f0:	f000 f99a 	bl	8000928 <Error_Handler>
  }
}
 80005f4:	bf00      	nop
 80005f6:	3750      	adds	r7, #80	; 0x50
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	40023800 	.word	0x40023800
 8000600:	40007000 	.word	0x40007000

08000604 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000608:	4b12      	ldr	r3, [pc, #72]	; (8000654 <MX_I2C1_Init+0x50>)
 800060a:	4a13      	ldr	r2, [pc, #76]	; (8000658 <MX_I2C1_Init+0x54>)
 800060c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800060e:	4b11      	ldr	r3, [pc, #68]	; (8000654 <MX_I2C1_Init+0x50>)
 8000610:	4a12      	ldr	r2, [pc, #72]	; (800065c <MX_I2C1_Init+0x58>)
 8000612:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000614:	4b0f      	ldr	r3, [pc, #60]	; (8000654 <MX_I2C1_Init+0x50>)
 8000616:	2200      	movs	r2, #0
 8000618:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800061a:	4b0e      	ldr	r3, [pc, #56]	; (8000654 <MX_I2C1_Init+0x50>)
 800061c:	2200      	movs	r2, #0
 800061e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000620:	4b0c      	ldr	r3, [pc, #48]	; (8000654 <MX_I2C1_Init+0x50>)
 8000622:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000626:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000628:	4b0a      	ldr	r3, [pc, #40]	; (8000654 <MX_I2C1_Init+0x50>)
 800062a:	2200      	movs	r2, #0
 800062c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800062e:	4b09      	ldr	r3, [pc, #36]	; (8000654 <MX_I2C1_Init+0x50>)
 8000630:	2200      	movs	r2, #0
 8000632:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000634:	4b07      	ldr	r3, [pc, #28]	; (8000654 <MX_I2C1_Init+0x50>)
 8000636:	2200      	movs	r2, #0
 8000638:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800063a:	4b06      	ldr	r3, [pc, #24]	; (8000654 <MX_I2C1_Init+0x50>)
 800063c:	2200      	movs	r2, #0
 800063e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000640:	4804      	ldr	r0, [pc, #16]	; (8000654 <MX_I2C1_Init+0x50>)
 8000642:	f002 fc07 	bl	8002e54 <HAL_I2C_Init>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800064c:	f000 f96c 	bl	8000928 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000650:	bf00      	nop
 8000652:	bd80      	pop	{r7, pc}
 8000654:	200000bc 	.word	0x200000bc
 8000658:	40005400 	.word	0x40005400
 800065c:	000186a0 	.word	0x000186a0

08000660 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000664:	4b13      	ldr	r3, [pc, #76]	; (80006b4 <MX_I2S3_Init+0x54>)
 8000666:	4a14      	ldr	r2, [pc, #80]	; (80006b8 <MX_I2S3_Init+0x58>)
 8000668:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800066a:	4b12      	ldr	r3, [pc, #72]	; (80006b4 <MX_I2S3_Init+0x54>)
 800066c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000670:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000672:	4b10      	ldr	r3, [pc, #64]	; (80006b4 <MX_I2S3_Init+0x54>)
 8000674:	2200      	movs	r2, #0
 8000676:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000678:	4b0e      	ldr	r3, [pc, #56]	; (80006b4 <MX_I2S3_Init+0x54>)
 800067a:	2200      	movs	r2, #0
 800067c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800067e:	4b0d      	ldr	r3, [pc, #52]	; (80006b4 <MX_I2S3_Init+0x54>)
 8000680:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000684:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000686:	4b0b      	ldr	r3, [pc, #44]	; (80006b4 <MX_I2S3_Init+0x54>)
 8000688:	4a0c      	ldr	r2, [pc, #48]	; (80006bc <MX_I2S3_Init+0x5c>)
 800068a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800068c:	4b09      	ldr	r3, [pc, #36]	; (80006b4 <MX_I2S3_Init+0x54>)
 800068e:	2200      	movs	r2, #0
 8000690:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000692:	4b08      	ldr	r3, [pc, #32]	; (80006b4 <MX_I2S3_Init+0x54>)
 8000694:	2200      	movs	r2, #0
 8000696:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000698:	4b06      	ldr	r3, [pc, #24]	; (80006b4 <MX_I2S3_Init+0x54>)
 800069a:	2200      	movs	r2, #0
 800069c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800069e:	4805      	ldr	r0, [pc, #20]	; (80006b4 <MX_I2S3_Init+0x54>)
 80006a0:	f002 fd1c 	bl	80030dc <HAL_I2S_Init>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80006aa:	f000 f93d 	bl	8000928 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80006ae:	bf00      	nop
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	20000168 	.word	0x20000168
 80006b8:	40003c00 	.word	0x40003c00
 80006bc:	00017700 	.word	0x00017700

080006c0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006c4:	4b17      	ldr	r3, [pc, #92]	; (8000724 <MX_SPI1_Init+0x64>)
 80006c6:	4a18      	ldr	r2, [pc, #96]	; (8000728 <MX_SPI1_Init+0x68>)
 80006c8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006ca:	4b16      	ldr	r3, [pc, #88]	; (8000724 <MX_SPI1_Init+0x64>)
 80006cc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006d0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006d2:	4b14      	ldr	r3, [pc, #80]	; (8000724 <MX_SPI1_Init+0x64>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006d8:	4b12      	ldr	r3, [pc, #72]	; (8000724 <MX_SPI1_Init+0x64>)
 80006da:	2200      	movs	r2, #0
 80006dc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006de:	4b11      	ldr	r3, [pc, #68]	; (8000724 <MX_SPI1_Init+0x64>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006e4:	4b0f      	ldr	r3, [pc, #60]	; (8000724 <MX_SPI1_Init+0x64>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006ea:	4b0e      	ldr	r3, [pc, #56]	; (8000724 <MX_SPI1_Init+0x64>)
 80006ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006f0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006f2:	4b0c      	ldr	r3, [pc, #48]	; (8000724 <MX_SPI1_Init+0x64>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006f8:	4b0a      	ldr	r3, [pc, #40]	; (8000724 <MX_SPI1_Init+0x64>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006fe:	4b09      	ldr	r3, [pc, #36]	; (8000724 <MX_SPI1_Init+0x64>)
 8000700:	2200      	movs	r2, #0
 8000702:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000704:	4b07      	ldr	r3, [pc, #28]	; (8000724 <MX_SPI1_Init+0x64>)
 8000706:	2200      	movs	r2, #0
 8000708:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800070a:	4b06      	ldr	r3, [pc, #24]	; (8000724 <MX_SPI1_Init+0x64>)
 800070c:	220a      	movs	r2, #10
 800070e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000710:	4804      	ldr	r0, [pc, #16]	; (8000724 <MX_SPI1_Init+0x64>)
 8000712:	f003 ff19 	bl	8004548 <HAL_SPI_Init>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800071c:	f000 f904 	bl	8000928 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000720:	bf00      	nop
 8000722:	bd80      	pop	{r7, pc}
 8000724:	20000110 	.word	0x20000110
 8000728:	40013000 	.word	0x40013000

0800072c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b08c      	sub	sp, #48	; 0x30
 8000730:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000732:	f107 031c 	add.w	r3, r7, #28
 8000736:	2200      	movs	r2, #0
 8000738:	601a      	str	r2, [r3, #0]
 800073a:	605a      	str	r2, [r3, #4]
 800073c:	609a      	str	r2, [r3, #8]
 800073e:	60da      	str	r2, [r3, #12]
 8000740:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	61bb      	str	r3, [r7, #24]
 8000746:	4b72      	ldr	r3, [pc, #456]	; (8000910 <MX_GPIO_Init+0x1e4>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	4a71      	ldr	r2, [pc, #452]	; (8000910 <MX_GPIO_Init+0x1e4>)
 800074c:	f043 0310 	orr.w	r3, r3, #16
 8000750:	6313      	str	r3, [r2, #48]	; 0x30
 8000752:	4b6f      	ldr	r3, [pc, #444]	; (8000910 <MX_GPIO_Init+0x1e4>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	f003 0310 	and.w	r3, r3, #16
 800075a:	61bb      	str	r3, [r7, #24]
 800075c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	617b      	str	r3, [r7, #20]
 8000762:	4b6b      	ldr	r3, [pc, #428]	; (8000910 <MX_GPIO_Init+0x1e4>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	4a6a      	ldr	r2, [pc, #424]	; (8000910 <MX_GPIO_Init+0x1e4>)
 8000768:	f043 0304 	orr.w	r3, r3, #4
 800076c:	6313      	str	r3, [r2, #48]	; 0x30
 800076e:	4b68      	ldr	r3, [pc, #416]	; (8000910 <MX_GPIO_Init+0x1e4>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	f003 0304 	and.w	r3, r3, #4
 8000776:	617b      	str	r3, [r7, #20]
 8000778:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	613b      	str	r3, [r7, #16]
 800077e:	4b64      	ldr	r3, [pc, #400]	; (8000910 <MX_GPIO_Init+0x1e4>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	4a63      	ldr	r2, [pc, #396]	; (8000910 <MX_GPIO_Init+0x1e4>)
 8000784:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000788:	6313      	str	r3, [r2, #48]	; 0x30
 800078a:	4b61      	ldr	r3, [pc, #388]	; (8000910 <MX_GPIO_Init+0x1e4>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000792:	613b      	str	r3, [r7, #16]
 8000794:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	60fb      	str	r3, [r7, #12]
 800079a:	4b5d      	ldr	r3, [pc, #372]	; (8000910 <MX_GPIO_Init+0x1e4>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	4a5c      	ldr	r2, [pc, #368]	; (8000910 <MX_GPIO_Init+0x1e4>)
 80007a0:	f043 0301 	orr.w	r3, r3, #1
 80007a4:	6313      	str	r3, [r2, #48]	; 0x30
 80007a6:	4b5a      	ldr	r3, [pc, #360]	; (8000910 <MX_GPIO_Init+0x1e4>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	f003 0301 	and.w	r3, r3, #1
 80007ae:	60fb      	str	r3, [r7, #12]
 80007b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	60bb      	str	r3, [r7, #8]
 80007b6:	4b56      	ldr	r3, [pc, #344]	; (8000910 <MX_GPIO_Init+0x1e4>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	4a55      	ldr	r2, [pc, #340]	; (8000910 <MX_GPIO_Init+0x1e4>)
 80007bc:	f043 0302 	orr.w	r3, r3, #2
 80007c0:	6313      	str	r3, [r2, #48]	; 0x30
 80007c2:	4b53      	ldr	r3, [pc, #332]	; (8000910 <MX_GPIO_Init+0x1e4>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	f003 0302 	and.w	r3, r3, #2
 80007ca:	60bb      	str	r3, [r7, #8]
 80007cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	607b      	str	r3, [r7, #4]
 80007d2:	4b4f      	ldr	r3, [pc, #316]	; (8000910 <MX_GPIO_Init+0x1e4>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	4a4e      	ldr	r2, [pc, #312]	; (8000910 <MX_GPIO_Init+0x1e4>)
 80007d8:	f043 0308 	orr.w	r3, r3, #8
 80007dc:	6313      	str	r3, [r2, #48]	; 0x30
 80007de:	4b4c      	ldr	r3, [pc, #304]	; (8000910 <MX_GPIO_Init+0x1e4>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	f003 0308 	and.w	r3, r3, #8
 80007e6:	607b      	str	r3, [r7, #4]
 80007e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80007ea:	2200      	movs	r2, #0
 80007ec:	2108      	movs	r1, #8
 80007ee:	4849      	ldr	r0, [pc, #292]	; (8000914 <MX_GPIO_Init+0x1e8>)
 80007f0:	f000 fdaa 	bl	8001348 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007f4:	2201      	movs	r2, #1
 80007f6:	2101      	movs	r1, #1
 80007f8:	4847      	ldr	r0, [pc, #284]	; (8000918 <MX_GPIO_Init+0x1ec>)
 80007fa:	f000 fda5 	bl	8001348 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80007fe:	2200      	movs	r2, #0
 8000800:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000804:	4845      	ldr	r0, [pc, #276]	; (800091c <MX_GPIO_Init+0x1f0>)
 8000806:	f000 fd9f 	bl	8001348 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800080a:	2308      	movs	r3, #8
 800080c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800080e:	2301      	movs	r3, #1
 8000810:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000812:	2300      	movs	r3, #0
 8000814:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000816:	2300      	movs	r3, #0
 8000818:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800081a:	f107 031c 	add.w	r3, r7, #28
 800081e:	4619      	mov	r1, r3
 8000820:	483c      	ldr	r0, [pc, #240]	; (8000914 <MX_GPIO_Init+0x1e8>)
 8000822:	f000 fbf7 	bl	8001014 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000826:	2301      	movs	r3, #1
 8000828:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082a:	2301      	movs	r3, #1
 800082c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082e:	2300      	movs	r3, #0
 8000830:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000832:	2300      	movs	r3, #0
 8000834:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000836:	f107 031c 	add.w	r3, r7, #28
 800083a:	4619      	mov	r1, r3
 800083c:	4836      	ldr	r0, [pc, #216]	; (8000918 <MX_GPIO_Init+0x1ec>)
 800083e:	f000 fbe9 	bl	8001014 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000842:	2308      	movs	r3, #8
 8000844:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000846:	2302      	movs	r3, #2
 8000848:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084a:	2300      	movs	r3, #0
 800084c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084e:	2300      	movs	r3, #0
 8000850:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000852:	2305      	movs	r3, #5
 8000854:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000856:	f107 031c 	add.w	r3, r7, #28
 800085a:	4619      	mov	r1, r3
 800085c:	482e      	ldr	r0, [pc, #184]	; (8000918 <MX_GPIO_Init+0x1ec>)
 800085e:	f000 fbd9 	bl	8001014 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000862:	2301      	movs	r3, #1
 8000864:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000866:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800086a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086c:	2300      	movs	r3, #0
 800086e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000870:	f107 031c 	add.w	r3, r7, #28
 8000874:	4619      	mov	r1, r3
 8000876:	482a      	ldr	r0, [pc, #168]	; (8000920 <MX_GPIO_Init+0x1f4>)
 8000878:	f000 fbcc 	bl	8001014 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800087c:	2304      	movs	r3, #4
 800087e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000880:	2300      	movs	r3, #0
 8000882:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000884:	2300      	movs	r3, #0
 8000886:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000888:	f107 031c 	add.w	r3, r7, #28
 800088c:	4619      	mov	r1, r3
 800088e:	4825      	ldr	r0, [pc, #148]	; (8000924 <MX_GPIO_Init+0x1f8>)
 8000890:	f000 fbc0 	bl	8001014 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000894:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000898:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089a:	2302      	movs	r3, #2
 800089c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089e:	2300      	movs	r3, #0
 80008a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a2:	2300      	movs	r3, #0
 80008a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008a6:	2305      	movs	r3, #5
 80008a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80008aa:	f107 031c 	add.w	r3, r7, #28
 80008ae:	4619      	mov	r1, r3
 80008b0:	481c      	ldr	r0, [pc, #112]	; (8000924 <MX_GPIO_Init+0x1f8>)
 80008b2:	f000 fbaf 	bl	8001014 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008b6:	f24f 0310 	movw	r3, #61456	; 0xf010
 80008ba:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008bc:	2301      	movs	r3, #1
 80008be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c0:	2300      	movs	r3, #0
 80008c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c4:	2300      	movs	r3, #0
 80008c6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008c8:	f107 031c 	add.w	r3, r7, #28
 80008cc:	4619      	mov	r1, r3
 80008ce:	4813      	ldr	r0, [pc, #76]	; (800091c <MX_GPIO_Init+0x1f0>)
 80008d0:	f000 fba0 	bl	8001014 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80008d4:	2320      	movs	r3, #32
 80008d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008d8:	2300      	movs	r3, #0
 80008da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008dc:	2300      	movs	r3, #0
 80008de:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008e0:	f107 031c 	add.w	r3, r7, #28
 80008e4:	4619      	mov	r1, r3
 80008e6:	480d      	ldr	r0, [pc, #52]	; (800091c <MX_GPIO_Init+0x1f0>)
 80008e8:	f000 fb94 	bl	8001014 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80008ec:	2302      	movs	r3, #2
 80008ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008f0:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80008f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80008fa:	f107 031c 	add.w	r3, r7, #28
 80008fe:	4619      	mov	r1, r3
 8000900:	4804      	ldr	r0, [pc, #16]	; (8000914 <MX_GPIO_Init+0x1e8>)
 8000902:	f000 fb87 	bl	8001014 <HAL_GPIO_Init>

}
 8000906:	bf00      	nop
 8000908:	3730      	adds	r7, #48	; 0x30
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	40023800 	.word	0x40023800
 8000914:	40021000 	.word	0x40021000
 8000918:	40020800 	.word	0x40020800
 800091c:	40020c00 	.word	0x40020c00
 8000920:	40020000 	.word	0x40020000
 8000924:	40020400 	.word	0x40020400

08000928 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800092c:	b672      	cpsid	i
}
 800092e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000930:	e7fe      	b.n	8000930 <Error_Handler+0x8>
	...

08000934 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	607b      	str	r3, [r7, #4]
 800093e:	4b10      	ldr	r3, [pc, #64]	; (8000980 <HAL_MspInit+0x4c>)
 8000940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000942:	4a0f      	ldr	r2, [pc, #60]	; (8000980 <HAL_MspInit+0x4c>)
 8000944:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000948:	6453      	str	r3, [r2, #68]	; 0x44
 800094a:	4b0d      	ldr	r3, [pc, #52]	; (8000980 <HAL_MspInit+0x4c>)
 800094c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800094e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000952:	607b      	str	r3, [r7, #4]
 8000954:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	603b      	str	r3, [r7, #0]
 800095a:	4b09      	ldr	r3, [pc, #36]	; (8000980 <HAL_MspInit+0x4c>)
 800095c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095e:	4a08      	ldr	r2, [pc, #32]	; (8000980 <HAL_MspInit+0x4c>)
 8000960:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000964:	6413      	str	r3, [r2, #64]	; 0x40
 8000966:	4b06      	ldr	r3, [pc, #24]	; (8000980 <HAL_MspInit+0x4c>)
 8000968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800096a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800096e:	603b      	str	r3, [r7, #0]
 8000970:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000972:	2007      	movs	r0, #7
 8000974:	f000 fb0c 	bl	8000f90 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000978:	bf00      	nop
 800097a:	3708      	adds	r7, #8
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	40023800 	.word	0x40023800

08000984 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b08a      	sub	sp, #40	; 0x28
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800098c:	f107 0314 	add.w	r3, r7, #20
 8000990:	2200      	movs	r2, #0
 8000992:	601a      	str	r2, [r3, #0]
 8000994:	605a      	str	r2, [r3, #4]
 8000996:	609a      	str	r2, [r3, #8]
 8000998:	60da      	str	r2, [r3, #12]
 800099a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a19      	ldr	r2, [pc, #100]	; (8000a08 <HAL_I2C_MspInit+0x84>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d12c      	bne.n	8000a00 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	613b      	str	r3, [r7, #16]
 80009aa:	4b18      	ldr	r3, [pc, #96]	; (8000a0c <HAL_I2C_MspInit+0x88>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	4a17      	ldr	r2, [pc, #92]	; (8000a0c <HAL_I2C_MspInit+0x88>)
 80009b0:	f043 0302 	orr.w	r3, r3, #2
 80009b4:	6313      	str	r3, [r2, #48]	; 0x30
 80009b6:	4b15      	ldr	r3, [pc, #84]	; (8000a0c <HAL_I2C_MspInit+0x88>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	f003 0302 	and.w	r3, r3, #2
 80009be:	613b      	str	r3, [r7, #16]
 80009c0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80009c2:	f44f 7310 	mov.w	r3, #576	; 0x240
 80009c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009c8:	2312      	movs	r3, #18
 80009ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009cc:	2301      	movs	r3, #1
 80009ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d0:	2300      	movs	r3, #0
 80009d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009d4:	2304      	movs	r3, #4
 80009d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009d8:	f107 0314 	add.w	r3, r7, #20
 80009dc:	4619      	mov	r1, r3
 80009de:	480c      	ldr	r0, [pc, #48]	; (8000a10 <HAL_I2C_MspInit+0x8c>)
 80009e0:	f000 fb18 	bl	8001014 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009e4:	2300      	movs	r3, #0
 80009e6:	60fb      	str	r3, [r7, #12]
 80009e8:	4b08      	ldr	r3, [pc, #32]	; (8000a0c <HAL_I2C_MspInit+0x88>)
 80009ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ec:	4a07      	ldr	r2, [pc, #28]	; (8000a0c <HAL_I2C_MspInit+0x88>)
 80009ee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009f2:	6413      	str	r3, [r2, #64]	; 0x40
 80009f4:	4b05      	ldr	r3, [pc, #20]	; (8000a0c <HAL_I2C_MspInit+0x88>)
 80009f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009fc:	60fb      	str	r3, [r7, #12]
 80009fe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a00:	bf00      	nop
 8000a02:	3728      	adds	r7, #40	; 0x28
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	40005400 	.word	0x40005400
 8000a0c:	40023800 	.word	0x40023800
 8000a10:	40020400 	.word	0x40020400

08000a14 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b08e      	sub	sp, #56	; 0x38
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a20:	2200      	movs	r2, #0
 8000a22:	601a      	str	r2, [r3, #0]
 8000a24:	605a      	str	r2, [r3, #4]
 8000a26:	609a      	str	r2, [r3, #8]
 8000a28:	60da      	str	r2, [r3, #12]
 8000a2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a2c:	f107 0314 	add.w	r3, r7, #20
 8000a30:	2200      	movs	r2, #0
 8000a32:	601a      	str	r2, [r3, #0]
 8000a34:	605a      	str	r2, [r3, #4]
 8000a36:	609a      	str	r2, [r3, #8]
 8000a38:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	4a31      	ldr	r2, [pc, #196]	; (8000b04 <HAL_I2S_MspInit+0xf0>)
 8000a40:	4293      	cmp	r3, r2
 8000a42:	d15a      	bne.n	8000afa <HAL_I2S_MspInit+0xe6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000a44:	2301      	movs	r3, #1
 8000a46:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000a48:	23c0      	movs	r3, #192	; 0xc0
 8000a4a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a50:	f107 0314 	add.w	r3, r7, #20
 8000a54:	4618      	mov	r0, r3
 8000a56:	f003 fc39 	bl	80042cc <HAL_RCCEx_PeriphCLKConfig>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000a60:	f7ff ff62 	bl	8000928 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000a64:	2300      	movs	r3, #0
 8000a66:	613b      	str	r3, [r7, #16]
 8000a68:	4b27      	ldr	r3, [pc, #156]	; (8000b08 <HAL_I2S_MspInit+0xf4>)
 8000a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6c:	4a26      	ldr	r2, [pc, #152]	; (8000b08 <HAL_I2S_MspInit+0xf4>)
 8000a6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a72:	6413      	str	r3, [r2, #64]	; 0x40
 8000a74:	4b24      	ldr	r3, [pc, #144]	; (8000b08 <HAL_I2S_MspInit+0xf4>)
 8000a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a7c:	613b      	str	r3, [r7, #16]
 8000a7e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a80:	2300      	movs	r3, #0
 8000a82:	60fb      	str	r3, [r7, #12]
 8000a84:	4b20      	ldr	r3, [pc, #128]	; (8000b08 <HAL_I2S_MspInit+0xf4>)
 8000a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a88:	4a1f      	ldr	r2, [pc, #124]	; (8000b08 <HAL_I2S_MspInit+0xf4>)
 8000a8a:	f043 0301 	orr.w	r3, r3, #1
 8000a8e:	6313      	str	r3, [r2, #48]	; 0x30
 8000a90:	4b1d      	ldr	r3, [pc, #116]	; (8000b08 <HAL_I2S_MspInit+0xf4>)
 8000a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a94:	f003 0301 	and.w	r3, r3, #1
 8000a98:	60fb      	str	r3, [r7, #12]
 8000a9a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	60bb      	str	r3, [r7, #8]
 8000aa0:	4b19      	ldr	r3, [pc, #100]	; (8000b08 <HAL_I2S_MspInit+0xf4>)
 8000aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa4:	4a18      	ldr	r2, [pc, #96]	; (8000b08 <HAL_I2S_MspInit+0xf4>)
 8000aa6:	f043 0304 	orr.w	r3, r3, #4
 8000aaa:	6313      	str	r3, [r2, #48]	; 0x30
 8000aac:	4b16      	ldr	r3, [pc, #88]	; (8000b08 <HAL_I2S_MspInit+0xf4>)
 8000aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab0:	f003 0304 	and.w	r3, r3, #4
 8000ab4:	60bb      	str	r3, [r7, #8]
 8000ab6:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000ab8:	2310      	movs	r3, #16
 8000aba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000abc:	2302      	movs	r3, #2
 8000abe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ac8:	2306      	movs	r3, #6
 8000aca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000acc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	480e      	ldr	r0, [pc, #56]	; (8000b0c <HAL_I2S_MspInit+0xf8>)
 8000ad4:	f000 fa9e 	bl	8001014 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000ad8:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000adc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000aea:	2306      	movs	r3, #6
 8000aec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000af2:	4619      	mov	r1, r3
 8000af4:	4806      	ldr	r0, [pc, #24]	; (8000b10 <HAL_I2S_MspInit+0xfc>)
 8000af6:	f000 fa8d 	bl	8001014 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000afa:	bf00      	nop
 8000afc:	3738      	adds	r7, #56	; 0x38
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	40003c00 	.word	0x40003c00
 8000b08:	40023800 	.word	0x40023800
 8000b0c:	40020000 	.word	0x40020000
 8000b10:	40020800 	.word	0x40020800

08000b14 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b08a      	sub	sp, #40	; 0x28
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b1c:	f107 0314 	add.w	r3, r7, #20
 8000b20:	2200      	movs	r2, #0
 8000b22:	601a      	str	r2, [r3, #0]
 8000b24:	605a      	str	r2, [r3, #4]
 8000b26:	609a      	str	r2, [r3, #8]
 8000b28:	60da      	str	r2, [r3, #12]
 8000b2a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a19      	ldr	r2, [pc, #100]	; (8000b98 <HAL_SPI_MspInit+0x84>)
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d12b      	bne.n	8000b8e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b36:	2300      	movs	r3, #0
 8000b38:	613b      	str	r3, [r7, #16]
 8000b3a:	4b18      	ldr	r3, [pc, #96]	; (8000b9c <HAL_SPI_MspInit+0x88>)
 8000b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b3e:	4a17      	ldr	r2, [pc, #92]	; (8000b9c <HAL_SPI_MspInit+0x88>)
 8000b40:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b44:	6453      	str	r3, [r2, #68]	; 0x44
 8000b46:	4b15      	ldr	r3, [pc, #84]	; (8000b9c <HAL_SPI_MspInit+0x88>)
 8000b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b4e:	613b      	str	r3, [r7, #16]
 8000b50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b52:	2300      	movs	r3, #0
 8000b54:	60fb      	str	r3, [r7, #12]
 8000b56:	4b11      	ldr	r3, [pc, #68]	; (8000b9c <HAL_SPI_MspInit+0x88>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	4a10      	ldr	r2, [pc, #64]	; (8000b9c <HAL_SPI_MspInit+0x88>)
 8000b5c:	f043 0301 	orr.w	r3, r3, #1
 8000b60:	6313      	str	r3, [r2, #48]	; 0x30
 8000b62:	4b0e      	ldr	r3, [pc, #56]	; (8000b9c <HAL_SPI_MspInit+0x88>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	f003 0301 	and.w	r3, r3, #1
 8000b6a:	60fb      	str	r3, [r7, #12]
 8000b6c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000b6e:	23e0      	movs	r3, #224	; 0xe0
 8000b70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b72:	2302      	movs	r3, #2
 8000b74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b76:	2300      	movs	r3, #0
 8000b78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b7e:	2305      	movs	r3, #5
 8000b80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b82:	f107 0314 	add.w	r3, r7, #20
 8000b86:	4619      	mov	r1, r3
 8000b88:	4805      	ldr	r0, [pc, #20]	; (8000ba0 <HAL_SPI_MspInit+0x8c>)
 8000b8a:	f000 fa43 	bl	8001014 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000b8e:	bf00      	nop
 8000b90:	3728      	adds	r7, #40	; 0x28
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	40013000 	.word	0x40013000
 8000b9c:	40023800 	.word	0x40023800
 8000ba0:	40020000 	.word	0x40020000

08000ba4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ba8:	e7fe      	b.n	8000ba8 <NMI_Handler+0x4>

08000baa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000baa:	b480      	push	{r7}
 8000bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bae:	e7fe      	b.n	8000bae <HardFault_Handler+0x4>

08000bb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bb4:	e7fe      	b.n	8000bb4 <MemManage_Handler+0x4>

08000bb6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bba:	e7fe      	b.n	8000bba <BusFault_Handler+0x4>

08000bbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bc0:	e7fe      	b.n	8000bc0 <UsageFault_Handler+0x4>

08000bc2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bc80      	pop	{r7}
 8000bcc:	4770      	bx	lr

08000bce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bd2:	bf00      	nop
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bc80      	pop	{r7}
 8000bd8:	4770      	bx	lr

08000bda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bde:	bf00      	nop
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bc80      	pop	{r7}
 8000be4:	4770      	bx	lr

08000be6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000be6:	b580      	push	{r7, lr}
 8000be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bea:	f000 f8c5 	bl	8000d78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
	...

08000bf4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000bf8:	4802      	ldr	r0, [pc, #8]	; (8000c04 <OTG_FS_IRQHandler+0x10>)
 8000bfa:	f000 fe27 	bl	800184c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000bfe:	bf00      	nop
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	2000058c 	.word	0x2000058c

08000c08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b086      	sub	sp, #24
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c10:	4a14      	ldr	r2, [pc, #80]	; (8000c64 <_sbrk+0x5c>)
 8000c12:	4b15      	ldr	r3, [pc, #84]	; (8000c68 <_sbrk+0x60>)
 8000c14:	1ad3      	subs	r3, r2, r3
 8000c16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c1c:	4b13      	ldr	r3, [pc, #76]	; (8000c6c <_sbrk+0x64>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d102      	bne.n	8000c2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c24:	4b11      	ldr	r3, [pc, #68]	; (8000c6c <_sbrk+0x64>)
 8000c26:	4a12      	ldr	r2, [pc, #72]	; (8000c70 <_sbrk+0x68>)
 8000c28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c2a:	4b10      	ldr	r3, [pc, #64]	; (8000c6c <_sbrk+0x64>)
 8000c2c:	681a      	ldr	r2, [r3, #0]
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	4413      	add	r3, r2
 8000c32:	693a      	ldr	r2, [r7, #16]
 8000c34:	429a      	cmp	r2, r3
 8000c36:	d207      	bcs.n	8000c48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c38:	f006 fe9c 	bl	8007974 <__errno>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	220c      	movs	r2, #12
 8000c40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c46:	e009      	b.n	8000c5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c48:	4b08      	ldr	r3, [pc, #32]	; (8000c6c <_sbrk+0x64>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c4e:	4b07      	ldr	r3, [pc, #28]	; (8000c6c <_sbrk+0x64>)
 8000c50:	681a      	ldr	r2, [r3, #0]
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	4413      	add	r3, r2
 8000c56:	4a05      	ldr	r2, [pc, #20]	; (8000c6c <_sbrk+0x64>)
 8000c58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c5a:	68fb      	ldr	r3, [r7, #12]
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	3718      	adds	r7, #24
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	20020000 	.word	0x20020000
 8000c68:	00000400 	.word	0x00000400
 8000c6c:	200000ac 	.word	0x200000ac
 8000c70:	200008a0 	.word	0x200008a0

08000c74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c78:	bf00      	nop
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bc80      	pop	{r7}
 8000c7e:	4770      	bx	lr

08000c80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cb8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c84:	480d      	ldr	r0, [pc, #52]	; (8000cbc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c86:	490e      	ldr	r1, [pc, #56]	; (8000cc0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c88:	4a0e      	ldr	r2, [pc, #56]	; (8000cc4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c8c:	e002      	b.n	8000c94 <LoopCopyDataInit>

08000c8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c92:	3304      	adds	r3, #4

08000c94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c98:	d3f9      	bcc.n	8000c8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c9a:	4a0b      	ldr	r2, [pc, #44]	; (8000cc8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c9c:	4c0b      	ldr	r4, [pc, #44]	; (8000ccc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ca0:	e001      	b.n	8000ca6 <LoopFillZerobss>

08000ca2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ca2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ca4:	3204      	adds	r2, #4

08000ca6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ca6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ca8:	d3fb      	bcc.n	8000ca2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000caa:	f7ff ffe3 	bl	8000c74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cae:	f006 fe67 	bl	8007980 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cb2:	f7ff fc03 	bl	80004bc <main>
  bx  lr    
 8000cb6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000cb8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cc0:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000cc4:	08007bc8 	.word	0x08007bc8
  ldr r2, =_sbss
 8000cc8:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000ccc:	200008a0 	.word	0x200008a0

08000cd0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cd0:	e7fe      	b.n	8000cd0 <ADC_IRQHandler>
	...

08000cd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cd8:	4b0e      	ldr	r3, [pc, #56]	; (8000d14 <HAL_Init+0x40>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a0d      	ldr	r2, [pc, #52]	; (8000d14 <HAL_Init+0x40>)
 8000cde:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ce2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ce4:	4b0b      	ldr	r3, [pc, #44]	; (8000d14 <HAL_Init+0x40>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a0a      	ldr	r2, [pc, #40]	; (8000d14 <HAL_Init+0x40>)
 8000cea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cf0:	4b08      	ldr	r3, [pc, #32]	; (8000d14 <HAL_Init+0x40>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a07      	ldr	r2, [pc, #28]	; (8000d14 <HAL_Init+0x40>)
 8000cf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cfa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cfc:	2003      	movs	r0, #3
 8000cfe:	f000 f947 	bl	8000f90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d02:	2000      	movs	r0, #0
 8000d04:	f000 f808 	bl	8000d18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d08:	f7ff fe14 	bl	8000934 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d0c:	2300      	movs	r3, #0
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	40023c00 	.word	0x40023c00

08000d18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d20:	4b12      	ldr	r3, [pc, #72]	; (8000d6c <HAL_InitTick+0x54>)
 8000d22:	681a      	ldr	r2, [r3, #0]
 8000d24:	4b12      	ldr	r3, [pc, #72]	; (8000d70 <HAL_InitTick+0x58>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	4619      	mov	r1, r3
 8000d2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d32:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d36:	4618      	mov	r0, r3
 8000d38:	f000 f95f 	bl	8000ffa <HAL_SYSTICK_Config>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d42:	2301      	movs	r3, #1
 8000d44:	e00e      	b.n	8000d64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	2b0f      	cmp	r3, #15
 8000d4a:	d80a      	bhi.n	8000d62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	6879      	ldr	r1, [r7, #4]
 8000d50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d54:	f000 f927 	bl	8000fa6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d58:	4a06      	ldr	r2, [pc, #24]	; (8000d74 <HAL_InitTick+0x5c>)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	e000      	b.n	8000d64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d62:	2301      	movs	r3, #1
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	3708      	adds	r7, #8
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	20000000 	.word	0x20000000
 8000d70:	20000008 	.word	0x20000008
 8000d74:	20000004 	.word	0x20000004

08000d78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d7c:	4b05      	ldr	r3, [pc, #20]	; (8000d94 <HAL_IncTick+0x1c>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	461a      	mov	r2, r3
 8000d82:	4b05      	ldr	r3, [pc, #20]	; (8000d98 <HAL_IncTick+0x20>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4413      	add	r3, r2
 8000d88:	4a03      	ldr	r2, [pc, #12]	; (8000d98 <HAL_IncTick+0x20>)
 8000d8a:	6013      	str	r3, [r2, #0]
}
 8000d8c:	bf00      	nop
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bc80      	pop	{r7}
 8000d92:	4770      	bx	lr
 8000d94:	20000008 	.word	0x20000008
 8000d98:	200001b0 	.word	0x200001b0

08000d9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000da0:	4b02      	ldr	r3, [pc, #8]	; (8000dac <HAL_GetTick+0x10>)
 8000da2:	681b      	ldr	r3, [r3, #0]
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bc80      	pop	{r7}
 8000daa:	4770      	bx	lr
 8000dac:	200001b0 	.word	0x200001b0

08000db0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b084      	sub	sp, #16
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000db8:	f7ff fff0 	bl	8000d9c <HAL_GetTick>
 8000dbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000dc8:	d005      	beq.n	8000dd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dca:	4b0a      	ldr	r3, [pc, #40]	; (8000df4 <HAL_Delay+0x44>)
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	461a      	mov	r2, r3
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	4413      	add	r3, r2
 8000dd4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000dd6:	bf00      	nop
 8000dd8:	f7ff ffe0 	bl	8000d9c <HAL_GetTick>
 8000ddc:	4602      	mov	r2, r0
 8000dde:	68bb      	ldr	r3, [r7, #8]
 8000de0:	1ad3      	subs	r3, r2, r3
 8000de2:	68fa      	ldr	r2, [r7, #12]
 8000de4:	429a      	cmp	r2, r3
 8000de6:	d8f7      	bhi.n	8000dd8 <HAL_Delay+0x28>
  {
  }
}
 8000de8:	bf00      	nop
 8000dea:	bf00      	nop
 8000dec:	3710      	adds	r7, #16
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	20000008 	.word	0x20000008

08000df8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b085      	sub	sp, #20
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	f003 0307 	and.w	r3, r3, #7
 8000e06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e08:	4b0c      	ldr	r3, [pc, #48]	; (8000e3c <__NVIC_SetPriorityGrouping+0x44>)
 8000e0a:	68db      	ldr	r3, [r3, #12]
 8000e0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e0e:	68ba      	ldr	r2, [r7, #8]
 8000e10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e14:	4013      	ands	r3, r2
 8000e16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e2a:	4a04      	ldr	r2, [pc, #16]	; (8000e3c <__NVIC_SetPriorityGrouping+0x44>)
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	60d3      	str	r3, [r2, #12]
}
 8000e30:	bf00      	nop
 8000e32:	3714      	adds	r7, #20
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bc80      	pop	{r7}
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	e000ed00 	.word	0xe000ed00

08000e40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e44:	4b04      	ldr	r3, [pc, #16]	; (8000e58 <__NVIC_GetPriorityGrouping+0x18>)
 8000e46:	68db      	ldr	r3, [r3, #12]
 8000e48:	0a1b      	lsrs	r3, r3, #8
 8000e4a:	f003 0307 	and.w	r3, r3, #7
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bc80      	pop	{r7}
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	e000ed00 	.word	0xe000ed00

08000e5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	4603      	mov	r3, r0
 8000e64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	db0b      	blt.n	8000e86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e6e:	79fb      	ldrb	r3, [r7, #7]
 8000e70:	f003 021f 	and.w	r2, r3, #31
 8000e74:	4906      	ldr	r1, [pc, #24]	; (8000e90 <__NVIC_EnableIRQ+0x34>)
 8000e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7a:	095b      	lsrs	r3, r3, #5
 8000e7c:	2001      	movs	r0, #1
 8000e7e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e86:	bf00      	nop
 8000e88:	370c      	adds	r7, #12
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bc80      	pop	{r7}
 8000e8e:	4770      	bx	lr
 8000e90:	e000e100 	.word	0xe000e100

08000e94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	6039      	str	r1, [r7, #0]
 8000e9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ea0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	db0a      	blt.n	8000ebe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	b2da      	uxtb	r2, r3
 8000eac:	490c      	ldr	r1, [pc, #48]	; (8000ee0 <__NVIC_SetPriority+0x4c>)
 8000eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb2:	0112      	lsls	r2, r2, #4
 8000eb4:	b2d2      	uxtb	r2, r2
 8000eb6:	440b      	add	r3, r1
 8000eb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ebc:	e00a      	b.n	8000ed4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	b2da      	uxtb	r2, r3
 8000ec2:	4908      	ldr	r1, [pc, #32]	; (8000ee4 <__NVIC_SetPriority+0x50>)
 8000ec4:	79fb      	ldrb	r3, [r7, #7]
 8000ec6:	f003 030f 	and.w	r3, r3, #15
 8000eca:	3b04      	subs	r3, #4
 8000ecc:	0112      	lsls	r2, r2, #4
 8000ece:	b2d2      	uxtb	r2, r2
 8000ed0:	440b      	add	r3, r1
 8000ed2:	761a      	strb	r2, [r3, #24]
}
 8000ed4:	bf00      	nop
 8000ed6:	370c      	adds	r7, #12
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bc80      	pop	{r7}
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	e000e100 	.word	0xe000e100
 8000ee4:	e000ed00 	.word	0xe000ed00

08000ee8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b089      	sub	sp, #36	; 0x24
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	60f8      	str	r0, [r7, #12]
 8000ef0:	60b9      	str	r1, [r7, #8]
 8000ef2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	f003 0307 	and.w	r3, r3, #7
 8000efa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000efc:	69fb      	ldr	r3, [r7, #28]
 8000efe:	f1c3 0307 	rsb	r3, r3, #7
 8000f02:	2b04      	cmp	r3, #4
 8000f04:	bf28      	it	cs
 8000f06:	2304      	movcs	r3, #4
 8000f08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	3304      	adds	r3, #4
 8000f0e:	2b06      	cmp	r3, #6
 8000f10:	d902      	bls.n	8000f18 <NVIC_EncodePriority+0x30>
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	3b03      	subs	r3, #3
 8000f16:	e000      	b.n	8000f1a <NVIC_EncodePriority+0x32>
 8000f18:	2300      	movs	r3, #0
 8000f1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f20:	69bb      	ldr	r3, [r7, #24]
 8000f22:	fa02 f303 	lsl.w	r3, r2, r3
 8000f26:	43da      	mvns	r2, r3
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	401a      	ands	r2, r3
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f30:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	fa01 f303 	lsl.w	r3, r1, r3
 8000f3a:	43d9      	mvns	r1, r3
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f40:	4313      	orrs	r3, r2
         );
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3724      	adds	r7, #36	; 0x24
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bc80      	pop	{r7}
 8000f4a:	4770      	bx	lr

08000f4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	3b01      	subs	r3, #1
 8000f58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f5c:	d301      	bcc.n	8000f62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f5e:	2301      	movs	r3, #1
 8000f60:	e00f      	b.n	8000f82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f62:	4a0a      	ldr	r2, [pc, #40]	; (8000f8c <SysTick_Config+0x40>)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	3b01      	subs	r3, #1
 8000f68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f6a:	210f      	movs	r1, #15
 8000f6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f70:	f7ff ff90 	bl	8000e94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f74:	4b05      	ldr	r3, [pc, #20]	; (8000f8c <SysTick_Config+0x40>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f7a:	4b04      	ldr	r3, [pc, #16]	; (8000f8c <SysTick_Config+0x40>)
 8000f7c:	2207      	movs	r2, #7
 8000f7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f80:	2300      	movs	r3, #0
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	e000e010 	.word	0xe000e010

08000f90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f98:	6878      	ldr	r0, [r7, #4]
 8000f9a:	f7ff ff2d 	bl	8000df8 <__NVIC_SetPriorityGrouping>
}
 8000f9e:	bf00      	nop
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}

08000fa6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	b086      	sub	sp, #24
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	4603      	mov	r3, r0
 8000fae:	60b9      	str	r1, [r7, #8]
 8000fb0:	607a      	str	r2, [r7, #4]
 8000fb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fb8:	f7ff ff42 	bl	8000e40 <__NVIC_GetPriorityGrouping>
 8000fbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fbe:	687a      	ldr	r2, [r7, #4]
 8000fc0:	68b9      	ldr	r1, [r7, #8]
 8000fc2:	6978      	ldr	r0, [r7, #20]
 8000fc4:	f7ff ff90 	bl	8000ee8 <NVIC_EncodePriority>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fce:	4611      	mov	r1, r2
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff ff5f 	bl	8000e94 <__NVIC_SetPriority>
}
 8000fd6:	bf00      	nop
 8000fd8:	3718      	adds	r7, #24
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}

08000fde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	b082      	sub	sp, #8
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fe8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fec:	4618      	mov	r0, r3
 8000fee:	f7ff ff35 	bl	8000e5c <__NVIC_EnableIRQ>
}
 8000ff2:	bf00      	nop
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b082      	sub	sp, #8
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	f7ff ffa2 	bl	8000f4c <SysTick_Config>
 8001008:	4603      	mov	r3, r0
}
 800100a:	4618      	mov	r0, r3
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
	...

08001014 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001014:	b480      	push	{r7}
 8001016:	b089      	sub	sp, #36	; 0x24
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800101e:	2300      	movs	r3, #0
 8001020:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001022:	2300      	movs	r3, #0
 8001024:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001026:	2300      	movs	r3, #0
 8001028:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800102a:	2300      	movs	r3, #0
 800102c:	61fb      	str	r3, [r7, #28]
 800102e:	e16b      	b.n	8001308 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001030:	2201      	movs	r2, #1
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	fa02 f303 	lsl.w	r3, r2, r3
 8001038:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	697a      	ldr	r2, [r7, #20]
 8001040:	4013      	ands	r3, r2
 8001042:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001044:	693a      	ldr	r2, [r7, #16]
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	429a      	cmp	r2, r3
 800104a:	f040 815a 	bne.w	8001302 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	f003 0303 	and.w	r3, r3, #3
 8001056:	2b01      	cmp	r3, #1
 8001058:	d005      	beq.n	8001066 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001062:	2b02      	cmp	r3, #2
 8001064:	d130      	bne.n	80010c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	689b      	ldr	r3, [r3, #8]
 800106a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800106c:	69fb      	ldr	r3, [r7, #28]
 800106e:	005b      	lsls	r3, r3, #1
 8001070:	2203      	movs	r2, #3
 8001072:	fa02 f303 	lsl.w	r3, r2, r3
 8001076:	43db      	mvns	r3, r3
 8001078:	69ba      	ldr	r2, [r7, #24]
 800107a:	4013      	ands	r3, r2
 800107c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	68da      	ldr	r2, [r3, #12]
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	005b      	lsls	r3, r3, #1
 8001086:	fa02 f303 	lsl.w	r3, r2, r3
 800108a:	69ba      	ldr	r2, [r7, #24]
 800108c:	4313      	orrs	r3, r2
 800108e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	69ba      	ldr	r2, [r7, #24]
 8001094:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800109c:	2201      	movs	r2, #1
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	fa02 f303 	lsl.w	r3, r2, r3
 80010a4:	43db      	mvns	r3, r3
 80010a6:	69ba      	ldr	r2, [r7, #24]
 80010a8:	4013      	ands	r3, r2
 80010aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	091b      	lsrs	r3, r3, #4
 80010b2:	f003 0201 	and.w	r2, r3, #1
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	fa02 f303 	lsl.w	r3, r2, r3
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	4313      	orrs	r3, r2
 80010c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	f003 0303 	and.w	r3, r3, #3
 80010d0:	2b03      	cmp	r3, #3
 80010d2:	d017      	beq.n	8001104 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	68db      	ldr	r3, [r3, #12]
 80010d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	005b      	lsls	r3, r3, #1
 80010de:	2203      	movs	r2, #3
 80010e0:	fa02 f303 	lsl.w	r3, r2, r3
 80010e4:	43db      	mvns	r3, r3
 80010e6:	69ba      	ldr	r2, [r7, #24]
 80010e8:	4013      	ands	r3, r2
 80010ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	689a      	ldr	r2, [r3, #8]
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	005b      	lsls	r3, r3, #1
 80010f4:	fa02 f303 	lsl.w	r3, r2, r3
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	4313      	orrs	r3, r2
 80010fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f003 0303 	and.w	r3, r3, #3
 800110c:	2b02      	cmp	r3, #2
 800110e:	d123      	bne.n	8001158 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	08da      	lsrs	r2, r3, #3
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	3208      	adds	r2, #8
 8001118:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800111c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	f003 0307 	and.w	r3, r3, #7
 8001124:	009b      	lsls	r3, r3, #2
 8001126:	220f      	movs	r2, #15
 8001128:	fa02 f303 	lsl.w	r3, r2, r3
 800112c:	43db      	mvns	r3, r3
 800112e:	69ba      	ldr	r2, [r7, #24]
 8001130:	4013      	ands	r3, r2
 8001132:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	691a      	ldr	r2, [r3, #16]
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	f003 0307 	and.w	r3, r3, #7
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	fa02 f303 	lsl.w	r3, r2, r3
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	4313      	orrs	r3, r2
 8001148:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	08da      	lsrs	r2, r3, #3
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	3208      	adds	r2, #8
 8001152:	69b9      	ldr	r1, [r7, #24]
 8001154:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	005b      	lsls	r3, r3, #1
 8001162:	2203      	movs	r2, #3
 8001164:	fa02 f303 	lsl.w	r3, r2, r3
 8001168:	43db      	mvns	r3, r3
 800116a:	69ba      	ldr	r2, [r7, #24]
 800116c:	4013      	ands	r3, r2
 800116e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f003 0203 	and.w	r2, r3, #3
 8001178:	69fb      	ldr	r3, [r7, #28]
 800117a:	005b      	lsls	r3, r3, #1
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	4313      	orrs	r3, r2
 8001184:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001194:	2b00      	cmp	r3, #0
 8001196:	f000 80b4 	beq.w	8001302 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800119a:	2300      	movs	r3, #0
 800119c:	60fb      	str	r3, [r7, #12]
 800119e:	4b5f      	ldr	r3, [pc, #380]	; (800131c <HAL_GPIO_Init+0x308>)
 80011a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011a2:	4a5e      	ldr	r2, [pc, #376]	; (800131c <HAL_GPIO_Init+0x308>)
 80011a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011a8:	6453      	str	r3, [r2, #68]	; 0x44
 80011aa:	4b5c      	ldr	r3, [pc, #368]	; (800131c <HAL_GPIO_Init+0x308>)
 80011ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011b2:	60fb      	str	r3, [r7, #12]
 80011b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011b6:	4a5a      	ldr	r2, [pc, #360]	; (8001320 <HAL_GPIO_Init+0x30c>)
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	089b      	lsrs	r3, r3, #2
 80011bc:	3302      	adds	r3, #2
 80011be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	f003 0303 	and.w	r3, r3, #3
 80011ca:	009b      	lsls	r3, r3, #2
 80011cc:	220f      	movs	r2, #15
 80011ce:	fa02 f303 	lsl.w	r3, r2, r3
 80011d2:	43db      	mvns	r3, r3
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	4013      	ands	r3, r2
 80011d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4a51      	ldr	r2, [pc, #324]	; (8001324 <HAL_GPIO_Init+0x310>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d02b      	beq.n	800123a <HAL_GPIO_Init+0x226>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4a50      	ldr	r2, [pc, #320]	; (8001328 <HAL_GPIO_Init+0x314>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d025      	beq.n	8001236 <HAL_GPIO_Init+0x222>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4a4f      	ldr	r2, [pc, #316]	; (800132c <HAL_GPIO_Init+0x318>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d01f      	beq.n	8001232 <HAL_GPIO_Init+0x21e>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4a4e      	ldr	r2, [pc, #312]	; (8001330 <HAL_GPIO_Init+0x31c>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d019      	beq.n	800122e <HAL_GPIO_Init+0x21a>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4a4d      	ldr	r2, [pc, #308]	; (8001334 <HAL_GPIO_Init+0x320>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d013      	beq.n	800122a <HAL_GPIO_Init+0x216>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4a4c      	ldr	r2, [pc, #304]	; (8001338 <HAL_GPIO_Init+0x324>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d00d      	beq.n	8001226 <HAL_GPIO_Init+0x212>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4a4b      	ldr	r2, [pc, #300]	; (800133c <HAL_GPIO_Init+0x328>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d007      	beq.n	8001222 <HAL_GPIO_Init+0x20e>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4a4a      	ldr	r2, [pc, #296]	; (8001340 <HAL_GPIO_Init+0x32c>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d101      	bne.n	800121e <HAL_GPIO_Init+0x20a>
 800121a:	2307      	movs	r3, #7
 800121c:	e00e      	b.n	800123c <HAL_GPIO_Init+0x228>
 800121e:	2308      	movs	r3, #8
 8001220:	e00c      	b.n	800123c <HAL_GPIO_Init+0x228>
 8001222:	2306      	movs	r3, #6
 8001224:	e00a      	b.n	800123c <HAL_GPIO_Init+0x228>
 8001226:	2305      	movs	r3, #5
 8001228:	e008      	b.n	800123c <HAL_GPIO_Init+0x228>
 800122a:	2304      	movs	r3, #4
 800122c:	e006      	b.n	800123c <HAL_GPIO_Init+0x228>
 800122e:	2303      	movs	r3, #3
 8001230:	e004      	b.n	800123c <HAL_GPIO_Init+0x228>
 8001232:	2302      	movs	r3, #2
 8001234:	e002      	b.n	800123c <HAL_GPIO_Init+0x228>
 8001236:	2301      	movs	r3, #1
 8001238:	e000      	b.n	800123c <HAL_GPIO_Init+0x228>
 800123a:	2300      	movs	r3, #0
 800123c:	69fa      	ldr	r2, [r7, #28]
 800123e:	f002 0203 	and.w	r2, r2, #3
 8001242:	0092      	lsls	r2, r2, #2
 8001244:	4093      	lsls	r3, r2
 8001246:	69ba      	ldr	r2, [r7, #24]
 8001248:	4313      	orrs	r3, r2
 800124a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800124c:	4934      	ldr	r1, [pc, #208]	; (8001320 <HAL_GPIO_Init+0x30c>)
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	089b      	lsrs	r3, r3, #2
 8001252:	3302      	adds	r3, #2
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800125a:	4b3a      	ldr	r3, [pc, #232]	; (8001344 <HAL_GPIO_Init+0x330>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	43db      	mvns	r3, r3
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	4013      	ands	r3, r2
 8001268:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001272:	2b00      	cmp	r3, #0
 8001274:	d003      	beq.n	800127e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001276:	69ba      	ldr	r2, [r7, #24]
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	4313      	orrs	r3, r2
 800127c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800127e:	4a31      	ldr	r2, [pc, #196]	; (8001344 <HAL_GPIO_Init+0x330>)
 8001280:	69bb      	ldr	r3, [r7, #24]
 8001282:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001284:	4b2f      	ldr	r3, [pc, #188]	; (8001344 <HAL_GPIO_Init+0x330>)
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	43db      	mvns	r3, r3
 800128e:	69ba      	ldr	r2, [r7, #24]
 8001290:	4013      	ands	r3, r2
 8001292:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800129c:	2b00      	cmp	r3, #0
 800129e:	d003      	beq.n	80012a8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012a8:	4a26      	ldr	r2, [pc, #152]	; (8001344 <HAL_GPIO_Init+0x330>)
 80012aa:	69bb      	ldr	r3, [r7, #24]
 80012ac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012ae:	4b25      	ldr	r3, [pc, #148]	; (8001344 <HAL_GPIO_Init+0x330>)
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	43db      	mvns	r3, r3
 80012b8:	69ba      	ldr	r2, [r7, #24]
 80012ba:	4013      	ands	r3, r2
 80012bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d003      	beq.n	80012d2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80012ca:	69ba      	ldr	r2, [r7, #24]
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	4313      	orrs	r3, r2
 80012d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012d2:	4a1c      	ldr	r2, [pc, #112]	; (8001344 <HAL_GPIO_Init+0x330>)
 80012d4:	69bb      	ldr	r3, [r7, #24]
 80012d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012d8:	4b1a      	ldr	r3, [pc, #104]	; (8001344 <HAL_GPIO_Init+0x330>)
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	43db      	mvns	r3, r3
 80012e2:	69ba      	ldr	r2, [r7, #24]
 80012e4:	4013      	ands	r3, r2
 80012e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d003      	beq.n	80012fc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012fc:	4a11      	ldr	r2, [pc, #68]	; (8001344 <HAL_GPIO_Init+0x330>)
 80012fe:	69bb      	ldr	r3, [r7, #24]
 8001300:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	3301      	adds	r3, #1
 8001306:	61fb      	str	r3, [r7, #28]
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	2b0f      	cmp	r3, #15
 800130c:	f67f ae90 	bls.w	8001030 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001310:	bf00      	nop
 8001312:	bf00      	nop
 8001314:	3724      	adds	r7, #36	; 0x24
 8001316:	46bd      	mov	sp, r7
 8001318:	bc80      	pop	{r7}
 800131a:	4770      	bx	lr
 800131c:	40023800 	.word	0x40023800
 8001320:	40013800 	.word	0x40013800
 8001324:	40020000 	.word	0x40020000
 8001328:	40020400 	.word	0x40020400
 800132c:	40020800 	.word	0x40020800
 8001330:	40020c00 	.word	0x40020c00
 8001334:	40021000 	.word	0x40021000
 8001338:	40021400 	.word	0x40021400
 800133c:	40021800 	.word	0x40021800
 8001340:	40021c00 	.word	0x40021c00
 8001344:	40013c00 	.word	0x40013c00

08001348 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
 8001350:	460b      	mov	r3, r1
 8001352:	807b      	strh	r3, [r7, #2]
 8001354:	4613      	mov	r3, r2
 8001356:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001358:	787b      	ldrb	r3, [r7, #1]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d003      	beq.n	8001366 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800135e:	887a      	ldrh	r2, [r7, #2]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001364:	e003      	b.n	800136e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001366:	887b      	ldrh	r3, [r7, #2]
 8001368:	041a      	lsls	r2, r3, #16
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	619a      	str	r2, [r3, #24]
}
 800136e:	bf00      	nop
 8001370:	370c      	adds	r7, #12
 8001372:	46bd      	mov	sp, r7
 8001374:	bc80      	pop	{r7}
 8001376:	4770      	bx	lr

08001378 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001378:	b5f0      	push	{r4, r5, r6, r7, lr}
 800137a:	b08f      	sub	sp, #60	; 0x3c
 800137c:	af0a      	add	r7, sp, #40	; 0x28
 800137e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d101      	bne.n	800138a <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	e054      	b.n	8001434 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001396:	b2db      	uxtb	r3, r3
 8001398:	2b00      	cmp	r3, #0
 800139a:	d106      	bne.n	80013aa <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2200      	movs	r2, #0
 80013a0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	f006 f83d 	bl	8007424 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2203      	movs	r2, #3
 80013ae:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d102      	bne.n	80013c4 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2200      	movs	r2, #0
 80013c2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4618      	mov	r0, r3
 80013ca:	f003 f9b7 	bl	800473c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	603b      	str	r3, [r7, #0]
 80013d4:	687e      	ldr	r6, [r7, #4]
 80013d6:	466d      	mov	r5, sp
 80013d8:	f106 0410 	add.w	r4, r6, #16
 80013dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013e4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80013e8:	e885 0003 	stmia.w	r5, {r0, r1}
 80013ec:	1d33      	adds	r3, r6, #4
 80013ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013f0:	6838      	ldr	r0, [r7, #0]
 80013f2:	f003 f932 	bl	800465a <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	2101      	movs	r1, #1
 80013fc:	4618      	mov	r0, r3
 80013fe:	f003 f9ad 	bl	800475c <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	603b      	str	r3, [r7, #0]
 8001408:	687e      	ldr	r6, [r7, #4]
 800140a:	466d      	mov	r5, sp
 800140c:	f106 0410 	add.w	r4, r6, #16
 8001410:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001412:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001414:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001416:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001418:	e894 0003 	ldmia.w	r4, {r0, r1}
 800141c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001420:	1d33      	adds	r3, r6, #4
 8001422:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001424:	6838      	ldr	r0, [r7, #0]
 8001426:	f003 fb0d 	bl	8004a44 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2201      	movs	r2, #1
 800142e:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001432:	2300      	movs	r3, #0
}
 8001434:	4618      	mov	r0, r3
 8001436:	3714      	adds	r7, #20
 8001438:	46bd      	mov	sp, r7
 800143a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800143c <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800143c:	b590      	push	{r4, r7, lr}
 800143e:	b089      	sub	sp, #36	; 0x24
 8001440:	af04      	add	r7, sp, #16
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	4608      	mov	r0, r1
 8001446:	4611      	mov	r1, r2
 8001448:	461a      	mov	r2, r3
 800144a:	4603      	mov	r3, r0
 800144c:	70fb      	strb	r3, [r7, #3]
 800144e:	460b      	mov	r3, r1
 8001450:	70bb      	strb	r3, [r7, #2]
 8001452:	4613      	mov	r3, r2
 8001454:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800145c:	2b01      	cmp	r3, #1
 800145e:	d101      	bne.n	8001464 <HAL_HCD_HC_Init+0x28>
 8001460:	2302      	movs	r3, #2
 8001462:	e076      	b.n	8001552 <HAL_HCD_HC_Init+0x116>
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2201      	movs	r2, #1
 8001468:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800146c:	78fb      	ldrb	r3, [r7, #3]
 800146e:	687a      	ldr	r2, [r7, #4]
 8001470:	212c      	movs	r1, #44	; 0x2c
 8001472:	fb01 f303 	mul.w	r3, r1, r3
 8001476:	4413      	add	r3, r2
 8001478:	333d      	adds	r3, #61	; 0x3d
 800147a:	2200      	movs	r2, #0
 800147c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800147e:	78fb      	ldrb	r3, [r7, #3]
 8001480:	687a      	ldr	r2, [r7, #4]
 8001482:	212c      	movs	r1, #44	; 0x2c
 8001484:	fb01 f303 	mul.w	r3, r1, r3
 8001488:	4413      	add	r3, r2
 800148a:	3338      	adds	r3, #56	; 0x38
 800148c:	787a      	ldrb	r2, [r7, #1]
 800148e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001490:	78fb      	ldrb	r3, [r7, #3]
 8001492:	687a      	ldr	r2, [r7, #4]
 8001494:	212c      	movs	r1, #44	; 0x2c
 8001496:	fb01 f303 	mul.w	r3, r1, r3
 800149a:	4413      	add	r3, r2
 800149c:	3340      	adds	r3, #64	; 0x40
 800149e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80014a0:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80014a2:	78fb      	ldrb	r3, [r7, #3]
 80014a4:	687a      	ldr	r2, [r7, #4]
 80014a6:	212c      	movs	r1, #44	; 0x2c
 80014a8:	fb01 f303 	mul.w	r3, r1, r3
 80014ac:	4413      	add	r3, r2
 80014ae:	3339      	adds	r3, #57	; 0x39
 80014b0:	78fa      	ldrb	r2, [r7, #3]
 80014b2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80014b4:	78fb      	ldrb	r3, [r7, #3]
 80014b6:	687a      	ldr	r2, [r7, #4]
 80014b8:	212c      	movs	r1, #44	; 0x2c
 80014ba:	fb01 f303 	mul.w	r3, r1, r3
 80014be:	4413      	add	r3, r2
 80014c0:	333f      	adds	r3, #63	; 0x3f
 80014c2:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80014c6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80014c8:	78fb      	ldrb	r3, [r7, #3]
 80014ca:	78ba      	ldrb	r2, [r7, #2]
 80014cc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80014d0:	b2d0      	uxtb	r0, r2
 80014d2:	687a      	ldr	r2, [r7, #4]
 80014d4:	212c      	movs	r1, #44	; 0x2c
 80014d6:	fb01 f303 	mul.w	r3, r1, r3
 80014da:	4413      	add	r3, r2
 80014dc:	333a      	adds	r3, #58	; 0x3a
 80014de:	4602      	mov	r2, r0
 80014e0:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80014e2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	da09      	bge.n	80014fe <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80014ea:	78fb      	ldrb	r3, [r7, #3]
 80014ec:	687a      	ldr	r2, [r7, #4]
 80014ee:	212c      	movs	r1, #44	; 0x2c
 80014f0:	fb01 f303 	mul.w	r3, r1, r3
 80014f4:	4413      	add	r3, r2
 80014f6:	333b      	adds	r3, #59	; 0x3b
 80014f8:	2201      	movs	r2, #1
 80014fa:	701a      	strb	r2, [r3, #0]
 80014fc:	e008      	b.n	8001510 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80014fe:	78fb      	ldrb	r3, [r7, #3]
 8001500:	687a      	ldr	r2, [r7, #4]
 8001502:	212c      	movs	r1, #44	; 0x2c
 8001504:	fb01 f303 	mul.w	r3, r1, r3
 8001508:	4413      	add	r3, r2
 800150a:	333b      	adds	r3, #59	; 0x3b
 800150c:	2200      	movs	r2, #0
 800150e:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001510:	78fb      	ldrb	r3, [r7, #3]
 8001512:	687a      	ldr	r2, [r7, #4]
 8001514:	212c      	movs	r1, #44	; 0x2c
 8001516:	fb01 f303 	mul.w	r3, r1, r3
 800151a:	4413      	add	r3, r2
 800151c:	333c      	adds	r3, #60	; 0x3c
 800151e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001522:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6818      	ldr	r0, [r3, #0]
 8001528:	787c      	ldrb	r4, [r7, #1]
 800152a:	78ba      	ldrb	r2, [r7, #2]
 800152c:	78f9      	ldrb	r1, [r7, #3]
 800152e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001530:	9302      	str	r3, [sp, #8]
 8001532:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001536:	9301      	str	r3, [sp, #4]
 8001538:	f897 3020 	ldrb.w	r3, [r7, #32]
 800153c:	9300      	str	r3, [sp, #0]
 800153e:	4623      	mov	r3, r4
 8001540:	f003 fbf6 	bl	8004d30 <USB_HC_Init>
 8001544:	4603      	mov	r3, r0
 8001546:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2200      	movs	r2, #0
 800154c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001550:	7bfb      	ldrb	r3, [r7, #15]
}
 8001552:	4618      	mov	r0, r3
 8001554:	3714      	adds	r7, #20
 8001556:	46bd      	mov	sp, r7
 8001558:	bd90      	pop	{r4, r7, pc}

0800155a <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800155a:	b580      	push	{r7, lr}
 800155c:	b084      	sub	sp, #16
 800155e:	af00      	add	r7, sp, #0
 8001560:	6078      	str	r0, [r7, #4]
 8001562:	460b      	mov	r3, r1
 8001564:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001566:	2300      	movs	r3, #0
 8001568:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001570:	2b01      	cmp	r3, #1
 8001572:	d101      	bne.n	8001578 <HAL_HCD_HC_Halt+0x1e>
 8001574:	2302      	movs	r3, #2
 8001576:	e00f      	b.n	8001598 <HAL_HCD_HC_Halt+0x3e>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2201      	movs	r2, #1
 800157c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	78fa      	ldrb	r2, [r7, #3]
 8001586:	4611      	mov	r1, r2
 8001588:	4618      	mov	r0, r3
 800158a:	f003 fe31 	bl	80051f0 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2200      	movs	r2, #0
 8001592:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001596:	7bfb      	ldrb	r3, [r7, #15]
}
 8001598:	4618      	mov	r0, r3
 800159a:	3710      	adds	r7, #16
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}

080015a0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	4608      	mov	r0, r1
 80015aa:	4611      	mov	r1, r2
 80015ac:	461a      	mov	r2, r3
 80015ae:	4603      	mov	r3, r0
 80015b0:	70fb      	strb	r3, [r7, #3]
 80015b2:	460b      	mov	r3, r1
 80015b4:	70bb      	strb	r3, [r7, #2]
 80015b6:	4613      	mov	r3, r2
 80015b8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80015ba:	78fb      	ldrb	r3, [r7, #3]
 80015bc:	687a      	ldr	r2, [r7, #4]
 80015be:	212c      	movs	r1, #44	; 0x2c
 80015c0:	fb01 f303 	mul.w	r3, r1, r3
 80015c4:	4413      	add	r3, r2
 80015c6:	333b      	adds	r3, #59	; 0x3b
 80015c8:	78ba      	ldrb	r2, [r7, #2]
 80015ca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80015cc:	78fb      	ldrb	r3, [r7, #3]
 80015ce:	687a      	ldr	r2, [r7, #4]
 80015d0:	212c      	movs	r1, #44	; 0x2c
 80015d2:	fb01 f303 	mul.w	r3, r1, r3
 80015d6:	4413      	add	r3, r2
 80015d8:	333f      	adds	r3, #63	; 0x3f
 80015da:	787a      	ldrb	r2, [r7, #1]
 80015dc:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80015de:	7c3b      	ldrb	r3, [r7, #16]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d112      	bne.n	800160a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80015e4:	78fb      	ldrb	r3, [r7, #3]
 80015e6:	687a      	ldr	r2, [r7, #4]
 80015e8:	212c      	movs	r1, #44	; 0x2c
 80015ea:	fb01 f303 	mul.w	r3, r1, r3
 80015ee:	4413      	add	r3, r2
 80015f0:	3342      	adds	r3, #66	; 0x42
 80015f2:	2203      	movs	r2, #3
 80015f4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80015f6:	78fb      	ldrb	r3, [r7, #3]
 80015f8:	687a      	ldr	r2, [r7, #4]
 80015fa:	212c      	movs	r1, #44	; 0x2c
 80015fc:	fb01 f303 	mul.w	r3, r1, r3
 8001600:	4413      	add	r3, r2
 8001602:	333d      	adds	r3, #61	; 0x3d
 8001604:	7f3a      	ldrb	r2, [r7, #28]
 8001606:	701a      	strb	r2, [r3, #0]
 8001608:	e008      	b.n	800161c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800160a:	78fb      	ldrb	r3, [r7, #3]
 800160c:	687a      	ldr	r2, [r7, #4]
 800160e:	212c      	movs	r1, #44	; 0x2c
 8001610:	fb01 f303 	mul.w	r3, r1, r3
 8001614:	4413      	add	r3, r2
 8001616:	3342      	adds	r3, #66	; 0x42
 8001618:	2202      	movs	r2, #2
 800161a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800161c:	787b      	ldrb	r3, [r7, #1]
 800161e:	2b03      	cmp	r3, #3
 8001620:	f200 80c6 	bhi.w	80017b0 <HAL_HCD_HC_SubmitRequest+0x210>
 8001624:	a201      	add	r2, pc, #4	; (adr r2, 800162c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800162a:	bf00      	nop
 800162c:	0800163d 	.word	0x0800163d
 8001630:	0800179d 	.word	0x0800179d
 8001634:	080016a1 	.word	0x080016a1
 8001638:	0800171f 	.word	0x0800171f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 800163c:	7c3b      	ldrb	r3, [r7, #16]
 800163e:	2b01      	cmp	r3, #1
 8001640:	f040 80b8 	bne.w	80017b4 <HAL_HCD_HC_SubmitRequest+0x214>
 8001644:	78bb      	ldrb	r3, [r7, #2]
 8001646:	2b00      	cmp	r3, #0
 8001648:	f040 80b4 	bne.w	80017b4 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 800164c:	8b3b      	ldrh	r3, [r7, #24]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d108      	bne.n	8001664 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001652:	78fb      	ldrb	r3, [r7, #3]
 8001654:	687a      	ldr	r2, [r7, #4]
 8001656:	212c      	movs	r1, #44	; 0x2c
 8001658:	fb01 f303 	mul.w	r3, r1, r3
 800165c:	4413      	add	r3, r2
 800165e:	3355      	adds	r3, #85	; 0x55
 8001660:	2201      	movs	r2, #1
 8001662:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001664:	78fb      	ldrb	r3, [r7, #3]
 8001666:	687a      	ldr	r2, [r7, #4]
 8001668:	212c      	movs	r1, #44	; 0x2c
 800166a:	fb01 f303 	mul.w	r3, r1, r3
 800166e:	4413      	add	r3, r2
 8001670:	3355      	adds	r3, #85	; 0x55
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d109      	bne.n	800168c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001678:	78fb      	ldrb	r3, [r7, #3]
 800167a:	687a      	ldr	r2, [r7, #4]
 800167c:	212c      	movs	r1, #44	; 0x2c
 800167e:	fb01 f303 	mul.w	r3, r1, r3
 8001682:	4413      	add	r3, r2
 8001684:	3342      	adds	r3, #66	; 0x42
 8001686:	2200      	movs	r2, #0
 8001688:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800168a:	e093      	b.n	80017b4 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800168c:	78fb      	ldrb	r3, [r7, #3]
 800168e:	687a      	ldr	r2, [r7, #4]
 8001690:	212c      	movs	r1, #44	; 0x2c
 8001692:	fb01 f303 	mul.w	r3, r1, r3
 8001696:	4413      	add	r3, r2
 8001698:	3342      	adds	r3, #66	; 0x42
 800169a:	2202      	movs	r2, #2
 800169c:	701a      	strb	r2, [r3, #0]
      break;
 800169e:	e089      	b.n	80017b4 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80016a0:	78bb      	ldrb	r3, [r7, #2]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d11d      	bne.n	80016e2 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80016a6:	78fb      	ldrb	r3, [r7, #3]
 80016a8:	687a      	ldr	r2, [r7, #4]
 80016aa:	212c      	movs	r1, #44	; 0x2c
 80016ac:	fb01 f303 	mul.w	r3, r1, r3
 80016b0:	4413      	add	r3, r2
 80016b2:	3355      	adds	r3, #85	; 0x55
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d109      	bne.n	80016ce <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80016ba:	78fb      	ldrb	r3, [r7, #3]
 80016bc:	687a      	ldr	r2, [r7, #4]
 80016be:	212c      	movs	r1, #44	; 0x2c
 80016c0:	fb01 f303 	mul.w	r3, r1, r3
 80016c4:	4413      	add	r3, r2
 80016c6:	3342      	adds	r3, #66	; 0x42
 80016c8:	2200      	movs	r2, #0
 80016ca:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80016cc:	e073      	b.n	80017b6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80016ce:	78fb      	ldrb	r3, [r7, #3]
 80016d0:	687a      	ldr	r2, [r7, #4]
 80016d2:	212c      	movs	r1, #44	; 0x2c
 80016d4:	fb01 f303 	mul.w	r3, r1, r3
 80016d8:	4413      	add	r3, r2
 80016da:	3342      	adds	r3, #66	; 0x42
 80016dc:	2202      	movs	r2, #2
 80016de:	701a      	strb	r2, [r3, #0]
      break;
 80016e0:	e069      	b.n	80017b6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80016e2:	78fb      	ldrb	r3, [r7, #3]
 80016e4:	687a      	ldr	r2, [r7, #4]
 80016e6:	212c      	movs	r1, #44	; 0x2c
 80016e8:	fb01 f303 	mul.w	r3, r1, r3
 80016ec:	4413      	add	r3, r2
 80016ee:	3354      	adds	r3, #84	; 0x54
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d109      	bne.n	800170a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80016f6:	78fb      	ldrb	r3, [r7, #3]
 80016f8:	687a      	ldr	r2, [r7, #4]
 80016fa:	212c      	movs	r1, #44	; 0x2c
 80016fc:	fb01 f303 	mul.w	r3, r1, r3
 8001700:	4413      	add	r3, r2
 8001702:	3342      	adds	r3, #66	; 0x42
 8001704:	2200      	movs	r2, #0
 8001706:	701a      	strb	r2, [r3, #0]
      break;
 8001708:	e055      	b.n	80017b6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800170a:	78fb      	ldrb	r3, [r7, #3]
 800170c:	687a      	ldr	r2, [r7, #4]
 800170e:	212c      	movs	r1, #44	; 0x2c
 8001710:	fb01 f303 	mul.w	r3, r1, r3
 8001714:	4413      	add	r3, r2
 8001716:	3342      	adds	r3, #66	; 0x42
 8001718:	2202      	movs	r2, #2
 800171a:	701a      	strb	r2, [r3, #0]
      break;
 800171c:	e04b      	b.n	80017b6 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800171e:	78bb      	ldrb	r3, [r7, #2]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d11d      	bne.n	8001760 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001724:	78fb      	ldrb	r3, [r7, #3]
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	212c      	movs	r1, #44	; 0x2c
 800172a:	fb01 f303 	mul.w	r3, r1, r3
 800172e:	4413      	add	r3, r2
 8001730:	3355      	adds	r3, #85	; 0x55
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d109      	bne.n	800174c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001738:	78fb      	ldrb	r3, [r7, #3]
 800173a:	687a      	ldr	r2, [r7, #4]
 800173c:	212c      	movs	r1, #44	; 0x2c
 800173e:	fb01 f303 	mul.w	r3, r1, r3
 8001742:	4413      	add	r3, r2
 8001744:	3342      	adds	r3, #66	; 0x42
 8001746:	2200      	movs	r2, #0
 8001748:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800174a:	e034      	b.n	80017b6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800174c:	78fb      	ldrb	r3, [r7, #3]
 800174e:	687a      	ldr	r2, [r7, #4]
 8001750:	212c      	movs	r1, #44	; 0x2c
 8001752:	fb01 f303 	mul.w	r3, r1, r3
 8001756:	4413      	add	r3, r2
 8001758:	3342      	adds	r3, #66	; 0x42
 800175a:	2202      	movs	r2, #2
 800175c:	701a      	strb	r2, [r3, #0]
      break;
 800175e:	e02a      	b.n	80017b6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001760:	78fb      	ldrb	r3, [r7, #3]
 8001762:	687a      	ldr	r2, [r7, #4]
 8001764:	212c      	movs	r1, #44	; 0x2c
 8001766:	fb01 f303 	mul.w	r3, r1, r3
 800176a:	4413      	add	r3, r2
 800176c:	3354      	adds	r3, #84	; 0x54
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d109      	bne.n	8001788 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001774:	78fb      	ldrb	r3, [r7, #3]
 8001776:	687a      	ldr	r2, [r7, #4]
 8001778:	212c      	movs	r1, #44	; 0x2c
 800177a:	fb01 f303 	mul.w	r3, r1, r3
 800177e:	4413      	add	r3, r2
 8001780:	3342      	adds	r3, #66	; 0x42
 8001782:	2200      	movs	r2, #0
 8001784:	701a      	strb	r2, [r3, #0]
      break;
 8001786:	e016      	b.n	80017b6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001788:	78fb      	ldrb	r3, [r7, #3]
 800178a:	687a      	ldr	r2, [r7, #4]
 800178c:	212c      	movs	r1, #44	; 0x2c
 800178e:	fb01 f303 	mul.w	r3, r1, r3
 8001792:	4413      	add	r3, r2
 8001794:	3342      	adds	r3, #66	; 0x42
 8001796:	2202      	movs	r2, #2
 8001798:	701a      	strb	r2, [r3, #0]
      break;
 800179a:	e00c      	b.n	80017b6 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800179c:	78fb      	ldrb	r3, [r7, #3]
 800179e:	687a      	ldr	r2, [r7, #4]
 80017a0:	212c      	movs	r1, #44	; 0x2c
 80017a2:	fb01 f303 	mul.w	r3, r1, r3
 80017a6:	4413      	add	r3, r2
 80017a8:	3342      	adds	r3, #66	; 0x42
 80017aa:	2200      	movs	r2, #0
 80017ac:	701a      	strb	r2, [r3, #0]
      break;
 80017ae:	e002      	b.n	80017b6 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80017b0:	bf00      	nop
 80017b2:	e000      	b.n	80017b6 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80017b4:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80017b6:	78fb      	ldrb	r3, [r7, #3]
 80017b8:	687a      	ldr	r2, [r7, #4]
 80017ba:	212c      	movs	r1, #44	; 0x2c
 80017bc:	fb01 f303 	mul.w	r3, r1, r3
 80017c0:	4413      	add	r3, r2
 80017c2:	3344      	adds	r3, #68	; 0x44
 80017c4:	697a      	ldr	r2, [r7, #20]
 80017c6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80017c8:	78fb      	ldrb	r3, [r7, #3]
 80017ca:	8b3a      	ldrh	r2, [r7, #24]
 80017cc:	6879      	ldr	r1, [r7, #4]
 80017ce:	202c      	movs	r0, #44	; 0x2c
 80017d0:	fb00 f303 	mul.w	r3, r0, r3
 80017d4:	440b      	add	r3, r1
 80017d6:	334c      	adds	r3, #76	; 0x4c
 80017d8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80017da:	78fb      	ldrb	r3, [r7, #3]
 80017dc:	687a      	ldr	r2, [r7, #4]
 80017de:	212c      	movs	r1, #44	; 0x2c
 80017e0:	fb01 f303 	mul.w	r3, r1, r3
 80017e4:	4413      	add	r3, r2
 80017e6:	3360      	adds	r3, #96	; 0x60
 80017e8:	2200      	movs	r2, #0
 80017ea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80017ec:	78fb      	ldrb	r3, [r7, #3]
 80017ee:	687a      	ldr	r2, [r7, #4]
 80017f0:	212c      	movs	r1, #44	; 0x2c
 80017f2:	fb01 f303 	mul.w	r3, r1, r3
 80017f6:	4413      	add	r3, r2
 80017f8:	3350      	adds	r3, #80	; 0x50
 80017fa:	2200      	movs	r2, #0
 80017fc:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80017fe:	78fb      	ldrb	r3, [r7, #3]
 8001800:	687a      	ldr	r2, [r7, #4]
 8001802:	212c      	movs	r1, #44	; 0x2c
 8001804:	fb01 f303 	mul.w	r3, r1, r3
 8001808:	4413      	add	r3, r2
 800180a:	3339      	adds	r3, #57	; 0x39
 800180c:	78fa      	ldrb	r2, [r7, #3]
 800180e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001810:	78fb      	ldrb	r3, [r7, #3]
 8001812:	687a      	ldr	r2, [r7, #4]
 8001814:	212c      	movs	r1, #44	; 0x2c
 8001816:	fb01 f303 	mul.w	r3, r1, r3
 800181a:	4413      	add	r3, r2
 800181c:	3361      	adds	r3, #97	; 0x61
 800181e:	2200      	movs	r2, #0
 8001820:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6818      	ldr	r0, [r3, #0]
 8001826:	78fb      	ldrb	r3, [r7, #3]
 8001828:	222c      	movs	r2, #44	; 0x2c
 800182a:	fb02 f303 	mul.w	r3, r2, r3
 800182e:	3338      	adds	r3, #56	; 0x38
 8001830:	687a      	ldr	r2, [r7, #4]
 8001832:	18d1      	adds	r1, r2, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	691b      	ldr	r3, [r3, #16]
 8001838:	b2db      	uxtb	r3, r3
 800183a:	461a      	mov	r2, r3
 800183c:	f003 fb86 	bl	8004f4c <USB_HC_StartXfer>
 8001840:	4603      	mov	r3, r0
}
 8001842:	4618      	mov	r0, r3
 8001844:	3708      	adds	r7, #8
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop

0800184c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b086      	sub	sp, #24
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4618      	mov	r0, r3
 8001864:	f003 f8b0 	bl	80049c8 <USB_GetMode>
 8001868:	4603      	mov	r3, r0
 800186a:	2b01      	cmp	r3, #1
 800186c:	f040 80f6 	bne.w	8001a5c <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4618      	mov	r0, r3
 8001876:	f003 f895 	bl	80049a4 <USB_ReadInterrupts>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	f000 80ec 	beq.w	8001a5a <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4618      	mov	r0, r3
 8001888:	f003 f88c 	bl	80049a4 <USB_ReadInterrupts>
 800188c:	4603      	mov	r3, r0
 800188e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001892:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001896:	d104      	bne.n	80018a2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80018a0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4618      	mov	r0, r3
 80018a8:	f003 f87c 	bl	80049a4 <USB_ReadInterrupts>
 80018ac:	4603      	mov	r3, r0
 80018ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80018b6:	d104      	bne.n	80018c2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80018c0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4618      	mov	r0, r3
 80018c8:	f003 f86c 	bl	80049a4 <USB_ReadInterrupts>
 80018cc:	4603      	mov	r3, r0
 80018ce:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80018d2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80018d6:	d104      	bne.n	80018e2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80018e0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4618      	mov	r0, r3
 80018e8:	f003 f85c 	bl	80049a4 <USB_ReadInterrupts>
 80018ec:	4603      	mov	r3, r0
 80018ee:	f003 0302 	and.w	r3, r3, #2
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d103      	bne.n	80018fe <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	2202      	movs	r2, #2
 80018fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4618      	mov	r0, r3
 8001904:	f003 f84e 	bl	80049a4 <USB_ReadInterrupts>
 8001908:	4603      	mov	r3, r0
 800190a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800190e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001912:	d11c      	bne.n	800194e <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800191c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 0301 	and.w	r3, r3, #1
 800192a:	2b00      	cmp	r3, #0
 800192c:	d10f      	bne.n	800194e <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800192e:	2110      	movs	r1, #16
 8001930:	6938      	ldr	r0, [r7, #16]
 8001932:	f002 ff5f 	bl	80047f4 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001936:	6938      	ldr	r0, [r7, #16]
 8001938:	f002 ff80 	bl	800483c <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2101      	movs	r1, #1
 8001942:	4618      	mov	r0, r3
 8001944:	f003 f932 	bl	8004bac <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001948:	6878      	ldr	r0, [r7, #4]
 800194a:	f005 fde9 	bl	8007520 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4618      	mov	r0, r3
 8001954:	f003 f826 	bl	80049a4 <USB_ReadInterrupts>
 8001958:	4603      	mov	r3, r0
 800195a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800195e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001962:	d102      	bne.n	800196a <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	f001 fa01 	bl	8002d6c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4618      	mov	r0, r3
 8001970:	f003 f818 	bl	80049a4 <USB_ReadInterrupts>
 8001974:	4603      	mov	r3, r0
 8001976:	f003 0308 	and.w	r3, r3, #8
 800197a:	2b08      	cmp	r3, #8
 800197c:	d106      	bne.n	800198c <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	f005 fdb2 	bl	80074e8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	2208      	movs	r2, #8
 800198a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4618      	mov	r0, r3
 8001992:	f003 f807 	bl	80049a4 <USB_ReadInterrupts>
 8001996:	4603      	mov	r3, r0
 8001998:	f003 0310 	and.w	r3, r3, #16
 800199c:	2b10      	cmp	r3, #16
 800199e:	d101      	bne.n	80019a4 <HAL_HCD_IRQHandler+0x158>
 80019a0:	2301      	movs	r3, #1
 80019a2:	e000      	b.n	80019a6 <HAL_HCD_IRQHandler+0x15a>
 80019a4:	2300      	movs	r3, #0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d012      	beq.n	80019d0 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	699a      	ldr	r2, [r3, #24]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f022 0210 	bic.w	r2, r2, #16
 80019b8:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f001 f904 	bl	8002bc8 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	699a      	ldr	r2, [r3, #24]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f042 0210 	orr.w	r2, r2, #16
 80019ce:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4618      	mov	r0, r3
 80019d6:	f002 ffe5 	bl	80049a4 <USB_ReadInterrupts>
 80019da:	4603      	mov	r3, r0
 80019dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80019e4:	d13a      	bne.n	8001a5c <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4618      	mov	r0, r3
 80019ec:	f003 fbf0 	bl	80051d0 <USB_HC_ReadInterrupt>
 80019f0:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80019f2:	2300      	movs	r3, #0
 80019f4:	617b      	str	r3, [r7, #20]
 80019f6:	e025      	b.n	8001a44 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	f003 030f 	and.w	r3, r3, #15
 80019fe:	68ba      	ldr	r2, [r7, #8]
 8001a00:	fa22 f303 	lsr.w	r3, r2, r3
 8001a04:	f003 0301 	and.w	r3, r3, #1
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d018      	beq.n	8001a3e <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	015a      	lsls	r2, r3, #5
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	4413      	add	r3, r2
 8001a14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a22:	d106      	bne.n	8001a32 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	4619      	mov	r1, r3
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f000 f8a9 	bl	8001b82 <HCD_HC_IN_IRQHandler>
 8001a30:	e005      	b.n	8001a3e <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	4619      	mov	r1, r3
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	f000 fcc4 	bl	80023c6 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	3301      	adds	r3, #1
 8001a42:	617b      	str	r3, [r7, #20]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	697a      	ldr	r2, [r7, #20]
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d3d4      	bcc.n	80019f8 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a56:	615a      	str	r2, [r3, #20]
 8001a58:	e000      	b.n	8001a5c <HAL_HCD_IRQHandler+0x210>
      return;
 8001a5a:	bf00      	nop
    }
  }
}
 8001a5c:	3718      	adds	r7, #24
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}

08001a62 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001a62:	b580      	push	{r7, lr}
 8001a64:	b082      	sub	sp, #8
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d101      	bne.n	8001a78 <HAL_HCD_Start+0x16>
 8001a74:	2302      	movs	r3, #2
 8001a76:	e013      	b.n	8001aa0 <HAL_HCD_Start+0x3e>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	2101      	movs	r1, #1
 8001a86:	4618      	mov	r0, r3
 8001a88:	f003 f8f3 	bl	8004c72 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4618      	mov	r0, r3
 8001a92:	f002 fe43 	bl	800471c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001a9e:	2300      	movs	r3, #0
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3708      	adds	r7, #8
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}

08001aa8 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	d101      	bne.n	8001abe <HAL_HCD_Stop+0x16>
 8001aba:	2302      	movs	r3, #2
 8001abc:	e00d      	b.n	8001ada <HAL_HCD_Stop+0x32>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4618      	mov	r0, r3
 8001acc:	f003 fce6 	bl	800549c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001ad8:	2300      	movs	r3, #0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}

08001ae2 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001ae2:	b580      	push	{r7, lr}
 8001ae4:	b082      	sub	sp, #8
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4618      	mov	r0, r3
 8001af0:	f003 f895 	bl	8004c1e <USB_ResetPort>
 8001af4:	4603      	mov	r3, r0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}

08001afe <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001afe:	b480      	push	{r7}
 8001b00:	b083      	sub	sp, #12
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]
 8001b06:	460b      	mov	r3, r1
 8001b08:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001b0a:	78fb      	ldrb	r3, [r7, #3]
 8001b0c:	687a      	ldr	r2, [r7, #4]
 8001b0e:	212c      	movs	r1, #44	; 0x2c
 8001b10:	fb01 f303 	mul.w	r3, r1, r3
 8001b14:	4413      	add	r3, r2
 8001b16:	3360      	adds	r3, #96	; 0x60
 8001b18:	781b      	ldrb	r3, [r3, #0]
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	370c      	adds	r7, #12
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bc80      	pop	{r7}
 8001b22:	4770      	bx	lr

08001b24 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	460b      	mov	r3, r1
 8001b2e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001b30:	78fb      	ldrb	r3, [r7, #3]
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	212c      	movs	r1, #44	; 0x2c
 8001b36:	fb01 f303 	mul.w	r3, r1, r3
 8001b3a:	4413      	add	r3, r2
 8001b3c:	3350      	adds	r3, #80	; 0x50
 8001b3e:	681b      	ldr	r3, [r3, #0]
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	370c      	adds	r7, #12
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bc80      	pop	{r7}
 8001b48:	4770      	bx	lr

08001b4a <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001b4a:	b580      	push	{r7, lr}
 8001b4c:	b082      	sub	sp, #8
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4618      	mov	r0, r3
 8001b58:	f003 f8d9 	bl	8004d0e <USB_GetCurrentFrame>
 8001b5c:	4603      	mov	r3, r0
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3708      	adds	r7, #8
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}

08001b66 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001b66:	b580      	push	{r7, lr}
 8001b68:	b082      	sub	sp, #8
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4618      	mov	r0, r3
 8001b74:	f003 f8b5 	bl	8004ce2 <USB_GetHostSpeed>
 8001b78:	4603      	mov	r3, r0
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3708      	adds	r7, #8
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}

08001b82 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001b82:	b580      	push	{r7, lr}
 8001b84:	b086      	sub	sp, #24
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	6078      	str	r0, [r7, #4]
 8001b8a:	460b      	mov	r3, r1
 8001b8c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001b98:	78fb      	ldrb	r3, [r7, #3]
 8001b9a:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	015a      	lsls	r2, r3, #5
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	4413      	add	r3, r2
 8001ba4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	f003 0304 	and.w	r3, r3, #4
 8001bae:	2b04      	cmp	r3, #4
 8001bb0:	d119      	bne.n	8001be6 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	015a      	lsls	r2, r3, #5
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	4413      	add	r3, r2
 8001bba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	2304      	movs	r3, #4
 8001bc2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	015a      	lsls	r2, r3, #5
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	4413      	add	r3, r2
 8001bcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bd0:	68db      	ldr	r3, [r3, #12]
 8001bd2:	68fa      	ldr	r2, [r7, #12]
 8001bd4:	0151      	lsls	r1, r2, #5
 8001bd6:	693a      	ldr	r2, [r7, #16]
 8001bd8:	440a      	add	r2, r1
 8001bda:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001bde:	f043 0302 	orr.w	r3, r3, #2
 8001be2:	60d3      	str	r3, [r2, #12]
 8001be4:	e101      	b.n	8001dea <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	015a      	lsls	r2, r3, #5
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	4413      	add	r3, r2
 8001bee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bf8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001bfc:	d12b      	bne.n	8001c56 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	015a      	lsls	r2, r3, #5
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	4413      	add	r3, r2
 8001c06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c10:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	212c      	movs	r1, #44	; 0x2c
 8001c18:	fb01 f303 	mul.w	r3, r1, r3
 8001c1c:	4413      	add	r3, r2
 8001c1e:	3361      	adds	r3, #97	; 0x61
 8001c20:	2207      	movs	r2, #7
 8001c22:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	015a      	lsls	r2, r3, #5
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	4413      	add	r3, r2
 8001c2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c30:	68db      	ldr	r3, [r3, #12]
 8001c32:	68fa      	ldr	r2, [r7, #12]
 8001c34:	0151      	lsls	r1, r2, #5
 8001c36:	693a      	ldr	r2, [r7, #16]
 8001c38:	440a      	add	r2, r1
 8001c3a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001c3e:	f043 0302 	orr.w	r3, r3, #2
 8001c42:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	68fa      	ldr	r2, [r7, #12]
 8001c4a:	b2d2      	uxtb	r2, r2
 8001c4c:	4611      	mov	r1, r2
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f003 face 	bl	80051f0 <USB_HC_Halt>
 8001c54:	e0c9      	b.n	8001dea <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	015a      	lsls	r2, r3, #5
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	4413      	add	r3, r2
 8001c5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	f003 0320 	and.w	r3, r3, #32
 8001c68:	2b20      	cmp	r3, #32
 8001c6a:	d109      	bne.n	8001c80 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	015a      	lsls	r2, r3, #5
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	4413      	add	r3, r2
 8001c74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c78:	461a      	mov	r2, r3
 8001c7a:	2320      	movs	r3, #32
 8001c7c:	6093      	str	r3, [r2, #8]
 8001c7e:	e0b4      	b.n	8001dea <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	015a      	lsls	r2, r3, #5
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	4413      	add	r3, r2
 8001c88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	f003 0308 	and.w	r3, r3, #8
 8001c92:	2b08      	cmp	r3, #8
 8001c94:	d133      	bne.n	8001cfe <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	015a      	lsls	r2, r3, #5
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	4413      	add	r3, r2
 8001c9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	68fa      	ldr	r2, [r7, #12]
 8001ca6:	0151      	lsls	r1, r2, #5
 8001ca8:	693a      	ldr	r2, [r7, #16]
 8001caa:	440a      	add	r2, r1
 8001cac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001cb0:	f043 0302 	orr.w	r3, r3, #2
 8001cb4:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001cb6:	687a      	ldr	r2, [r7, #4]
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	212c      	movs	r1, #44	; 0x2c
 8001cbc:	fb01 f303 	mul.w	r3, r1, r3
 8001cc0:	4413      	add	r3, r2
 8001cc2:	3361      	adds	r3, #97	; 0x61
 8001cc4:	2205      	movs	r2, #5
 8001cc6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	015a      	lsls	r2, r3, #5
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	4413      	add	r3, r2
 8001cd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	2310      	movs	r3, #16
 8001cd8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	015a      	lsls	r2, r3, #5
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	4413      	add	r3, r2
 8001ce2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	2308      	movs	r3, #8
 8001cea:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	68fa      	ldr	r2, [r7, #12]
 8001cf2:	b2d2      	uxtb	r2, r2
 8001cf4:	4611      	mov	r1, r2
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f003 fa7a 	bl	80051f0 <USB_HC_Halt>
 8001cfc:	e075      	b.n	8001dea <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	015a      	lsls	r2, r3, #5
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	4413      	add	r3, r2
 8001d06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d14:	d134      	bne.n	8001d80 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	015a      	lsls	r2, r3, #5
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	4413      	add	r3, r2
 8001d1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	68fa      	ldr	r2, [r7, #12]
 8001d26:	0151      	lsls	r1, r2, #5
 8001d28:	693a      	ldr	r2, [r7, #16]
 8001d2a:	440a      	add	r2, r1
 8001d2c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d30:	f043 0302 	orr.w	r3, r3, #2
 8001d34:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	212c      	movs	r1, #44	; 0x2c
 8001d3c:	fb01 f303 	mul.w	r3, r1, r3
 8001d40:	4413      	add	r3, r2
 8001d42:	3361      	adds	r3, #97	; 0x61
 8001d44:	2208      	movs	r2, #8
 8001d46:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	015a      	lsls	r2, r3, #5
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	4413      	add	r3, r2
 8001d50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d54:	461a      	mov	r2, r3
 8001d56:	2310      	movs	r3, #16
 8001d58:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	015a      	lsls	r2, r3, #5
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	4413      	add	r3, r2
 8001d62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d66:	461a      	mov	r2, r3
 8001d68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d6c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	68fa      	ldr	r2, [r7, #12]
 8001d74:	b2d2      	uxtb	r2, r2
 8001d76:	4611      	mov	r1, r2
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f003 fa39 	bl	80051f0 <USB_HC_Halt>
 8001d7e:	e034      	b.n	8001dea <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	015a      	lsls	r2, r3, #5
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	4413      	add	r3, r2
 8001d88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d92:	2b80      	cmp	r3, #128	; 0x80
 8001d94:	d129      	bne.n	8001dea <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	015a      	lsls	r2, r3, #5
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	4413      	add	r3, r2
 8001d9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	68fa      	ldr	r2, [r7, #12]
 8001da6:	0151      	lsls	r1, r2, #5
 8001da8:	693a      	ldr	r2, [r7, #16]
 8001daa:	440a      	add	r2, r1
 8001dac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001db0:	f043 0302 	orr.w	r3, r3, #2
 8001db4:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	212c      	movs	r1, #44	; 0x2c
 8001dbc:	fb01 f303 	mul.w	r3, r1, r3
 8001dc0:	4413      	add	r3, r2
 8001dc2:	3361      	adds	r3, #97	; 0x61
 8001dc4:	2206      	movs	r2, #6
 8001dc6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	68fa      	ldr	r2, [r7, #12]
 8001dce:	b2d2      	uxtb	r2, r2
 8001dd0:	4611      	mov	r1, r2
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f003 fa0c 	bl	80051f0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	015a      	lsls	r2, r3, #5
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	4413      	add	r3, r2
 8001de0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001de4:	461a      	mov	r2, r3
 8001de6:	2380      	movs	r3, #128	; 0x80
 8001de8:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	015a      	lsls	r2, r3, #5
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	4413      	add	r3, r2
 8001df2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001dfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e00:	d122      	bne.n	8001e48 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	015a      	lsls	r2, r3, #5
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	4413      	add	r3, r2
 8001e0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	68fa      	ldr	r2, [r7, #12]
 8001e12:	0151      	lsls	r1, r2, #5
 8001e14:	693a      	ldr	r2, [r7, #16]
 8001e16:	440a      	add	r2, r1
 8001e18:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e1c:	f043 0302 	orr.w	r3, r3, #2
 8001e20:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	68fa      	ldr	r2, [r7, #12]
 8001e28:	b2d2      	uxtb	r2, r2
 8001e2a:	4611      	mov	r1, r2
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f003 f9df 	bl	80051f0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	015a      	lsls	r2, r3, #5
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	4413      	add	r3, r2
 8001e3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e3e:	461a      	mov	r2, r3
 8001e40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e44:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001e46:	e2ba      	b.n	80023be <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	015a      	lsls	r2, r3, #5
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	4413      	add	r3, r2
 8001e50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	f003 0301 	and.w	r3, r3, #1
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	f040 811b 	bne.w	8002096 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	691b      	ldr	r3, [r3, #16]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d019      	beq.n	8001e9c <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001e68:	687a      	ldr	r2, [r7, #4]
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	212c      	movs	r1, #44	; 0x2c
 8001e6e:	fb01 f303 	mul.w	r3, r1, r3
 8001e72:	4413      	add	r3, r2
 8001e74:	3348      	adds	r3, #72	; 0x48
 8001e76:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	0159      	lsls	r1, r3, #5
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	440b      	add	r3, r1
 8001e80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e84:	691b      	ldr	r3, [r3, #16]
 8001e86:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001e8a:	1ad2      	subs	r2, r2, r3
 8001e8c:	6879      	ldr	r1, [r7, #4]
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	202c      	movs	r0, #44	; 0x2c
 8001e92:	fb00 f303 	mul.w	r3, r0, r3
 8001e96:	440b      	add	r3, r1
 8001e98:	3350      	adds	r3, #80	; 0x50
 8001e9a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001e9c:	687a      	ldr	r2, [r7, #4]
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	212c      	movs	r1, #44	; 0x2c
 8001ea2:	fb01 f303 	mul.w	r3, r1, r3
 8001ea6:	4413      	add	r3, r2
 8001ea8:	3361      	adds	r3, #97	; 0x61
 8001eaa:	2201      	movs	r2, #1
 8001eac:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	212c      	movs	r1, #44	; 0x2c
 8001eb4:	fb01 f303 	mul.w	r3, r1, r3
 8001eb8:	4413      	add	r3, r2
 8001eba:	335c      	adds	r3, #92	; 0x5c
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	015a      	lsls	r2, r3, #5
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	4413      	add	r3, r2
 8001ec8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ecc:	461a      	mov	r2, r3
 8001ece:	2301      	movs	r3, #1
 8001ed0:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	212c      	movs	r1, #44	; 0x2c
 8001ed8:	fb01 f303 	mul.w	r3, r1, r3
 8001edc:	4413      	add	r3, r2
 8001ede:	333f      	adds	r3, #63	; 0x3f
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d009      	beq.n	8001efa <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	212c      	movs	r1, #44	; 0x2c
 8001eec:	fb01 f303 	mul.w	r3, r1, r3
 8001ef0:	4413      	add	r3, r2
 8001ef2:	333f      	adds	r3, #63	; 0x3f
 8001ef4:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d121      	bne.n	8001f3e <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	015a      	lsls	r2, r3, #5
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	4413      	add	r3, r2
 8001f02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	68fa      	ldr	r2, [r7, #12]
 8001f0a:	0151      	lsls	r1, r2, #5
 8001f0c:	693a      	ldr	r2, [r7, #16]
 8001f0e:	440a      	add	r2, r1
 8001f10:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f14:	f043 0302 	orr.w	r3, r3, #2
 8001f18:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	68fa      	ldr	r2, [r7, #12]
 8001f20:	b2d2      	uxtb	r2, r2
 8001f22:	4611      	mov	r1, r2
 8001f24:	4618      	mov	r0, r3
 8001f26:	f003 f963 	bl	80051f0 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	015a      	lsls	r2, r3, #5
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	4413      	add	r3, r2
 8001f32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f36:	461a      	mov	r2, r3
 8001f38:	2310      	movs	r3, #16
 8001f3a:	6093      	str	r3, [r2, #8]
 8001f3c:	e066      	b.n	800200c <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	212c      	movs	r1, #44	; 0x2c
 8001f44:	fb01 f303 	mul.w	r3, r1, r3
 8001f48:	4413      	add	r3, r2
 8001f4a:	333f      	adds	r3, #63	; 0x3f
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	2b03      	cmp	r3, #3
 8001f50:	d127      	bne.n	8001fa2 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	015a      	lsls	r2, r3, #5
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	4413      	add	r3, r2
 8001f5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	68fa      	ldr	r2, [r7, #12]
 8001f62:	0151      	lsls	r1, r2, #5
 8001f64:	693a      	ldr	r2, [r7, #16]
 8001f66:	440a      	add	r2, r1
 8001f68:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f6c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001f70:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	212c      	movs	r1, #44	; 0x2c
 8001f78:	fb01 f303 	mul.w	r3, r1, r3
 8001f7c:	4413      	add	r3, r2
 8001f7e:	3360      	adds	r3, #96	; 0x60
 8001f80:	2201      	movs	r2, #1
 8001f82:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	b2d9      	uxtb	r1, r3
 8001f88:	687a      	ldr	r2, [r7, #4]
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	202c      	movs	r0, #44	; 0x2c
 8001f8e:	fb00 f303 	mul.w	r3, r0, r3
 8001f92:	4413      	add	r3, r2
 8001f94:	3360      	adds	r3, #96	; 0x60
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	461a      	mov	r2, r3
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f005 face 	bl	800753c <HAL_HCD_HC_NotifyURBChange_Callback>
 8001fa0:	e034      	b.n	800200c <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	212c      	movs	r1, #44	; 0x2c
 8001fa8:	fb01 f303 	mul.w	r3, r1, r3
 8001fac:	4413      	add	r3, r2
 8001fae:	333f      	adds	r3, #63	; 0x3f
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d12a      	bne.n	800200c <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	212c      	movs	r1, #44	; 0x2c
 8001fbc:	fb01 f303 	mul.w	r3, r1, r3
 8001fc0:	4413      	add	r3, r2
 8001fc2:	3360      	adds	r3, #96	; 0x60
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	212c      	movs	r1, #44	; 0x2c
 8001fce:	fb01 f303 	mul.w	r3, r1, r3
 8001fd2:	4413      	add	r3, r2
 8001fd4:	3354      	adds	r3, #84	; 0x54
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	f083 0301 	eor.w	r3, r3, #1
 8001fdc:	b2d8      	uxtb	r0, r3
 8001fde:	687a      	ldr	r2, [r7, #4]
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	212c      	movs	r1, #44	; 0x2c
 8001fe4:	fb01 f303 	mul.w	r3, r1, r3
 8001fe8:	4413      	add	r3, r2
 8001fea:	3354      	adds	r3, #84	; 0x54
 8001fec:	4602      	mov	r2, r0
 8001fee:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	b2d9      	uxtb	r1, r3
 8001ff4:	687a      	ldr	r2, [r7, #4]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	202c      	movs	r0, #44	; 0x2c
 8001ffa:	fb00 f303 	mul.w	r3, r0, r3
 8001ffe:	4413      	add	r3, r2
 8002000:	3360      	adds	r3, #96	; 0x60
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	461a      	mov	r2, r3
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f005 fa98 	bl	800753c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	691b      	ldr	r3, [r3, #16]
 8002010:	2b01      	cmp	r3, #1
 8002012:	d12b      	bne.n	800206c <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002014:	687a      	ldr	r2, [r7, #4]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	212c      	movs	r1, #44	; 0x2c
 800201a:	fb01 f303 	mul.w	r3, r1, r3
 800201e:	4413      	add	r3, r2
 8002020:	3348      	adds	r3, #72	; 0x48
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	6879      	ldr	r1, [r7, #4]
 8002026:	68fa      	ldr	r2, [r7, #12]
 8002028:	202c      	movs	r0, #44	; 0x2c
 800202a:	fb00 f202 	mul.w	r2, r0, r2
 800202e:	440a      	add	r2, r1
 8002030:	3240      	adds	r2, #64	; 0x40
 8002032:	8812      	ldrh	r2, [r2, #0]
 8002034:	fbb3 f3f2 	udiv	r3, r3, r2
 8002038:	f003 0301 	and.w	r3, r3, #1
 800203c:	2b00      	cmp	r3, #0
 800203e:	f000 81be 	beq.w	80023be <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	212c      	movs	r1, #44	; 0x2c
 8002048:	fb01 f303 	mul.w	r3, r1, r3
 800204c:	4413      	add	r3, r2
 800204e:	3354      	adds	r3, #84	; 0x54
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	f083 0301 	eor.w	r3, r3, #1
 8002056:	b2d8      	uxtb	r0, r3
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	212c      	movs	r1, #44	; 0x2c
 800205e:	fb01 f303 	mul.w	r3, r1, r3
 8002062:	4413      	add	r3, r2
 8002064:	3354      	adds	r3, #84	; 0x54
 8002066:	4602      	mov	r2, r0
 8002068:	701a      	strb	r2, [r3, #0]
}
 800206a:	e1a8      	b.n	80023be <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800206c:	687a      	ldr	r2, [r7, #4]
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	212c      	movs	r1, #44	; 0x2c
 8002072:	fb01 f303 	mul.w	r3, r1, r3
 8002076:	4413      	add	r3, r2
 8002078:	3354      	adds	r3, #84	; 0x54
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	f083 0301 	eor.w	r3, r3, #1
 8002080:	b2d8      	uxtb	r0, r3
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	212c      	movs	r1, #44	; 0x2c
 8002088:	fb01 f303 	mul.w	r3, r1, r3
 800208c:	4413      	add	r3, r2
 800208e:	3354      	adds	r3, #84	; 0x54
 8002090:	4602      	mov	r2, r0
 8002092:	701a      	strb	r2, [r3, #0]
}
 8002094:	e193      	b.n	80023be <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	015a      	lsls	r2, r3, #5
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	4413      	add	r3, r2
 800209e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	f003 0302 	and.w	r3, r3, #2
 80020a8:	2b02      	cmp	r3, #2
 80020aa:	f040 8106 	bne.w	80022ba <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	015a      	lsls	r2, r3, #5
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	4413      	add	r3, r2
 80020b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	68fa      	ldr	r2, [r7, #12]
 80020be:	0151      	lsls	r1, r2, #5
 80020c0:	693a      	ldr	r2, [r7, #16]
 80020c2:	440a      	add	r2, r1
 80020c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80020c8:	f023 0302 	bic.w	r3, r3, #2
 80020cc:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	212c      	movs	r1, #44	; 0x2c
 80020d4:	fb01 f303 	mul.w	r3, r1, r3
 80020d8:	4413      	add	r3, r2
 80020da:	3361      	adds	r3, #97	; 0x61
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d109      	bne.n	80020f6 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	212c      	movs	r1, #44	; 0x2c
 80020e8:	fb01 f303 	mul.w	r3, r1, r3
 80020ec:	4413      	add	r3, r2
 80020ee:	3360      	adds	r3, #96	; 0x60
 80020f0:	2201      	movs	r2, #1
 80020f2:	701a      	strb	r2, [r3, #0]
 80020f4:	e0c9      	b.n	800228a <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	212c      	movs	r1, #44	; 0x2c
 80020fc:	fb01 f303 	mul.w	r3, r1, r3
 8002100:	4413      	add	r3, r2
 8002102:	3361      	adds	r3, #97	; 0x61
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	2b05      	cmp	r3, #5
 8002108:	d109      	bne.n	800211e <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	212c      	movs	r1, #44	; 0x2c
 8002110:	fb01 f303 	mul.w	r3, r1, r3
 8002114:	4413      	add	r3, r2
 8002116:	3360      	adds	r3, #96	; 0x60
 8002118:	2205      	movs	r2, #5
 800211a:	701a      	strb	r2, [r3, #0]
 800211c:	e0b5      	b.n	800228a <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	212c      	movs	r1, #44	; 0x2c
 8002124:	fb01 f303 	mul.w	r3, r1, r3
 8002128:	4413      	add	r3, r2
 800212a:	3361      	adds	r3, #97	; 0x61
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	2b06      	cmp	r3, #6
 8002130:	d009      	beq.n	8002146 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	212c      	movs	r1, #44	; 0x2c
 8002138:	fb01 f303 	mul.w	r3, r1, r3
 800213c:	4413      	add	r3, r2
 800213e:	3361      	adds	r3, #97	; 0x61
 8002140:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002142:	2b08      	cmp	r3, #8
 8002144:	d150      	bne.n	80021e8 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	212c      	movs	r1, #44	; 0x2c
 800214c:	fb01 f303 	mul.w	r3, r1, r3
 8002150:	4413      	add	r3, r2
 8002152:	335c      	adds	r3, #92	; 0x5c
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	1c5a      	adds	r2, r3, #1
 8002158:	6879      	ldr	r1, [r7, #4]
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	202c      	movs	r0, #44	; 0x2c
 800215e:	fb00 f303 	mul.w	r3, r0, r3
 8002162:	440b      	add	r3, r1
 8002164:	335c      	adds	r3, #92	; 0x5c
 8002166:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002168:	687a      	ldr	r2, [r7, #4]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	212c      	movs	r1, #44	; 0x2c
 800216e:	fb01 f303 	mul.w	r3, r1, r3
 8002172:	4413      	add	r3, r2
 8002174:	335c      	adds	r3, #92	; 0x5c
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	2b02      	cmp	r3, #2
 800217a:	d912      	bls.n	80021a2 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	212c      	movs	r1, #44	; 0x2c
 8002182:	fb01 f303 	mul.w	r3, r1, r3
 8002186:	4413      	add	r3, r2
 8002188:	335c      	adds	r3, #92	; 0x5c
 800218a:	2200      	movs	r2, #0
 800218c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800218e:	687a      	ldr	r2, [r7, #4]
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	212c      	movs	r1, #44	; 0x2c
 8002194:	fb01 f303 	mul.w	r3, r1, r3
 8002198:	4413      	add	r3, r2
 800219a:	3360      	adds	r3, #96	; 0x60
 800219c:	2204      	movs	r2, #4
 800219e:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80021a0:	e073      	b.n	800228a <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	212c      	movs	r1, #44	; 0x2c
 80021a8:	fb01 f303 	mul.w	r3, r1, r3
 80021ac:	4413      	add	r3, r2
 80021ae:	3360      	adds	r3, #96	; 0x60
 80021b0:	2202      	movs	r2, #2
 80021b2:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	015a      	lsls	r2, r3, #5
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	4413      	add	r3, r2
 80021bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80021ca:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80021d2:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	015a      	lsls	r2, r3, #5
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	4413      	add	r3, r2
 80021dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021e0:	461a      	mov	r2, r3
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80021e6:	e050      	b.n	800228a <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80021e8:	687a      	ldr	r2, [r7, #4]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	212c      	movs	r1, #44	; 0x2c
 80021ee:	fb01 f303 	mul.w	r3, r1, r3
 80021f2:	4413      	add	r3, r2
 80021f4:	3361      	adds	r3, #97	; 0x61
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	2b03      	cmp	r3, #3
 80021fa:	d122      	bne.n	8002242 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	212c      	movs	r1, #44	; 0x2c
 8002202:	fb01 f303 	mul.w	r3, r1, r3
 8002206:	4413      	add	r3, r2
 8002208:	3360      	adds	r3, #96	; 0x60
 800220a:	2202      	movs	r2, #2
 800220c:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	015a      	lsls	r2, r3, #5
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	4413      	add	r3, r2
 8002216:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002224:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800222c:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	015a      	lsls	r2, r3, #5
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	4413      	add	r3, r2
 8002236:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800223a:	461a      	mov	r2, r3
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	6013      	str	r3, [r2, #0]
 8002240:	e023      	b.n	800228a <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002242:	687a      	ldr	r2, [r7, #4]
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	212c      	movs	r1, #44	; 0x2c
 8002248:	fb01 f303 	mul.w	r3, r1, r3
 800224c:	4413      	add	r3, r2
 800224e:	3361      	adds	r3, #97	; 0x61
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	2b07      	cmp	r3, #7
 8002254:	d119      	bne.n	800228a <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	212c      	movs	r1, #44	; 0x2c
 800225c:	fb01 f303 	mul.w	r3, r1, r3
 8002260:	4413      	add	r3, r2
 8002262:	335c      	adds	r3, #92	; 0x5c
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	1c5a      	adds	r2, r3, #1
 8002268:	6879      	ldr	r1, [r7, #4]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	202c      	movs	r0, #44	; 0x2c
 800226e:	fb00 f303 	mul.w	r3, r0, r3
 8002272:	440b      	add	r3, r1
 8002274:	335c      	adds	r3, #92	; 0x5c
 8002276:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002278:	687a      	ldr	r2, [r7, #4]
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	212c      	movs	r1, #44	; 0x2c
 800227e:	fb01 f303 	mul.w	r3, r1, r3
 8002282:	4413      	add	r3, r2
 8002284:	3360      	adds	r3, #96	; 0x60
 8002286:	2204      	movs	r2, #4
 8002288:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	015a      	lsls	r2, r3, #5
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	4413      	add	r3, r2
 8002292:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002296:	461a      	mov	r2, r3
 8002298:	2302      	movs	r3, #2
 800229a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	b2d9      	uxtb	r1, r3
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	202c      	movs	r0, #44	; 0x2c
 80022a6:	fb00 f303 	mul.w	r3, r0, r3
 80022aa:	4413      	add	r3, r2
 80022ac:	3360      	adds	r3, #96	; 0x60
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	461a      	mov	r2, r3
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f005 f942 	bl	800753c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80022b8:	e081      	b.n	80023be <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	015a      	lsls	r2, r3, #5
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	4413      	add	r3, r2
 80022c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	f003 0310 	and.w	r3, r3, #16
 80022cc:	2b10      	cmp	r3, #16
 80022ce:	d176      	bne.n	80023be <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80022d0:	687a      	ldr	r2, [r7, #4]
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	212c      	movs	r1, #44	; 0x2c
 80022d6:	fb01 f303 	mul.w	r3, r1, r3
 80022da:	4413      	add	r3, r2
 80022dc:	333f      	adds	r3, #63	; 0x3f
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	2b03      	cmp	r3, #3
 80022e2:	d121      	bne.n	8002328 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80022e4:	687a      	ldr	r2, [r7, #4]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	212c      	movs	r1, #44	; 0x2c
 80022ea:	fb01 f303 	mul.w	r3, r1, r3
 80022ee:	4413      	add	r3, r2
 80022f0:	335c      	adds	r3, #92	; 0x5c
 80022f2:	2200      	movs	r2, #0
 80022f4:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	015a      	lsls	r2, r3, #5
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	4413      	add	r3, r2
 80022fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	68fa      	ldr	r2, [r7, #12]
 8002306:	0151      	lsls	r1, r2, #5
 8002308:	693a      	ldr	r2, [r7, #16]
 800230a:	440a      	add	r2, r1
 800230c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002310:	f043 0302 	orr.w	r3, r3, #2
 8002314:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	68fa      	ldr	r2, [r7, #12]
 800231c:	b2d2      	uxtb	r2, r2
 800231e:	4611      	mov	r1, r2
 8002320:	4618      	mov	r0, r3
 8002322:	f002 ff65 	bl	80051f0 <USB_HC_Halt>
 8002326:	e041      	b.n	80023ac <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002328:	687a      	ldr	r2, [r7, #4]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	212c      	movs	r1, #44	; 0x2c
 800232e:	fb01 f303 	mul.w	r3, r1, r3
 8002332:	4413      	add	r3, r2
 8002334:	333f      	adds	r3, #63	; 0x3f
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d009      	beq.n	8002350 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800233c:	687a      	ldr	r2, [r7, #4]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	212c      	movs	r1, #44	; 0x2c
 8002342:	fb01 f303 	mul.w	r3, r1, r3
 8002346:	4413      	add	r3, r2
 8002348:	333f      	adds	r3, #63	; 0x3f
 800234a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800234c:	2b02      	cmp	r3, #2
 800234e:	d12d      	bne.n	80023ac <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002350:	687a      	ldr	r2, [r7, #4]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	212c      	movs	r1, #44	; 0x2c
 8002356:	fb01 f303 	mul.w	r3, r1, r3
 800235a:	4413      	add	r3, r2
 800235c:	335c      	adds	r3, #92	; 0x5c
 800235e:	2200      	movs	r2, #0
 8002360:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	691b      	ldr	r3, [r3, #16]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d120      	bne.n	80023ac <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	212c      	movs	r1, #44	; 0x2c
 8002370:	fb01 f303 	mul.w	r3, r1, r3
 8002374:	4413      	add	r3, r2
 8002376:	3361      	adds	r3, #97	; 0x61
 8002378:	2203      	movs	r2, #3
 800237a:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	015a      	lsls	r2, r3, #5
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	4413      	add	r3, r2
 8002384:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002388:	68db      	ldr	r3, [r3, #12]
 800238a:	68fa      	ldr	r2, [r7, #12]
 800238c:	0151      	lsls	r1, r2, #5
 800238e:	693a      	ldr	r2, [r7, #16]
 8002390:	440a      	add	r2, r1
 8002392:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002396:	f043 0302 	orr.w	r3, r3, #2
 800239a:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	68fa      	ldr	r2, [r7, #12]
 80023a2:	b2d2      	uxtb	r2, r2
 80023a4:	4611      	mov	r1, r2
 80023a6:	4618      	mov	r0, r3
 80023a8:	f002 ff22 	bl	80051f0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	015a      	lsls	r2, r3, #5
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	4413      	add	r3, r2
 80023b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023b8:	461a      	mov	r2, r3
 80023ba:	2310      	movs	r3, #16
 80023bc:	6093      	str	r3, [r2, #8]
}
 80023be:	bf00      	nop
 80023c0:	3718      	adds	r7, #24
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}

080023c6 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80023c6:	b580      	push	{r7, lr}
 80023c8:	b088      	sub	sp, #32
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	6078      	str	r0, [r7, #4]
 80023ce:	460b      	mov	r3, r1
 80023d0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80023dc:	78fb      	ldrb	r3, [r7, #3]
 80023de:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	015a      	lsls	r2, r3, #5
 80023e4:	69bb      	ldr	r3, [r7, #24]
 80023e6:	4413      	add	r3, r2
 80023e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	f003 0304 	and.w	r3, r3, #4
 80023f2:	2b04      	cmp	r3, #4
 80023f4:	d119      	bne.n	800242a <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	015a      	lsls	r2, r3, #5
 80023fa:	69bb      	ldr	r3, [r7, #24]
 80023fc:	4413      	add	r3, r2
 80023fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002402:	461a      	mov	r2, r3
 8002404:	2304      	movs	r3, #4
 8002406:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	015a      	lsls	r2, r3, #5
 800240c:	69bb      	ldr	r3, [r7, #24]
 800240e:	4413      	add	r3, r2
 8002410:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002414:	68db      	ldr	r3, [r3, #12]
 8002416:	697a      	ldr	r2, [r7, #20]
 8002418:	0151      	lsls	r1, r2, #5
 800241a:	69ba      	ldr	r2, [r7, #24]
 800241c:	440a      	add	r2, r1
 800241e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002422:	f043 0302 	orr.w	r3, r3, #2
 8002426:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002428:	e3ca      	b.n	8002bc0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	015a      	lsls	r2, r3, #5
 800242e:	69bb      	ldr	r3, [r7, #24]
 8002430:	4413      	add	r3, r2
 8002432:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	f003 0320 	and.w	r3, r3, #32
 800243c:	2b20      	cmp	r3, #32
 800243e:	d13e      	bne.n	80024be <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	015a      	lsls	r2, r3, #5
 8002444:	69bb      	ldr	r3, [r7, #24]
 8002446:	4413      	add	r3, r2
 8002448:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800244c:	461a      	mov	r2, r3
 800244e:	2320      	movs	r3, #32
 8002450:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	212c      	movs	r1, #44	; 0x2c
 8002458:	fb01 f303 	mul.w	r3, r1, r3
 800245c:	4413      	add	r3, r2
 800245e:	333d      	adds	r3, #61	; 0x3d
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	2b01      	cmp	r3, #1
 8002464:	f040 83ac 	bne.w	8002bc0 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 8002468:	687a      	ldr	r2, [r7, #4]
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	212c      	movs	r1, #44	; 0x2c
 800246e:	fb01 f303 	mul.w	r3, r1, r3
 8002472:	4413      	add	r3, r2
 8002474:	333d      	adds	r3, #61	; 0x3d
 8002476:	2200      	movs	r2, #0
 8002478:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	212c      	movs	r1, #44	; 0x2c
 8002480:	fb01 f303 	mul.w	r3, r1, r3
 8002484:	4413      	add	r3, r2
 8002486:	3360      	adds	r3, #96	; 0x60
 8002488:	2202      	movs	r2, #2
 800248a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	015a      	lsls	r2, r3, #5
 8002490:	69bb      	ldr	r3, [r7, #24]
 8002492:	4413      	add	r3, r2
 8002494:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002498:	68db      	ldr	r3, [r3, #12]
 800249a:	697a      	ldr	r2, [r7, #20]
 800249c:	0151      	lsls	r1, r2, #5
 800249e:	69ba      	ldr	r2, [r7, #24]
 80024a0:	440a      	add	r2, r1
 80024a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80024a6:	f043 0302 	orr.w	r3, r3, #2
 80024aa:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	697a      	ldr	r2, [r7, #20]
 80024b2:	b2d2      	uxtb	r2, r2
 80024b4:	4611      	mov	r1, r2
 80024b6:	4618      	mov	r0, r3
 80024b8:	f002 fe9a 	bl	80051f0 <USB_HC_Halt>
}
 80024bc:	e380      	b.n	8002bc0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	015a      	lsls	r2, r3, #5
 80024c2:	69bb      	ldr	r3, [r7, #24]
 80024c4:	4413      	add	r3, r2
 80024c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024d4:	d122      	bne.n	800251c <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	015a      	lsls	r2, r3, #5
 80024da:	69bb      	ldr	r3, [r7, #24]
 80024dc:	4413      	add	r3, r2
 80024de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	697a      	ldr	r2, [r7, #20]
 80024e6:	0151      	lsls	r1, r2, #5
 80024e8:	69ba      	ldr	r2, [r7, #24]
 80024ea:	440a      	add	r2, r1
 80024ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80024f0:	f043 0302 	orr.w	r3, r3, #2
 80024f4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	697a      	ldr	r2, [r7, #20]
 80024fc:	b2d2      	uxtb	r2, r2
 80024fe:	4611      	mov	r1, r2
 8002500:	4618      	mov	r0, r3
 8002502:	f002 fe75 	bl	80051f0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	015a      	lsls	r2, r3, #5
 800250a:	69bb      	ldr	r3, [r7, #24]
 800250c:	4413      	add	r3, r2
 800250e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002512:	461a      	mov	r2, r3
 8002514:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002518:	6093      	str	r3, [r2, #8]
}
 800251a:	e351      	b.n	8002bc0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	015a      	lsls	r2, r3, #5
 8002520:	69bb      	ldr	r3, [r7, #24]
 8002522:	4413      	add	r3, r2
 8002524:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	f003 0301 	and.w	r3, r3, #1
 800252e:	2b01      	cmp	r3, #1
 8002530:	d150      	bne.n	80025d4 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	212c      	movs	r1, #44	; 0x2c
 8002538:	fb01 f303 	mul.w	r3, r1, r3
 800253c:	4413      	add	r3, r2
 800253e:	335c      	adds	r3, #92	; 0x5c
 8002540:	2200      	movs	r2, #0
 8002542:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	015a      	lsls	r2, r3, #5
 8002548:	69bb      	ldr	r3, [r7, #24]
 800254a:	4413      	add	r3, r2
 800254c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002556:	2b40      	cmp	r3, #64	; 0x40
 8002558:	d111      	bne.n	800257e <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	212c      	movs	r1, #44	; 0x2c
 8002560:	fb01 f303 	mul.w	r3, r1, r3
 8002564:	4413      	add	r3, r2
 8002566:	333d      	adds	r3, #61	; 0x3d
 8002568:	2201      	movs	r2, #1
 800256a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	015a      	lsls	r2, r3, #5
 8002570:	69bb      	ldr	r3, [r7, #24]
 8002572:	4413      	add	r3, r2
 8002574:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002578:	461a      	mov	r2, r3
 800257a:	2340      	movs	r3, #64	; 0x40
 800257c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	015a      	lsls	r2, r3, #5
 8002582:	69bb      	ldr	r3, [r7, #24]
 8002584:	4413      	add	r3, r2
 8002586:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	697a      	ldr	r2, [r7, #20]
 800258e:	0151      	lsls	r1, r2, #5
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	440a      	add	r2, r1
 8002594:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002598:	f043 0302 	orr.w	r3, r3, #2
 800259c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	697a      	ldr	r2, [r7, #20]
 80025a4:	b2d2      	uxtb	r2, r2
 80025a6:	4611      	mov	r1, r2
 80025a8:	4618      	mov	r0, r3
 80025aa:	f002 fe21 	bl	80051f0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	015a      	lsls	r2, r3, #5
 80025b2:	69bb      	ldr	r3, [r7, #24]
 80025b4:	4413      	add	r3, r2
 80025b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ba:	461a      	mov	r2, r3
 80025bc:	2301      	movs	r3, #1
 80025be:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	212c      	movs	r1, #44	; 0x2c
 80025c6:	fb01 f303 	mul.w	r3, r1, r3
 80025ca:	4413      	add	r3, r2
 80025cc:	3361      	adds	r3, #97	; 0x61
 80025ce:	2201      	movs	r2, #1
 80025d0:	701a      	strb	r2, [r3, #0]
}
 80025d2:	e2f5      	b.n	8002bc0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	015a      	lsls	r2, r3, #5
 80025d8:	69bb      	ldr	r3, [r7, #24]
 80025da:	4413      	add	r3, r2
 80025dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025e6:	2b40      	cmp	r3, #64	; 0x40
 80025e8:	d13c      	bne.n	8002664 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	212c      	movs	r1, #44	; 0x2c
 80025f0:	fb01 f303 	mul.w	r3, r1, r3
 80025f4:	4413      	add	r3, r2
 80025f6:	3361      	adds	r3, #97	; 0x61
 80025f8:	2204      	movs	r2, #4
 80025fa:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80025fc:	687a      	ldr	r2, [r7, #4]
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	212c      	movs	r1, #44	; 0x2c
 8002602:	fb01 f303 	mul.w	r3, r1, r3
 8002606:	4413      	add	r3, r2
 8002608:	333d      	adds	r3, #61	; 0x3d
 800260a:	2201      	movs	r2, #1
 800260c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	212c      	movs	r1, #44	; 0x2c
 8002614:	fb01 f303 	mul.w	r3, r1, r3
 8002618:	4413      	add	r3, r2
 800261a:	335c      	adds	r3, #92	; 0x5c
 800261c:	2200      	movs	r2, #0
 800261e:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	015a      	lsls	r2, r3, #5
 8002624:	69bb      	ldr	r3, [r7, #24]
 8002626:	4413      	add	r3, r2
 8002628:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800262c:	68db      	ldr	r3, [r3, #12]
 800262e:	697a      	ldr	r2, [r7, #20]
 8002630:	0151      	lsls	r1, r2, #5
 8002632:	69ba      	ldr	r2, [r7, #24]
 8002634:	440a      	add	r2, r1
 8002636:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800263a:	f043 0302 	orr.w	r3, r3, #2
 800263e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	697a      	ldr	r2, [r7, #20]
 8002646:	b2d2      	uxtb	r2, r2
 8002648:	4611      	mov	r1, r2
 800264a:	4618      	mov	r0, r3
 800264c:	f002 fdd0 	bl	80051f0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	015a      	lsls	r2, r3, #5
 8002654:	69bb      	ldr	r3, [r7, #24]
 8002656:	4413      	add	r3, r2
 8002658:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800265c:	461a      	mov	r2, r3
 800265e:	2340      	movs	r3, #64	; 0x40
 8002660:	6093      	str	r3, [r2, #8]
}
 8002662:	e2ad      	b.n	8002bc0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	015a      	lsls	r2, r3, #5
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	4413      	add	r3, r2
 800266c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	f003 0308 	and.w	r3, r3, #8
 8002676:	2b08      	cmp	r3, #8
 8002678:	d12a      	bne.n	80026d0 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	015a      	lsls	r2, r3, #5
 800267e:	69bb      	ldr	r3, [r7, #24]
 8002680:	4413      	add	r3, r2
 8002682:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002686:	461a      	mov	r2, r3
 8002688:	2308      	movs	r3, #8
 800268a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	015a      	lsls	r2, r3, #5
 8002690:	69bb      	ldr	r3, [r7, #24]
 8002692:	4413      	add	r3, r2
 8002694:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002698:	68db      	ldr	r3, [r3, #12]
 800269a:	697a      	ldr	r2, [r7, #20]
 800269c:	0151      	lsls	r1, r2, #5
 800269e:	69ba      	ldr	r2, [r7, #24]
 80026a0:	440a      	add	r2, r1
 80026a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026a6:	f043 0302 	orr.w	r3, r3, #2
 80026aa:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	697a      	ldr	r2, [r7, #20]
 80026b2:	b2d2      	uxtb	r2, r2
 80026b4:	4611      	mov	r1, r2
 80026b6:	4618      	mov	r0, r3
 80026b8:	f002 fd9a 	bl	80051f0 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	212c      	movs	r1, #44	; 0x2c
 80026c2:	fb01 f303 	mul.w	r3, r1, r3
 80026c6:	4413      	add	r3, r2
 80026c8:	3361      	adds	r3, #97	; 0x61
 80026ca:	2205      	movs	r2, #5
 80026cc:	701a      	strb	r2, [r3, #0]
}
 80026ce:	e277      	b.n	8002bc0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	015a      	lsls	r2, r3, #5
 80026d4:	69bb      	ldr	r3, [r7, #24]
 80026d6:	4413      	add	r3, r2
 80026d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	f003 0310 	and.w	r3, r3, #16
 80026e2:	2b10      	cmp	r3, #16
 80026e4:	d150      	bne.n	8002788 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	212c      	movs	r1, #44	; 0x2c
 80026ec:	fb01 f303 	mul.w	r3, r1, r3
 80026f0:	4413      	add	r3, r2
 80026f2:	335c      	adds	r3, #92	; 0x5c
 80026f4:	2200      	movs	r2, #0
 80026f6:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	212c      	movs	r1, #44	; 0x2c
 80026fe:	fb01 f303 	mul.w	r3, r1, r3
 8002702:	4413      	add	r3, r2
 8002704:	3361      	adds	r3, #97	; 0x61
 8002706:	2203      	movs	r2, #3
 8002708:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	212c      	movs	r1, #44	; 0x2c
 8002710:	fb01 f303 	mul.w	r3, r1, r3
 8002714:	4413      	add	r3, r2
 8002716:	333d      	adds	r3, #61	; 0x3d
 8002718:	781b      	ldrb	r3, [r3, #0]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d112      	bne.n	8002744 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	212c      	movs	r1, #44	; 0x2c
 8002724:	fb01 f303 	mul.w	r3, r1, r3
 8002728:	4413      	add	r3, r2
 800272a:	333c      	adds	r3, #60	; 0x3c
 800272c:	781b      	ldrb	r3, [r3, #0]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d108      	bne.n	8002744 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	212c      	movs	r1, #44	; 0x2c
 8002738:	fb01 f303 	mul.w	r3, r1, r3
 800273c:	4413      	add	r3, r2
 800273e:	333d      	adds	r3, #61	; 0x3d
 8002740:	2201      	movs	r2, #1
 8002742:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	015a      	lsls	r2, r3, #5
 8002748:	69bb      	ldr	r3, [r7, #24]
 800274a:	4413      	add	r3, r2
 800274c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	697a      	ldr	r2, [r7, #20]
 8002754:	0151      	lsls	r1, r2, #5
 8002756:	69ba      	ldr	r2, [r7, #24]
 8002758:	440a      	add	r2, r1
 800275a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800275e:	f043 0302 	orr.w	r3, r3, #2
 8002762:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	697a      	ldr	r2, [r7, #20]
 800276a:	b2d2      	uxtb	r2, r2
 800276c:	4611      	mov	r1, r2
 800276e:	4618      	mov	r0, r3
 8002770:	f002 fd3e 	bl	80051f0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	015a      	lsls	r2, r3, #5
 8002778:	69bb      	ldr	r3, [r7, #24]
 800277a:	4413      	add	r3, r2
 800277c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002780:	461a      	mov	r2, r3
 8002782:	2310      	movs	r3, #16
 8002784:	6093      	str	r3, [r2, #8]
}
 8002786:	e21b      	b.n	8002bc0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	015a      	lsls	r2, r3, #5
 800278c:	69bb      	ldr	r3, [r7, #24]
 800278e:	4413      	add	r3, r2
 8002790:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800279a:	2b80      	cmp	r3, #128	; 0x80
 800279c:	d174      	bne.n	8002888 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	691b      	ldr	r3, [r3, #16]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d121      	bne.n	80027ea <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	212c      	movs	r1, #44	; 0x2c
 80027ac:	fb01 f303 	mul.w	r3, r1, r3
 80027b0:	4413      	add	r3, r2
 80027b2:	3361      	adds	r3, #97	; 0x61
 80027b4:	2206      	movs	r2, #6
 80027b6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	015a      	lsls	r2, r3, #5
 80027bc:	69bb      	ldr	r3, [r7, #24]
 80027be:	4413      	add	r3, r2
 80027c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027c4:	68db      	ldr	r3, [r3, #12]
 80027c6:	697a      	ldr	r2, [r7, #20]
 80027c8:	0151      	lsls	r1, r2, #5
 80027ca:	69ba      	ldr	r2, [r7, #24]
 80027cc:	440a      	add	r2, r1
 80027ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027d2:	f043 0302 	orr.w	r3, r3, #2
 80027d6:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	697a      	ldr	r2, [r7, #20]
 80027de:	b2d2      	uxtb	r2, r2
 80027e0:	4611      	mov	r1, r2
 80027e2:	4618      	mov	r0, r3
 80027e4:	f002 fd04 	bl	80051f0 <USB_HC_Halt>
 80027e8:	e044      	b.n	8002874 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 80027ea:	687a      	ldr	r2, [r7, #4]
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	212c      	movs	r1, #44	; 0x2c
 80027f0:	fb01 f303 	mul.w	r3, r1, r3
 80027f4:	4413      	add	r3, r2
 80027f6:	335c      	adds	r3, #92	; 0x5c
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	1c5a      	adds	r2, r3, #1
 80027fc:	6879      	ldr	r1, [r7, #4]
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	202c      	movs	r0, #44	; 0x2c
 8002802:	fb00 f303 	mul.w	r3, r0, r3
 8002806:	440b      	add	r3, r1
 8002808:	335c      	adds	r3, #92	; 0x5c
 800280a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800280c:	687a      	ldr	r2, [r7, #4]
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	212c      	movs	r1, #44	; 0x2c
 8002812:	fb01 f303 	mul.w	r3, r1, r3
 8002816:	4413      	add	r3, r2
 8002818:	335c      	adds	r3, #92	; 0x5c
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	2b02      	cmp	r3, #2
 800281e:	d920      	bls.n	8002862 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	212c      	movs	r1, #44	; 0x2c
 8002826:	fb01 f303 	mul.w	r3, r1, r3
 800282a:	4413      	add	r3, r2
 800282c:	335c      	adds	r3, #92	; 0x5c
 800282e:	2200      	movs	r2, #0
 8002830:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	212c      	movs	r1, #44	; 0x2c
 8002838:	fb01 f303 	mul.w	r3, r1, r3
 800283c:	4413      	add	r3, r2
 800283e:	3360      	adds	r3, #96	; 0x60
 8002840:	2204      	movs	r2, #4
 8002842:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	b2d9      	uxtb	r1, r3
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	202c      	movs	r0, #44	; 0x2c
 800284e:	fb00 f303 	mul.w	r3, r0, r3
 8002852:	4413      	add	r3, r2
 8002854:	3360      	adds	r3, #96	; 0x60
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	461a      	mov	r2, r3
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f004 fe6e 	bl	800753c <HAL_HCD_HC_NotifyURBChange_Callback>
 8002860:	e008      	b.n	8002874 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	212c      	movs	r1, #44	; 0x2c
 8002868:	fb01 f303 	mul.w	r3, r1, r3
 800286c:	4413      	add	r3, r2
 800286e:	3360      	adds	r3, #96	; 0x60
 8002870:	2202      	movs	r2, #2
 8002872:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	015a      	lsls	r2, r3, #5
 8002878:	69bb      	ldr	r3, [r7, #24]
 800287a:	4413      	add	r3, r2
 800287c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002880:	461a      	mov	r2, r3
 8002882:	2380      	movs	r3, #128	; 0x80
 8002884:	6093      	str	r3, [r2, #8]
}
 8002886:	e19b      	b.n	8002bc0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	015a      	lsls	r2, r3, #5
 800288c:	69bb      	ldr	r3, [r7, #24]
 800288e:	4413      	add	r3, r2
 8002890:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800289a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800289e:	d134      	bne.n	800290a <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	015a      	lsls	r2, r3, #5
 80028a4:	69bb      	ldr	r3, [r7, #24]
 80028a6:	4413      	add	r3, r2
 80028a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028ac:	68db      	ldr	r3, [r3, #12]
 80028ae:	697a      	ldr	r2, [r7, #20]
 80028b0:	0151      	lsls	r1, r2, #5
 80028b2:	69ba      	ldr	r2, [r7, #24]
 80028b4:	440a      	add	r2, r1
 80028b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80028ba:	f043 0302 	orr.w	r3, r3, #2
 80028be:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	697a      	ldr	r2, [r7, #20]
 80028c6:	b2d2      	uxtb	r2, r2
 80028c8:	4611      	mov	r1, r2
 80028ca:	4618      	mov	r0, r3
 80028cc:	f002 fc90 	bl	80051f0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	015a      	lsls	r2, r3, #5
 80028d4:	69bb      	ldr	r3, [r7, #24]
 80028d6:	4413      	add	r3, r2
 80028d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028dc:	461a      	mov	r2, r3
 80028de:	2310      	movs	r3, #16
 80028e0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	015a      	lsls	r2, r3, #5
 80028e6:	69bb      	ldr	r3, [r7, #24]
 80028e8:	4413      	add	r3, r2
 80028ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028ee:	461a      	mov	r2, r3
 80028f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028f4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80028f6:	687a      	ldr	r2, [r7, #4]
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	212c      	movs	r1, #44	; 0x2c
 80028fc:	fb01 f303 	mul.w	r3, r1, r3
 8002900:	4413      	add	r3, r2
 8002902:	3361      	adds	r3, #97	; 0x61
 8002904:	2208      	movs	r2, #8
 8002906:	701a      	strb	r2, [r3, #0]
}
 8002908:	e15a      	b.n	8002bc0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	015a      	lsls	r2, r3, #5
 800290e:	69bb      	ldr	r3, [r7, #24]
 8002910:	4413      	add	r3, r2
 8002912:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	f003 0302 	and.w	r3, r3, #2
 800291c:	2b02      	cmp	r3, #2
 800291e:	f040 814f 	bne.w	8002bc0 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	015a      	lsls	r2, r3, #5
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	4413      	add	r3, r2
 800292a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	697a      	ldr	r2, [r7, #20]
 8002932:	0151      	lsls	r1, r2, #5
 8002934:	69ba      	ldr	r2, [r7, #24]
 8002936:	440a      	add	r2, r1
 8002938:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800293c:	f023 0302 	bic.w	r3, r3, #2
 8002940:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	212c      	movs	r1, #44	; 0x2c
 8002948:	fb01 f303 	mul.w	r3, r1, r3
 800294c:	4413      	add	r3, r2
 800294e:	3361      	adds	r3, #97	; 0x61
 8002950:	781b      	ldrb	r3, [r3, #0]
 8002952:	2b01      	cmp	r3, #1
 8002954:	d17d      	bne.n	8002a52 <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	212c      	movs	r1, #44	; 0x2c
 800295c:	fb01 f303 	mul.w	r3, r1, r3
 8002960:	4413      	add	r3, r2
 8002962:	3360      	adds	r3, #96	; 0x60
 8002964:	2201      	movs	r2, #1
 8002966:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002968:	687a      	ldr	r2, [r7, #4]
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	212c      	movs	r1, #44	; 0x2c
 800296e:	fb01 f303 	mul.w	r3, r1, r3
 8002972:	4413      	add	r3, r2
 8002974:	333f      	adds	r3, #63	; 0x3f
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	2b02      	cmp	r3, #2
 800297a:	d00a      	beq.n	8002992 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	212c      	movs	r1, #44	; 0x2c
 8002982:	fb01 f303 	mul.w	r3, r1, r3
 8002986:	4413      	add	r3, r2
 8002988:	333f      	adds	r3, #63	; 0x3f
 800298a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800298c:	2b03      	cmp	r3, #3
 800298e:	f040 8100 	bne.w	8002b92 <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	691b      	ldr	r3, [r3, #16]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d113      	bne.n	80029c2 <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	212c      	movs	r1, #44	; 0x2c
 80029a0:	fb01 f303 	mul.w	r3, r1, r3
 80029a4:	4413      	add	r3, r2
 80029a6:	3355      	adds	r3, #85	; 0x55
 80029a8:	781b      	ldrb	r3, [r3, #0]
 80029aa:	f083 0301 	eor.w	r3, r3, #1
 80029ae:	b2d8      	uxtb	r0, r3
 80029b0:	687a      	ldr	r2, [r7, #4]
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	212c      	movs	r1, #44	; 0x2c
 80029b6:	fb01 f303 	mul.w	r3, r1, r3
 80029ba:	4413      	add	r3, r2
 80029bc:	3355      	adds	r3, #85	; 0x55
 80029be:	4602      	mov	r2, r0
 80029c0:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	691b      	ldr	r3, [r3, #16]
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	f040 80e3 	bne.w	8002b92 <HCD_HC_OUT_IRQHandler+0x7cc>
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	212c      	movs	r1, #44	; 0x2c
 80029d2:	fb01 f303 	mul.w	r3, r1, r3
 80029d6:	4413      	add	r3, r2
 80029d8:	334c      	adds	r3, #76	; 0x4c
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	f000 80d8 	beq.w	8002b92 <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	212c      	movs	r1, #44	; 0x2c
 80029e8:	fb01 f303 	mul.w	r3, r1, r3
 80029ec:	4413      	add	r3, r2
 80029ee:	334c      	adds	r3, #76	; 0x4c
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	6879      	ldr	r1, [r7, #4]
 80029f4:	697a      	ldr	r2, [r7, #20]
 80029f6:	202c      	movs	r0, #44	; 0x2c
 80029f8:	fb00 f202 	mul.w	r2, r0, r2
 80029fc:	440a      	add	r2, r1
 80029fe:	3240      	adds	r2, #64	; 0x40
 8002a00:	8812      	ldrh	r2, [r2, #0]
 8002a02:	4413      	add	r3, r2
 8002a04:	3b01      	subs	r3, #1
 8002a06:	6879      	ldr	r1, [r7, #4]
 8002a08:	697a      	ldr	r2, [r7, #20]
 8002a0a:	202c      	movs	r0, #44	; 0x2c
 8002a0c:	fb00 f202 	mul.w	r2, r0, r2
 8002a10:	440a      	add	r2, r1
 8002a12:	3240      	adds	r2, #64	; 0x40
 8002a14:	8812      	ldrh	r2, [r2, #0]
 8002a16:	fbb3 f3f2 	udiv	r3, r3, r2
 8002a1a:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f003 0301 	and.w	r3, r3, #1
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	f000 80b5 	beq.w	8002b92 <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002a28:	687a      	ldr	r2, [r7, #4]
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	212c      	movs	r1, #44	; 0x2c
 8002a2e:	fb01 f303 	mul.w	r3, r1, r3
 8002a32:	4413      	add	r3, r2
 8002a34:	3355      	adds	r3, #85	; 0x55
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	f083 0301 	eor.w	r3, r3, #1
 8002a3c:	b2d8      	uxtb	r0, r3
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	212c      	movs	r1, #44	; 0x2c
 8002a44:	fb01 f303 	mul.w	r3, r1, r3
 8002a48:	4413      	add	r3, r2
 8002a4a:	3355      	adds	r3, #85	; 0x55
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	701a      	strb	r2, [r3, #0]
 8002a50:	e09f      	b.n	8002b92 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	212c      	movs	r1, #44	; 0x2c
 8002a58:	fb01 f303 	mul.w	r3, r1, r3
 8002a5c:	4413      	add	r3, r2
 8002a5e:	3361      	adds	r3, #97	; 0x61
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	2b03      	cmp	r3, #3
 8002a64:	d109      	bne.n	8002a7a <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	212c      	movs	r1, #44	; 0x2c
 8002a6c:	fb01 f303 	mul.w	r3, r1, r3
 8002a70:	4413      	add	r3, r2
 8002a72:	3360      	adds	r3, #96	; 0x60
 8002a74:	2202      	movs	r2, #2
 8002a76:	701a      	strb	r2, [r3, #0]
 8002a78:	e08b      	b.n	8002b92 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	212c      	movs	r1, #44	; 0x2c
 8002a80:	fb01 f303 	mul.w	r3, r1, r3
 8002a84:	4413      	add	r3, r2
 8002a86:	3361      	adds	r3, #97	; 0x61
 8002a88:	781b      	ldrb	r3, [r3, #0]
 8002a8a:	2b04      	cmp	r3, #4
 8002a8c:	d109      	bne.n	8002aa2 <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	212c      	movs	r1, #44	; 0x2c
 8002a94:	fb01 f303 	mul.w	r3, r1, r3
 8002a98:	4413      	add	r3, r2
 8002a9a:	3360      	adds	r3, #96	; 0x60
 8002a9c:	2202      	movs	r2, #2
 8002a9e:	701a      	strb	r2, [r3, #0]
 8002aa0:	e077      	b.n	8002b92 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	212c      	movs	r1, #44	; 0x2c
 8002aa8:	fb01 f303 	mul.w	r3, r1, r3
 8002aac:	4413      	add	r3, r2
 8002aae:	3361      	adds	r3, #97	; 0x61
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	2b05      	cmp	r3, #5
 8002ab4:	d109      	bne.n	8002aca <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	212c      	movs	r1, #44	; 0x2c
 8002abc:	fb01 f303 	mul.w	r3, r1, r3
 8002ac0:	4413      	add	r3, r2
 8002ac2:	3360      	adds	r3, #96	; 0x60
 8002ac4:	2205      	movs	r2, #5
 8002ac6:	701a      	strb	r2, [r3, #0]
 8002ac8:	e063      	b.n	8002b92 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	212c      	movs	r1, #44	; 0x2c
 8002ad0:	fb01 f303 	mul.w	r3, r1, r3
 8002ad4:	4413      	add	r3, r2
 8002ad6:	3361      	adds	r3, #97	; 0x61
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	2b06      	cmp	r3, #6
 8002adc:	d009      	beq.n	8002af2 <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	212c      	movs	r1, #44	; 0x2c
 8002ae4:	fb01 f303 	mul.w	r3, r1, r3
 8002ae8:	4413      	add	r3, r2
 8002aea:	3361      	adds	r3, #97	; 0x61
 8002aec:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002aee:	2b08      	cmp	r3, #8
 8002af0:	d14f      	bne.n	8002b92 <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	212c      	movs	r1, #44	; 0x2c
 8002af8:	fb01 f303 	mul.w	r3, r1, r3
 8002afc:	4413      	add	r3, r2
 8002afe:	335c      	adds	r3, #92	; 0x5c
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	1c5a      	adds	r2, r3, #1
 8002b04:	6879      	ldr	r1, [r7, #4]
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	202c      	movs	r0, #44	; 0x2c
 8002b0a:	fb00 f303 	mul.w	r3, r0, r3
 8002b0e:	440b      	add	r3, r1
 8002b10:	335c      	adds	r3, #92	; 0x5c
 8002b12:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	212c      	movs	r1, #44	; 0x2c
 8002b1a:	fb01 f303 	mul.w	r3, r1, r3
 8002b1e:	4413      	add	r3, r2
 8002b20:	335c      	adds	r3, #92	; 0x5c
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	2b02      	cmp	r3, #2
 8002b26:	d912      	bls.n	8002b4e <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002b28:	687a      	ldr	r2, [r7, #4]
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	212c      	movs	r1, #44	; 0x2c
 8002b2e:	fb01 f303 	mul.w	r3, r1, r3
 8002b32:	4413      	add	r3, r2
 8002b34:	335c      	adds	r3, #92	; 0x5c
 8002b36:	2200      	movs	r2, #0
 8002b38:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002b3a:	687a      	ldr	r2, [r7, #4]
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	212c      	movs	r1, #44	; 0x2c
 8002b40:	fb01 f303 	mul.w	r3, r1, r3
 8002b44:	4413      	add	r3, r2
 8002b46:	3360      	adds	r3, #96	; 0x60
 8002b48:	2204      	movs	r2, #4
 8002b4a:	701a      	strb	r2, [r3, #0]
 8002b4c:	e021      	b.n	8002b92 <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	212c      	movs	r1, #44	; 0x2c
 8002b54:	fb01 f303 	mul.w	r3, r1, r3
 8002b58:	4413      	add	r3, r2
 8002b5a:	3360      	adds	r3, #96	; 0x60
 8002b5c:	2202      	movs	r2, #2
 8002b5e:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	015a      	lsls	r2, r3, #5
 8002b64:	69bb      	ldr	r3, [r7, #24]
 8002b66:	4413      	add	r3, r2
 8002b68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002b76:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b7e:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	015a      	lsls	r2, r3, #5
 8002b84:	69bb      	ldr	r3, [r7, #24]
 8002b86:	4413      	add	r3, r2
 8002b88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	015a      	lsls	r2, r3, #5
 8002b96:	69bb      	ldr	r3, [r7, #24]
 8002b98:	4413      	add	r3, r2
 8002b9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	2302      	movs	r3, #2
 8002ba2:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	b2d9      	uxtb	r1, r3
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	202c      	movs	r0, #44	; 0x2c
 8002bae:	fb00 f303 	mul.w	r3, r0, r3
 8002bb2:	4413      	add	r3, r2
 8002bb4:	3360      	adds	r3, #96	; 0x60
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	461a      	mov	r2, r3
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f004 fcbe 	bl	800753c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002bc0:	bf00      	nop
 8002bc2:	3720      	adds	r7, #32
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}

08002bc8 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b08a      	sub	sp, #40	; 0x28
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd8:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	6a1b      	ldr	r3, [r3, #32]
 8002be0:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	f003 030f 	and.w	r3, r3, #15
 8002be8:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	0c5b      	lsrs	r3, r3, #17
 8002bee:	f003 030f 	and.w	r3, r3, #15
 8002bf2:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	091b      	lsrs	r3, r3, #4
 8002bf8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002bfc:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	2b02      	cmp	r3, #2
 8002c02:	d004      	beq.n	8002c0e <HCD_RXQLVL_IRQHandler+0x46>
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	2b05      	cmp	r3, #5
 8002c08:	f000 80a9 	beq.w	8002d5e <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002c0c:	e0aa      	b.n	8002d64 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	f000 80a6 	beq.w	8002d62 <HCD_RXQLVL_IRQHandler+0x19a>
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	69bb      	ldr	r3, [r7, #24]
 8002c1a:	212c      	movs	r1, #44	; 0x2c
 8002c1c:	fb01 f303 	mul.w	r3, r1, r3
 8002c20:	4413      	add	r3, r2
 8002c22:	3344      	adds	r3, #68	; 0x44
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	f000 809b 	beq.w	8002d62 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	69bb      	ldr	r3, [r7, #24]
 8002c30:	212c      	movs	r1, #44	; 0x2c
 8002c32:	fb01 f303 	mul.w	r3, r1, r3
 8002c36:	4413      	add	r3, r2
 8002c38:	3350      	adds	r3, #80	; 0x50
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	441a      	add	r2, r3
 8002c40:	6879      	ldr	r1, [r7, #4]
 8002c42:	69bb      	ldr	r3, [r7, #24]
 8002c44:	202c      	movs	r0, #44	; 0x2c
 8002c46:	fb00 f303 	mul.w	r3, r0, r3
 8002c4a:	440b      	add	r3, r1
 8002c4c:	334c      	adds	r3, #76	; 0x4c
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d87a      	bhi.n	8002d4a <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6818      	ldr	r0, [r3, #0]
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	69bb      	ldr	r3, [r7, #24]
 8002c5c:	212c      	movs	r1, #44	; 0x2c
 8002c5e:	fb01 f303 	mul.w	r3, r1, r3
 8002c62:	4413      	add	r3, r2
 8002c64:	3344      	adds	r3, #68	; 0x44
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	693a      	ldr	r2, [r7, #16]
 8002c6a:	b292      	uxth	r2, r2
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	f001 fe42 	bl	80048f6 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	69bb      	ldr	r3, [r7, #24]
 8002c76:	212c      	movs	r1, #44	; 0x2c
 8002c78:	fb01 f303 	mul.w	r3, r1, r3
 8002c7c:	4413      	add	r3, r2
 8002c7e:	3344      	adds	r3, #68	; 0x44
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	441a      	add	r2, r3
 8002c86:	6879      	ldr	r1, [r7, #4]
 8002c88:	69bb      	ldr	r3, [r7, #24]
 8002c8a:	202c      	movs	r0, #44	; 0x2c
 8002c8c:	fb00 f303 	mul.w	r3, r0, r3
 8002c90:	440b      	add	r3, r1
 8002c92:	3344      	adds	r3, #68	; 0x44
 8002c94:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	69bb      	ldr	r3, [r7, #24]
 8002c9a:	212c      	movs	r1, #44	; 0x2c
 8002c9c:	fb01 f303 	mul.w	r3, r1, r3
 8002ca0:	4413      	add	r3, r2
 8002ca2:	3350      	adds	r3, #80	; 0x50
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	441a      	add	r2, r3
 8002caa:	6879      	ldr	r1, [r7, #4]
 8002cac:	69bb      	ldr	r3, [r7, #24]
 8002cae:	202c      	movs	r0, #44	; 0x2c
 8002cb0:	fb00 f303 	mul.w	r3, r0, r3
 8002cb4:	440b      	add	r3, r1
 8002cb6:	3350      	adds	r3, #80	; 0x50
 8002cb8:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002cba:	69bb      	ldr	r3, [r7, #24]
 8002cbc:	015a      	lsls	r2, r3, #5
 8002cbe:	6a3b      	ldr	r3, [r7, #32]
 8002cc0:	4413      	add	r3, r2
 8002cc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cc6:	691b      	ldr	r3, [r3, #16]
 8002cc8:	0cdb      	lsrs	r3, r3, #19
 8002cca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002cce:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002cd0:	687a      	ldr	r2, [r7, #4]
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	212c      	movs	r1, #44	; 0x2c
 8002cd6:	fb01 f303 	mul.w	r3, r1, r3
 8002cda:	4413      	add	r3, r2
 8002cdc:	3340      	adds	r3, #64	; 0x40
 8002cde:	881b      	ldrh	r3, [r3, #0]
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d13c      	bne.n	8002d62 <HCD_RXQLVL_IRQHandler+0x19a>
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d039      	beq.n	8002d62 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002cee:	69bb      	ldr	r3, [r7, #24]
 8002cf0:	015a      	lsls	r2, r3, #5
 8002cf2:	6a3b      	ldr	r3, [r7, #32]
 8002cf4:	4413      	add	r3, r2
 8002cf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002d04:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002d0c:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002d0e:	69bb      	ldr	r3, [r7, #24]
 8002d10:	015a      	lsls	r2, r3, #5
 8002d12:	6a3b      	ldr	r3, [r7, #32]
 8002d14:	4413      	add	r3, r2
 8002d16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002d20:	687a      	ldr	r2, [r7, #4]
 8002d22:	69bb      	ldr	r3, [r7, #24]
 8002d24:	212c      	movs	r1, #44	; 0x2c
 8002d26:	fb01 f303 	mul.w	r3, r1, r3
 8002d2a:	4413      	add	r3, r2
 8002d2c:	3354      	adds	r3, #84	; 0x54
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	f083 0301 	eor.w	r3, r3, #1
 8002d34:	b2d8      	uxtb	r0, r3
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	69bb      	ldr	r3, [r7, #24]
 8002d3a:	212c      	movs	r1, #44	; 0x2c
 8002d3c:	fb01 f303 	mul.w	r3, r1, r3
 8002d40:	4413      	add	r3, r2
 8002d42:	3354      	adds	r3, #84	; 0x54
 8002d44:	4602      	mov	r2, r0
 8002d46:	701a      	strb	r2, [r3, #0]
      break;
 8002d48:	e00b      	b.n	8002d62 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	69bb      	ldr	r3, [r7, #24]
 8002d4e:	212c      	movs	r1, #44	; 0x2c
 8002d50:	fb01 f303 	mul.w	r3, r1, r3
 8002d54:	4413      	add	r3, r2
 8002d56:	3360      	adds	r3, #96	; 0x60
 8002d58:	2204      	movs	r2, #4
 8002d5a:	701a      	strb	r2, [r3, #0]
      break;
 8002d5c:	e001      	b.n	8002d62 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002d5e:	bf00      	nop
 8002d60:	e000      	b.n	8002d64 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002d62:	bf00      	nop
  }
}
 8002d64:	bf00      	nop
 8002d66:	3728      	adds	r7, #40	; 0x28
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}

08002d6c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b086      	sub	sp, #24
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002d98:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	f003 0302 	and.w	r3, r3, #2
 8002da0:	2b02      	cmp	r3, #2
 8002da2:	d10b      	bne.n	8002dbc <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	f003 0301 	and.w	r3, r3, #1
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d102      	bne.n	8002db4 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f004 fba8 	bl	8007504 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	f043 0302 	orr.w	r3, r3, #2
 8002dba:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	f003 0308 	and.w	r3, r3, #8
 8002dc2:	2b08      	cmp	r3, #8
 8002dc4:	d132      	bne.n	8002e2c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	f043 0308 	orr.w	r3, r3, #8
 8002dcc:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	f003 0304 	and.w	r3, r3, #4
 8002dd4:	2b04      	cmp	r3, #4
 8002dd6:	d126      	bne.n	8002e26 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	699b      	ldr	r3, [r3, #24]
 8002ddc:	2b02      	cmp	r3, #2
 8002dde:	d113      	bne.n	8002e08 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002de6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002dea:	d106      	bne.n	8002dfa <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	2102      	movs	r1, #2
 8002df2:	4618      	mov	r0, r3
 8002df4:	f001 feda 	bl	8004bac <USB_InitFSLSPClkSel>
 8002df8:	e011      	b.n	8002e1e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	2101      	movs	r1, #1
 8002e00:	4618      	mov	r0, r3
 8002e02:	f001 fed3 	bl	8004bac <USB_InitFSLSPClkSel>
 8002e06:	e00a      	b.n	8002e1e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d106      	bne.n	8002e1e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e16:	461a      	mov	r2, r3
 8002e18:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002e1c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f004 fb99 	bl	8007556 <HAL_HCD_PortEnabled_Callback>
 8002e24:	e002      	b.n	8002e2c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f004 fba3 	bl	8007572 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	f003 0320 	and.w	r3, r3, #32
 8002e32:	2b20      	cmp	r3, #32
 8002e34:	d103      	bne.n	8002e3e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	f043 0320 	orr.w	r3, r3, #32
 8002e3c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002e44:	461a      	mov	r2, r3
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	6013      	str	r3, [r2, #0]
}
 8002e4a:	bf00      	nop
 8002e4c:	3718      	adds	r7, #24
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
	...

08002e54 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b084      	sub	sp, #16
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d101      	bne.n	8002e66 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e12b      	b.n	80030be <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d106      	bne.n	8002e80 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f7fd fd82 	bl	8000984 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2224      	movs	r2, #36	; 0x24
 8002e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f022 0201 	bic.w	r2, r2, #1
 8002e96:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ea6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002eb6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002eb8:	f001 f9f4 	bl	80042a4 <HAL_RCC_GetPCLK1Freq>
 8002ebc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	4a81      	ldr	r2, [pc, #516]	; (80030c8 <HAL_I2C_Init+0x274>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d807      	bhi.n	8002ed8 <HAL_I2C_Init+0x84>
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	4a80      	ldr	r2, [pc, #512]	; (80030cc <HAL_I2C_Init+0x278>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	bf94      	ite	ls
 8002ed0:	2301      	movls	r3, #1
 8002ed2:	2300      	movhi	r3, #0
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	e006      	b.n	8002ee6 <HAL_I2C_Init+0x92>
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	4a7d      	ldr	r2, [pc, #500]	; (80030d0 <HAL_I2C_Init+0x27c>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	bf94      	ite	ls
 8002ee0:	2301      	movls	r3, #1
 8002ee2:	2300      	movhi	r3, #0
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d001      	beq.n	8002eee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e0e7      	b.n	80030be <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	4a78      	ldr	r2, [pc, #480]	; (80030d4 <HAL_I2C_Init+0x280>)
 8002ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ef6:	0c9b      	lsrs	r3, r3, #18
 8002ef8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	68ba      	ldr	r2, [r7, #8]
 8002f0a:	430a      	orrs	r2, r1
 8002f0c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	6a1b      	ldr	r3, [r3, #32]
 8002f14:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	4a6a      	ldr	r2, [pc, #424]	; (80030c8 <HAL_I2C_Init+0x274>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d802      	bhi.n	8002f28 <HAL_I2C_Init+0xd4>
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	3301      	adds	r3, #1
 8002f26:	e009      	b.n	8002f3c <HAL_I2C_Init+0xe8>
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002f2e:	fb02 f303 	mul.w	r3, r2, r3
 8002f32:	4a69      	ldr	r2, [pc, #420]	; (80030d8 <HAL_I2C_Init+0x284>)
 8002f34:	fba2 2303 	umull	r2, r3, r2, r3
 8002f38:	099b      	lsrs	r3, r3, #6
 8002f3a:	3301      	adds	r3, #1
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	6812      	ldr	r2, [r2, #0]
 8002f40:	430b      	orrs	r3, r1
 8002f42:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	69db      	ldr	r3, [r3, #28]
 8002f4a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002f4e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	495c      	ldr	r1, [pc, #368]	; (80030c8 <HAL_I2C_Init+0x274>)
 8002f58:	428b      	cmp	r3, r1
 8002f5a:	d819      	bhi.n	8002f90 <HAL_I2C_Init+0x13c>
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	1e59      	subs	r1, r3, #1
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	005b      	lsls	r3, r3, #1
 8002f66:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f6a:	1c59      	adds	r1, r3, #1
 8002f6c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002f70:	400b      	ands	r3, r1
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d00a      	beq.n	8002f8c <HAL_I2C_Init+0x138>
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	1e59      	subs	r1, r3, #1
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	005b      	lsls	r3, r3, #1
 8002f80:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f84:	3301      	adds	r3, #1
 8002f86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f8a:	e051      	b.n	8003030 <HAL_I2C_Init+0x1dc>
 8002f8c:	2304      	movs	r3, #4
 8002f8e:	e04f      	b.n	8003030 <HAL_I2C_Init+0x1dc>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d111      	bne.n	8002fbc <HAL_I2C_Init+0x168>
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	1e58      	subs	r0, r3, #1
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6859      	ldr	r1, [r3, #4]
 8002fa0:	460b      	mov	r3, r1
 8002fa2:	005b      	lsls	r3, r3, #1
 8002fa4:	440b      	add	r3, r1
 8002fa6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002faa:	3301      	adds	r3, #1
 8002fac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	bf0c      	ite	eq
 8002fb4:	2301      	moveq	r3, #1
 8002fb6:	2300      	movne	r3, #0
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	e012      	b.n	8002fe2 <HAL_I2C_Init+0x18e>
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	1e58      	subs	r0, r3, #1
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6859      	ldr	r1, [r3, #4]
 8002fc4:	460b      	mov	r3, r1
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	440b      	add	r3, r1
 8002fca:	0099      	lsls	r1, r3, #2
 8002fcc:	440b      	add	r3, r1
 8002fce:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	bf0c      	ite	eq
 8002fdc:	2301      	moveq	r3, #1
 8002fde:	2300      	movne	r3, #0
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d001      	beq.n	8002fea <HAL_I2C_Init+0x196>
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e022      	b.n	8003030 <HAL_I2C_Init+0x1dc>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d10e      	bne.n	8003010 <HAL_I2C_Init+0x1bc>
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	1e58      	subs	r0, r3, #1
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6859      	ldr	r1, [r3, #4]
 8002ffa:	460b      	mov	r3, r1
 8002ffc:	005b      	lsls	r3, r3, #1
 8002ffe:	440b      	add	r3, r1
 8003000:	fbb0 f3f3 	udiv	r3, r0, r3
 8003004:	3301      	adds	r3, #1
 8003006:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800300a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800300e:	e00f      	b.n	8003030 <HAL_I2C_Init+0x1dc>
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	1e58      	subs	r0, r3, #1
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6859      	ldr	r1, [r3, #4]
 8003018:	460b      	mov	r3, r1
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	440b      	add	r3, r1
 800301e:	0099      	lsls	r1, r3, #2
 8003020:	440b      	add	r3, r1
 8003022:	fbb0 f3f3 	udiv	r3, r0, r3
 8003026:	3301      	adds	r3, #1
 8003028:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800302c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003030:	6879      	ldr	r1, [r7, #4]
 8003032:	6809      	ldr	r1, [r1, #0]
 8003034:	4313      	orrs	r3, r2
 8003036:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	69da      	ldr	r2, [r3, #28]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6a1b      	ldr	r3, [r3, #32]
 800304a:	431a      	orrs	r2, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	430a      	orrs	r2, r1
 8003052:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800305e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	6911      	ldr	r1, [r2, #16]
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	68d2      	ldr	r2, [r2, #12]
 800306a:	4311      	orrs	r1, r2
 800306c:	687a      	ldr	r2, [r7, #4]
 800306e:	6812      	ldr	r2, [r2, #0]
 8003070:	430b      	orrs	r3, r1
 8003072:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	68db      	ldr	r3, [r3, #12]
 800307a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	695a      	ldr	r2, [r3, #20]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	699b      	ldr	r3, [r3, #24]
 8003086:	431a      	orrs	r2, r3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	430a      	orrs	r2, r1
 800308e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f042 0201 	orr.w	r2, r2, #1
 800309e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2200      	movs	r2, #0
 80030a4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2220      	movs	r2, #32
 80030aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2200      	movs	r2, #0
 80030b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2200      	movs	r2, #0
 80030b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80030bc:	2300      	movs	r3, #0
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3710      	adds	r7, #16
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	000186a0 	.word	0x000186a0
 80030cc:	001e847f 	.word	0x001e847f
 80030d0:	003d08ff 	.word	0x003d08ff
 80030d4:	431bde83 	.word	0x431bde83
 80030d8:	10624dd3 	.word	0x10624dd3

080030dc <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b088      	sub	sp, #32
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d101      	bne.n	80030ee <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e128      	b.n	8003340 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d109      	bne.n	800310e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2200      	movs	r2, #0
 80030fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a90      	ldr	r2, [pc, #576]	; (8003348 <HAL_I2S_Init+0x26c>)
 8003106:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f7fd fc83 	bl	8000a14 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2202      	movs	r2, #2
 8003112:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	69db      	ldr	r3, [r3, #28]
 800311c:	687a      	ldr	r2, [r7, #4]
 800311e:	6812      	ldr	r2, [r2, #0]
 8003120:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003124:	f023 030f 	bic.w	r3, r3, #15
 8003128:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	2202      	movs	r2, #2
 8003130:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	695b      	ldr	r3, [r3, #20]
 8003136:	2b02      	cmp	r3, #2
 8003138:	d060      	beq.n	80031fc <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	68db      	ldr	r3, [r3, #12]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d102      	bne.n	8003148 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003142:	2310      	movs	r3, #16
 8003144:	617b      	str	r3, [r7, #20]
 8003146:	e001      	b.n	800314c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003148:	2320      	movs	r3, #32
 800314a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	2b20      	cmp	r3, #32
 8003152:	d802      	bhi.n	800315a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	005b      	lsls	r3, r3, #1
 8003158:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800315a:	2001      	movs	r0, #1
 800315c:	f001 f998 	bl	8004490 <HAL_RCCEx_GetPeriphCLKFreq>
 8003160:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	691b      	ldr	r3, [r3, #16]
 8003166:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800316a:	d125      	bne.n	80031b8 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d010      	beq.n	8003196 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	68fa      	ldr	r2, [r7, #12]
 800317a:	fbb2 f2f3 	udiv	r2, r2, r3
 800317e:	4613      	mov	r3, r2
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	4413      	add	r3, r2
 8003184:	005b      	lsls	r3, r3, #1
 8003186:	461a      	mov	r2, r3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	695b      	ldr	r3, [r3, #20]
 800318c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003190:	3305      	adds	r3, #5
 8003192:	613b      	str	r3, [r7, #16]
 8003194:	e01f      	b.n	80031d6 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	00db      	lsls	r3, r3, #3
 800319a:	68fa      	ldr	r2, [r7, #12]
 800319c:	fbb2 f2f3 	udiv	r2, r2, r3
 80031a0:	4613      	mov	r3, r2
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	4413      	add	r3, r2
 80031a6:	005b      	lsls	r3, r3, #1
 80031a8:	461a      	mov	r2, r3
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	695b      	ldr	r3, [r3, #20]
 80031ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80031b2:	3305      	adds	r3, #5
 80031b4:	613b      	str	r3, [r7, #16]
 80031b6:	e00e      	b.n	80031d6 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80031b8:	68fa      	ldr	r2, [r7, #12]
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80031c0:	4613      	mov	r3, r2
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	4413      	add	r3, r2
 80031c6:	005b      	lsls	r3, r3, #1
 80031c8:	461a      	mov	r2, r3
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	695b      	ldr	r3, [r3, #20]
 80031ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80031d2:	3305      	adds	r3, #5
 80031d4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	4a5c      	ldr	r2, [pc, #368]	; (800334c <HAL_I2S_Init+0x270>)
 80031da:	fba2 2303 	umull	r2, r3, r2, r3
 80031de:	08db      	lsrs	r3, r3, #3
 80031e0:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	f003 0301 	and.w	r3, r3, #1
 80031e8:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80031ea:	693a      	ldr	r2, [r7, #16]
 80031ec:	69bb      	ldr	r3, [r7, #24]
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	085b      	lsrs	r3, r3, #1
 80031f2:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80031f4:	69bb      	ldr	r3, [r7, #24]
 80031f6:	021b      	lsls	r3, r3, #8
 80031f8:	61bb      	str	r3, [r7, #24]
 80031fa:	e003      	b.n	8003204 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80031fc:	2302      	movs	r3, #2
 80031fe:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003200:	2300      	movs	r3, #0
 8003202:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	2b01      	cmp	r3, #1
 8003208:	d902      	bls.n	8003210 <HAL_I2S_Init+0x134>
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	2bff      	cmp	r3, #255	; 0xff
 800320e:	d907      	bls.n	8003220 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003214:	f043 0210 	orr.w	r2, r3, #16
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e08f      	b.n	8003340 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	691a      	ldr	r2, [r3, #16]
 8003224:	69bb      	ldr	r3, [r7, #24]
 8003226:	ea42 0103 	orr.w	r1, r2, r3
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	69fa      	ldr	r2, [r7, #28]
 8003230:	430a      	orrs	r2, r1
 8003232:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	69db      	ldr	r3, [r3, #28]
 800323a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800323e:	f023 030f 	bic.w	r3, r3, #15
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	6851      	ldr	r1, [r2, #4]
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	6892      	ldr	r2, [r2, #8]
 800324a:	4311      	orrs	r1, r2
 800324c:	687a      	ldr	r2, [r7, #4]
 800324e:	68d2      	ldr	r2, [r2, #12]
 8003250:	4311      	orrs	r1, r2
 8003252:	687a      	ldr	r2, [r7, #4]
 8003254:	6992      	ldr	r2, [r2, #24]
 8003256:	430a      	orrs	r2, r1
 8003258:	431a      	orrs	r2, r3
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003262:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6a1b      	ldr	r3, [r3, #32]
 8003268:	2b01      	cmp	r3, #1
 800326a:	d161      	bne.n	8003330 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	4a38      	ldr	r2, [pc, #224]	; (8003350 <HAL_I2S_Init+0x274>)
 8003270:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a37      	ldr	r2, [pc, #220]	; (8003354 <HAL_I2S_Init+0x278>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d101      	bne.n	8003280 <HAL_I2S_Init+0x1a4>
 800327c:	4b36      	ldr	r3, [pc, #216]	; (8003358 <HAL_I2S_Init+0x27c>)
 800327e:	e001      	b.n	8003284 <HAL_I2S_Init+0x1a8>
 8003280:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003284:	69db      	ldr	r3, [r3, #28]
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	6812      	ldr	r2, [r2, #0]
 800328a:	4932      	ldr	r1, [pc, #200]	; (8003354 <HAL_I2S_Init+0x278>)
 800328c:	428a      	cmp	r2, r1
 800328e:	d101      	bne.n	8003294 <HAL_I2S_Init+0x1b8>
 8003290:	4a31      	ldr	r2, [pc, #196]	; (8003358 <HAL_I2S_Init+0x27c>)
 8003292:	e001      	b.n	8003298 <HAL_I2S_Init+0x1bc>
 8003294:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003298:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800329c:	f023 030f 	bic.w	r3, r3, #15
 80032a0:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a2b      	ldr	r2, [pc, #172]	; (8003354 <HAL_I2S_Init+0x278>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d101      	bne.n	80032b0 <HAL_I2S_Init+0x1d4>
 80032ac:	4b2a      	ldr	r3, [pc, #168]	; (8003358 <HAL_I2S_Init+0x27c>)
 80032ae:	e001      	b.n	80032b4 <HAL_I2S_Init+0x1d8>
 80032b0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80032b4:	2202      	movs	r2, #2
 80032b6:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a25      	ldr	r2, [pc, #148]	; (8003354 <HAL_I2S_Init+0x278>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d101      	bne.n	80032c6 <HAL_I2S_Init+0x1ea>
 80032c2:	4b25      	ldr	r3, [pc, #148]	; (8003358 <HAL_I2S_Init+0x27c>)
 80032c4:	e001      	b.n	80032ca <HAL_I2S_Init+0x1ee>
 80032c6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80032ca:	69db      	ldr	r3, [r3, #28]
 80032cc:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032d6:	d003      	beq.n	80032e0 <HAL_I2S_Init+0x204>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d103      	bne.n	80032e8 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80032e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032e4:	613b      	str	r3, [r7, #16]
 80032e6:	e001      	b.n	80032ec <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80032e8:	2300      	movs	r3, #0
 80032ea:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80032f6:	4313      	orrs	r3, r2
 80032f8:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	68db      	ldr	r3, [r3, #12]
 80032fe:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003300:	4313      	orrs	r3, r2
 8003302:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	699b      	ldr	r3, [r3, #24]
 8003308:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800330a:	4313      	orrs	r3, r2
 800330c:	b29a      	uxth	r2, r3
 800330e:	897b      	ldrh	r3, [r7, #10]
 8003310:	4313      	orrs	r3, r2
 8003312:	b29b      	uxth	r3, r3
 8003314:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003318:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a0d      	ldr	r2, [pc, #52]	; (8003354 <HAL_I2S_Init+0x278>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d101      	bne.n	8003328 <HAL_I2S_Init+0x24c>
 8003324:	4b0c      	ldr	r3, [pc, #48]	; (8003358 <HAL_I2S_Init+0x27c>)
 8003326:	e001      	b.n	800332c <HAL_I2S_Init+0x250>
 8003328:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800332c:	897a      	ldrh	r2, [r7, #10]
 800332e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2200      	movs	r2, #0
 8003334:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2201      	movs	r2, #1
 800333a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800333e:	2300      	movs	r3, #0
}
 8003340:	4618      	mov	r0, r3
 8003342:	3720      	adds	r7, #32
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}
 8003348:	0800344d 	.word	0x0800344d
 800334c:	cccccccd 	.word	0xcccccccd
 8003350:	08003561 	.word	0x08003561
 8003354:	40003800 	.word	0x40003800
 8003358:	40003400 	.word	0x40003400

0800335c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800335c:	b480      	push	{r7}
 800335e:	b083      	sub	sp, #12
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003364:	bf00      	nop
 8003366:	370c      	adds	r7, #12
 8003368:	46bd      	mov	sp, r7
 800336a:	bc80      	pop	{r7}
 800336c:	4770      	bx	lr

0800336e <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800336e:	b480      	push	{r7}
 8003370:	b083      	sub	sp, #12
 8003372:	af00      	add	r7, sp, #0
 8003374:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003376:	bf00      	nop
 8003378:	370c      	adds	r7, #12
 800337a:	46bd      	mov	sp, r7
 800337c:	bc80      	pop	{r7}
 800337e:	4770      	bx	lr

08003380 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003380:	b480      	push	{r7}
 8003382:	b083      	sub	sp, #12
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003388:	bf00      	nop
 800338a:	370c      	adds	r7, #12
 800338c:	46bd      	mov	sp, r7
 800338e:	bc80      	pop	{r7}
 8003390:	4770      	bx	lr

08003392 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003392:	b580      	push	{r7, lr}
 8003394:	b082      	sub	sp, #8
 8003396:	af00      	add	r7, sp, #0
 8003398:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339e:	881a      	ldrh	r2, [r3, #0]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033aa:	1c9a      	adds	r2, r3, #2
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033b4:	b29b      	uxth	r3, r3
 80033b6:	3b01      	subs	r3, #1
 80033b8:	b29a      	uxth	r2, r3
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033c2:	b29b      	uxth	r3, r3
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d10e      	bne.n	80033e6 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	685a      	ldr	r2, [r3, #4]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80033d6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2201      	movs	r2, #1
 80033dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f7ff ffbb 	bl	800335c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80033e6:	bf00      	nop
 80033e8:	3708      	adds	r7, #8
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}

080033ee <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80033ee:	b580      	push	{r7, lr}
 80033f0:	b082      	sub	sp, #8
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	68da      	ldr	r2, [r3, #12]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003400:	b292      	uxth	r2, r2
 8003402:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003408:	1c9a      	adds	r2, r3, #2
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003412:	b29b      	uxth	r3, r3
 8003414:	3b01      	subs	r3, #1
 8003416:	b29a      	uxth	r2, r3
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003420:	b29b      	uxth	r3, r3
 8003422:	2b00      	cmp	r3, #0
 8003424:	d10e      	bne.n	8003444 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	685a      	ldr	r2, [r3, #4]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003434:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2201      	movs	r2, #1
 800343a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f7ff ff95 	bl	800336e <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003444:	bf00      	nop
 8003446:	3708      	adds	r7, #8
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}

0800344c <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b086      	sub	sp, #24
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003462:	b2db      	uxtb	r3, r3
 8003464:	2b04      	cmp	r3, #4
 8003466:	d13a      	bne.n	80034de <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	f003 0301 	and.w	r3, r3, #1
 800346e:	2b01      	cmp	r3, #1
 8003470:	d109      	bne.n	8003486 <I2S_IRQHandler+0x3a>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800347c:	2b40      	cmp	r3, #64	; 0x40
 800347e:	d102      	bne.n	8003486 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f7ff ffb4 	bl	80033ee <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800348c:	2b40      	cmp	r3, #64	; 0x40
 800348e:	d126      	bne.n	80034de <I2S_IRQHandler+0x92>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	f003 0320 	and.w	r3, r3, #32
 800349a:	2b20      	cmp	r3, #32
 800349c:	d11f      	bne.n	80034de <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	685a      	ldr	r2, [r3, #4]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80034ac:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80034ae:	2300      	movs	r3, #0
 80034b0:	613b      	str	r3, [r7, #16]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	613b      	str	r3, [r7, #16]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	613b      	str	r3, [r7, #16]
 80034c2:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2201      	movs	r2, #1
 80034c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034d0:	f043 0202 	orr.w	r2, r3, #2
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	f7ff ff51 	bl	8003380 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	2b03      	cmp	r3, #3
 80034e8:	d136      	bne.n	8003558 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	f003 0302 	and.w	r3, r3, #2
 80034f0:	2b02      	cmp	r3, #2
 80034f2:	d109      	bne.n	8003508 <I2S_IRQHandler+0xbc>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034fe:	2b80      	cmp	r3, #128	; 0x80
 8003500:	d102      	bne.n	8003508 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f7ff ff45 	bl	8003392 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	f003 0308 	and.w	r3, r3, #8
 800350e:	2b08      	cmp	r3, #8
 8003510:	d122      	bne.n	8003558 <I2S_IRQHandler+0x10c>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	f003 0320 	and.w	r3, r3, #32
 800351c:	2b20      	cmp	r3, #32
 800351e:	d11b      	bne.n	8003558 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	685a      	ldr	r2, [r3, #4]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800352e:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003530:	2300      	movs	r3, #0
 8003532:	60fb      	str	r3, [r7, #12]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	60fb      	str	r3, [r7, #12]
 800353c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2201      	movs	r2, #1
 8003542:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800354a:	f043 0204 	orr.w	r2, r3, #4
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f7ff ff14 	bl	8003380 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003558:	bf00      	nop
 800355a:	3718      	adds	r7, #24
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}

08003560 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b088      	sub	sp, #32
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4aa2      	ldr	r2, [pc, #648]	; (8003800 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d101      	bne.n	800357e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800357a:	4ba2      	ldr	r3, [pc, #648]	; (8003804 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800357c:	e001      	b.n	8003582 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800357e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a9b      	ldr	r2, [pc, #620]	; (8003800 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d101      	bne.n	800359c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003598:	4b9a      	ldr	r3, [pc, #616]	; (8003804 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800359a:	e001      	b.n	80035a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800359c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035ac:	d004      	beq.n	80035b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	f040 8099 	bne.w	80036ea <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	f003 0302 	and.w	r3, r3, #2
 80035be:	2b02      	cmp	r3, #2
 80035c0:	d107      	bne.n	80035d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d002      	beq.n	80035d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f000 f924 	bl	800381a <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80035d2:	69bb      	ldr	r3, [r7, #24]
 80035d4:	f003 0301 	and.w	r3, r3, #1
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d107      	bne.n	80035ec <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d002      	beq.n	80035ec <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f000 f9c6 	bl	8003978 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80035ec:	69bb      	ldr	r3, [r7, #24]
 80035ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035f2:	2b40      	cmp	r3, #64	; 0x40
 80035f4:	d13a      	bne.n	800366c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	f003 0320 	and.w	r3, r3, #32
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d035      	beq.n	800366c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a7e      	ldr	r2, [pc, #504]	; (8003800 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d101      	bne.n	800360e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800360a:	4b7e      	ldr	r3, [pc, #504]	; (8003804 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800360c:	e001      	b.n	8003612 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800360e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003612:	685a      	ldr	r2, [r3, #4]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4979      	ldr	r1, [pc, #484]	; (8003800 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800361a:	428b      	cmp	r3, r1
 800361c:	d101      	bne.n	8003622 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800361e:	4b79      	ldr	r3, [pc, #484]	; (8003804 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003620:	e001      	b.n	8003626 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003622:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003626:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800362a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	685a      	ldr	r2, [r3, #4]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800363a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800363c:	2300      	movs	r3, #0
 800363e:	60fb      	str	r3, [r7, #12]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	60fb      	str	r3, [r7, #12]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	60fb      	str	r3, [r7, #12]
 8003650:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2201      	movs	r2, #1
 8003656:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800365e:	f043 0202 	orr.w	r2, r3, #2
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f7ff fe8a 	bl	8003380 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800366c:	69fb      	ldr	r3, [r7, #28]
 800366e:	f003 0308 	and.w	r3, r3, #8
 8003672:	2b08      	cmp	r3, #8
 8003674:	f040 80be 	bne.w	80037f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	f003 0320 	and.w	r3, r3, #32
 800367e:	2b00      	cmp	r3, #0
 8003680:	f000 80b8 	beq.w	80037f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	685a      	ldr	r2, [r3, #4]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003692:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a59      	ldr	r2, [pc, #356]	; (8003800 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d101      	bne.n	80036a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800369e:	4b59      	ldr	r3, [pc, #356]	; (8003804 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80036a0:	e001      	b.n	80036a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80036a2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036a6:	685a      	ldr	r2, [r3, #4]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4954      	ldr	r1, [pc, #336]	; (8003800 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80036ae:	428b      	cmp	r3, r1
 80036b0:	d101      	bne.n	80036b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80036b2:	4b54      	ldr	r3, [pc, #336]	; (8003804 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80036b4:	e001      	b.n	80036ba <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80036b6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036ba:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80036be:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80036c0:	2300      	movs	r3, #0
 80036c2:	60bb      	str	r3, [r7, #8]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	60bb      	str	r3, [r7, #8]
 80036cc:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2201      	movs	r2, #1
 80036d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036da:	f043 0204 	orr.w	r2, r3, #4
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f7ff fe4c 	bl	8003380 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80036e8:	e084      	b.n	80037f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80036ea:	69bb      	ldr	r3, [r7, #24]
 80036ec:	f003 0302 	and.w	r3, r3, #2
 80036f0:	2b02      	cmp	r3, #2
 80036f2:	d107      	bne.n	8003704 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d002      	beq.n	8003704 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f000 f8bc 	bl	800387c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003704:	69fb      	ldr	r3, [r7, #28]
 8003706:	f003 0301 	and.w	r3, r3, #1
 800370a:	2b01      	cmp	r3, #1
 800370c:	d107      	bne.n	800371e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003714:	2b00      	cmp	r3, #0
 8003716:	d002      	beq.n	800371e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	f000 f8fb 	bl	8003914 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800371e:	69fb      	ldr	r3, [r7, #28]
 8003720:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003724:	2b40      	cmp	r3, #64	; 0x40
 8003726:	d12f      	bne.n	8003788 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	f003 0320 	and.w	r3, r3, #32
 800372e:	2b00      	cmp	r3, #0
 8003730:	d02a      	beq.n	8003788 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	685a      	ldr	r2, [r3, #4]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003740:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a2e      	ldr	r2, [pc, #184]	; (8003800 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d101      	bne.n	8003750 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800374c:	4b2d      	ldr	r3, [pc, #180]	; (8003804 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800374e:	e001      	b.n	8003754 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003750:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003754:	685a      	ldr	r2, [r3, #4]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4929      	ldr	r1, [pc, #164]	; (8003800 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800375c:	428b      	cmp	r3, r1
 800375e:	d101      	bne.n	8003764 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003760:	4b28      	ldr	r3, [pc, #160]	; (8003804 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003762:	e001      	b.n	8003768 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003764:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003768:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800376c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2201      	movs	r2, #1
 8003772:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800377a:	f043 0202 	orr.w	r2, r3, #2
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f7ff fdfc 	bl	8003380 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003788:	69bb      	ldr	r3, [r7, #24]
 800378a:	f003 0308 	and.w	r3, r3, #8
 800378e:	2b08      	cmp	r3, #8
 8003790:	d131      	bne.n	80037f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	f003 0320 	and.w	r3, r3, #32
 8003798:	2b00      	cmp	r3, #0
 800379a:	d02c      	beq.n	80037f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a17      	ldr	r2, [pc, #92]	; (8003800 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d101      	bne.n	80037aa <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80037a6:	4b17      	ldr	r3, [pc, #92]	; (8003804 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80037a8:	e001      	b.n	80037ae <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80037aa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037ae:	685a      	ldr	r2, [r3, #4]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4912      	ldr	r1, [pc, #72]	; (8003800 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80037b6:	428b      	cmp	r3, r1
 80037b8:	d101      	bne.n	80037be <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 80037ba:	4b12      	ldr	r3, [pc, #72]	; (8003804 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80037bc:	e001      	b.n	80037c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 80037be:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037c2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80037c6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	685a      	ldr	r2, [r3, #4]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80037d6:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2201      	movs	r2, #1
 80037dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037e4:	f043 0204 	orr.w	r2, r3, #4
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	f7ff fdc7 	bl	8003380 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80037f2:	e000      	b.n	80037f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80037f4:	bf00      	nop
}
 80037f6:	bf00      	nop
 80037f8:	3720      	adds	r7, #32
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	bf00      	nop
 8003800:	40003800 	.word	0x40003800
 8003804:	40003400 	.word	0x40003400

08003808 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003808:	b480      	push	{r7}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003810:	bf00      	nop
 8003812:	370c      	adds	r7, #12
 8003814:	46bd      	mov	sp, r7
 8003816:	bc80      	pop	{r7}
 8003818:	4770      	bx	lr

0800381a <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800381a:	b580      	push	{r7, lr}
 800381c:	b082      	sub	sp, #8
 800381e:	af00      	add	r7, sp, #0
 8003820:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003826:	1c99      	adds	r1, r3, #2
 8003828:	687a      	ldr	r2, [r7, #4]
 800382a:	6251      	str	r1, [r2, #36]	; 0x24
 800382c:	881a      	ldrh	r2, [r3, #0]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003838:	b29b      	uxth	r3, r3
 800383a:	3b01      	subs	r3, #1
 800383c:	b29a      	uxth	r2, r3
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003846:	b29b      	uxth	r3, r3
 8003848:	2b00      	cmp	r3, #0
 800384a:	d113      	bne.n	8003874 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	685a      	ldr	r2, [r3, #4]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800385a:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003860:	b29b      	uxth	r3, r3
 8003862:	2b00      	cmp	r3, #0
 8003864:	d106      	bne.n	8003874 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2201      	movs	r2, #1
 800386a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f7ff ffca 	bl	8003808 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003874:	bf00      	nop
 8003876:	3708      	adds	r7, #8
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}

0800387c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b082      	sub	sp, #8
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003888:	1c99      	adds	r1, r3, #2
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	6251      	str	r1, [r2, #36]	; 0x24
 800388e:	8819      	ldrh	r1, [r3, #0]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a1d      	ldr	r2, [pc, #116]	; (800390c <I2SEx_TxISR_I2SExt+0x90>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d101      	bne.n	800389e <I2SEx_TxISR_I2SExt+0x22>
 800389a:	4b1d      	ldr	r3, [pc, #116]	; (8003910 <I2SEx_TxISR_I2SExt+0x94>)
 800389c:	e001      	b.n	80038a2 <I2SEx_TxISR_I2SExt+0x26>
 800389e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038a2:	460a      	mov	r2, r1
 80038a4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	3b01      	subs	r3, #1
 80038ae:	b29a      	uxth	r2, r3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d121      	bne.n	8003902 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a12      	ldr	r2, [pc, #72]	; (800390c <I2SEx_TxISR_I2SExt+0x90>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d101      	bne.n	80038cc <I2SEx_TxISR_I2SExt+0x50>
 80038c8:	4b11      	ldr	r3, [pc, #68]	; (8003910 <I2SEx_TxISR_I2SExt+0x94>)
 80038ca:	e001      	b.n	80038d0 <I2SEx_TxISR_I2SExt+0x54>
 80038cc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038d0:	685a      	ldr	r2, [r3, #4]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	490d      	ldr	r1, [pc, #52]	; (800390c <I2SEx_TxISR_I2SExt+0x90>)
 80038d8:	428b      	cmp	r3, r1
 80038da:	d101      	bne.n	80038e0 <I2SEx_TxISR_I2SExt+0x64>
 80038dc:	4b0c      	ldr	r3, [pc, #48]	; (8003910 <I2SEx_TxISR_I2SExt+0x94>)
 80038de:	e001      	b.n	80038e4 <I2SEx_TxISR_I2SExt+0x68>
 80038e0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038e4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80038e8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80038ee:	b29b      	uxth	r3, r3
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d106      	bne.n	8003902 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2201      	movs	r2, #1
 80038f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f7ff ff83 	bl	8003808 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003902:	bf00      	nop
 8003904:	3708      	adds	r7, #8
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
 800390a:	bf00      	nop
 800390c:	40003800 	.word	0x40003800
 8003910:	40003400 	.word	0x40003400

08003914 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b082      	sub	sp, #8
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	68d8      	ldr	r0, [r3, #12]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003926:	1c99      	adds	r1, r3, #2
 8003928:	687a      	ldr	r2, [r7, #4]
 800392a:	62d1      	str	r1, [r2, #44]	; 0x2c
 800392c:	b282      	uxth	r2, r0
 800392e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003934:	b29b      	uxth	r3, r3
 8003936:	3b01      	subs	r3, #1
 8003938:	b29a      	uxth	r2, r3
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003942:	b29b      	uxth	r3, r3
 8003944:	2b00      	cmp	r3, #0
 8003946:	d113      	bne.n	8003970 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	685a      	ldr	r2, [r3, #4]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003956:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800395c:	b29b      	uxth	r3, r3
 800395e:	2b00      	cmp	r3, #0
 8003960:	d106      	bne.n	8003970 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2201      	movs	r2, #1
 8003966:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f7ff ff4c 	bl	8003808 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003970:	bf00      	nop
 8003972:	3708      	adds	r7, #8
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}

08003978 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b082      	sub	sp, #8
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a20      	ldr	r2, [pc, #128]	; (8003a08 <I2SEx_RxISR_I2SExt+0x90>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d101      	bne.n	800398e <I2SEx_RxISR_I2SExt+0x16>
 800398a:	4b20      	ldr	r3, [pc, #128]	; (8003a0c <I2SEx_RxISR_I2SExt+0x94>)
 800398c:	e001      	b.n	8003992 <I2SEx_RxISR_I2SExt+0x1a>
 800398e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003992:	68d8      	ldr	r0, [r3, #12]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003998:	1c99      	adds	r1, r3, #2
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	62d1      	str	r1, [r2, #44]	; 0x2c
 800399e:	b282      	uxth	r2, r0
 80039a0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80039a6:	b29b      	uxth	r3, r3
 80039a8:	3b01      	subs	r3, #1
 80039aa:	b29a      	uxth	r2, r3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80039b4:	b29b      	uxth	r3, r3
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d121      	bne.n	80039fe <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a12      	ldr	r2, [pc, #72]	; (8003a08 <I2SEx_RxISR_I2SExt+0x90>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d101      	bne.n	80039c8 <I2SEx_RxISR_I2SExt+0x50>
 80039c4:	4b11      	ldr	r3, [pc, #68]	; (8003a0c <I2SEx_RxISR_I2SExt+0x94>)
 80039c6:	e001      	b.n	80039cc <I2SEx_RxISR_I2SExt+0x54>
 80039c8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039cc:	685a      	ldr	r2, [r3, #4]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	490d      	ldr	r1, [pc, #52]	; (8003a08 <I2SEx_RxISR_I2SExt+0x90>)
 80039d4:	428b      	cmp	r3, r1
 80039d6:	d101      	bne.n	80039dc <I2SEx_RxISR_I2SExt+0x64>
 80039d8:	4b0c      	ldr	r3, [pc, #48]	; (8003a0c <I2SEx_RxISR_I2SExt+0x94>)
 80039da:	e001      	b.n	80039e0 <I2SEx_RxISR_I2SExt+0x68>
 80039dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039e0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80039e4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d106      	bne.n	80039fe <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	f7ff ff05 	bl	8003808 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80039fe:	bf00      	nop
 8003a00:	3708      	adds	r7, #8
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	bf00      	nop
 8003a08:	40003800 	.word	0x40003800
 8003a0c:	40003400 	.word	0x40003400

08003a10 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b086      	sub	sp, #24
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d101      	bne.n	8003a22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e264      	b.n	8003eec <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0301 	and.w	r3, r3, #1
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d075      	beq.n	8003b1a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a2e:	4ba3      	ldr	r3, [pc, #652]	; (8003cbc <HAL_RCC_OscConfig+0x2ac>)
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	f003 030c 	and.w	r3, r3, #12
 8003a36:	2b04      	cmp	r3, #4
 8003a38:	d00c      	beq.n	8003a54 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a3a:	4ba0      	ldr	r3, [pc, #640]	; (8003cbc <HAL_RCC_OscConfig+0x2ac>)
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a42:	2b08      	cmp	r3, #8
 8003a44:	d112      	bne.n	8003a6c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a46:	4b9d      	ldr	r3, [pc, #628]	; (8003cbc <HAL_RCC_OscConfig+0x2ac>)
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a52:	d10b      	bne.n	8003a6c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a54:	4b99      	ldr	r3, [pc, #612]	; (8003cbc <HAL_RCC_OscConfig+0x2ac>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d05b      	beq.n	8003b18 <HAL_RCC_OscConfig+0x108>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d157      	bne.n	8003b18 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e23f      	b.n	8003eec <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a74:	d106      	bne.n	8003a84 <HAL_RCC_OscConfig+0x74>
 8003a76:	4b91      	ldr	r3, [pc, #580]	; (8003cbc <HAL_RCC_OscConfig+0x2ac>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a90      	ldr	r2, [pc, #576]	; (8003cbc <HAL_RCC_OscConfig+0x2ac>)
 8003a7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a80:	6013      	str	r3, [r2, #0]
 8003a82:	e01d      	b.n	8003ac0 <HAL_RCC_OscConfig+0xb0>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a8c:	d10c      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x98>
 8003a8e:	4b8b      	ldr	r3, [pc, #556]	; (8003cbc <HAL_RCC_OscConfig+0x2ac>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a8a      	ldr	r2, [pc, #552]	; (8003cbc <HAL_RCC_OscConfig+0x2ac>)
 8003a94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a98:	6013      	str	r3, [r2, #0]
 8003a9a:	4b88      	ldr	r3, [pc, #544]	; (8003cbc <HAL_RCC_OscConfig+0x2ac>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a87      	ldr	r2, [pc, #540]	; (8003cbc <HAL_RCC_OscConfig+0x2ac>)
 8003aa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003aa4:	6013      	str	r3, [r2, #0]
 8003aa6:	e00b      	b.n	8003ac0 <HAL_RCC_OscConfig+0xb0>
 8003aa8:	4b84      	ldr	r3, [pc, #528]	; (8003cbc <HAL_RCC_OscConfig+0x2ac>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a83      	ldr	r2, [pc, #524]	; (8003cbc <HAL_RCC_OscConfig+0x2ac>)
 8003aae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ab2:	6013      	str	r3, [r2, #0]
 8003ab4:	4b81      	ldr	r3, [pc, #516]	; (8003cbc <HAL_RCC_OscConfig+0x2ac>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a80      	ldr	r2, [pc, #512]	; (8003cbc <HAL_RCC_OscConfig+0x2ac>)
 8003aba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003abe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d013      	beq.n	8003af0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ac8:	f7fd f968 	bl	8000d9c <HAL_GetTick>
 8003acc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ace:	e008      	b.n	8003ae2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ad0:	f7fd f964 	bl	8000d9c <HAL_GetTick>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	2b64      	cmp	r3, #100	; 0x64
 8003adc:	d901      	bls.n	8003ae2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	e204      	b.n	8003eec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ae2:	4b76      	ldr	r3, [pc, #472]	; (8003cbc <HAL_RCC_OscConfig+0x2ac>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d0f0      	beq.n	8003ad0 <HAL_RCC_OscConfig+0xc0>
 8003aee:	e014      	b.n	8003b1a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003af0:	f7fd f954 	bl	8000d9c <HAL_GetTick>
 8003af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003af6:	e008      	b.n	8003b0a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003af8:	f7fd f950 	bl	8000d9c <HAL_GetTick>
 8003afc:	4602      	mov	r2, r0
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	2b64      	cmp	r3, #100	; 0x64
 8003b04:	d901      	bls.n	8003b0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b06:	2303      	movs	r3, #3
 8003b08:	e1f0      	b.n	8003eec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b0a:	4b6c      	ldr	r3, [pc, #432]	; (8003cbc <HAL_RCC_OscConfig+0x2ac>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d1f0      	bne.n	8003af8 <HAL_RCC_OscConfig+0xe8>
 8003b16:	e000      	b.n	8003b1a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 0302 	and.w	r3, r3, #2
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d063      	beq.n	8003bee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b26:	4b65      	ldr	r3, [pc, #404]	; (8003cbc <HAL_RCC_OscConfig+0x2ac>)
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	f003 030c 	and.w	r3, r3, #12
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d00b      	beq.n	8003b4a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b32:	4b62      	ldr	r3, [pc, #392]	; (8003cbc <HAL_RCC_OscConfig+0x2ac>)
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b3a:	2b08      	cmp	r3, #8
 8003b3c:	d11c      	bne.n	8003b78 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b3e:	4b5f      	ldr	r3, [pc, #380]	; (8003cbc <HAL_RCC_OscConfig+0x2ac>)
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d116      	bne.n	8003b78 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b4a:	4b5c      	ldr	r3, [pc, #368]	; (8003cbc <HAL_RCC_OscConfig+0x2ac>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 0302 	and.w	r3, r3, #2
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d005      	beq.n	8003b62 <HAL_RCC_OscConfig+0x152>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	68db      	ldr	r3, [r3, #12]
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d001      	beq.n	8003b62 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e1c4      	b.n	8003eec <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b62:	4b56      	ldr	r3, [pc, #344]	; (8003cbc <HAL_RCC_OscConfig+0x2ac>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	691b      	ldr	r3, [r3, #16]
 8003b6e:	00db      	lsls	r3, r3, #3
 8003b70:	4952      	ldr	r1, [pc, #328]	; (8003cbc <HAL_RCC_OscConfig+0x2ac>)
 8003b72:	4313      	orrs	r3, r2
 8003b74:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b76:	e03a      	b.n	8003bee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d020      	beq.n	8003bc2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b80:	4b4f      	ldr	r3, [pc, #316]	; (8003cc0 <HAL_RCC_OscConfig+0x2b0>)
 8003b82:	2201      	movs	r2, #1
 8003b84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b86:	f7fd f909 	bl	8000d9c <HAL_GetTick>
 8003b8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b8c:	e008      	b.n	8003ba0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b8e:	f7fd f905 	bl	8000d9c <HAL_GetTick>
 8003b92:	4602      	mov	r2, r0
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	1ad3      	subs	r3, r2, r3
 8003b98:	2b02      	cmp	r3, #2
 8003b9a:	d901      	bls.n	8003ba0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003b9c:	2303      	movs	r3, #3
 8003b9e:	e1a5      	b.n	8003eec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ba0:	4b46      	ldr	r3, [pc, #280]	; (8003cbc <HAL_RCC_OscConfig+0x2ac>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 0302 	and.w	r3, r3, #2
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d0f0      	beq.n	8003b8e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bac:	4b43      	ldr	r3, [pc, #268]	; (8003cbc <HAL_RCC_OscConfig+0x2ac>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	691b      	ldr	r3, [r3, #16]
 8003bb8:	00db      	lsls	r3, r3, #3
 8003bba:	4940      	ldr	r1, [pc, #256]	; (8003cbc <HAL_RCC_OscConfig+0x2ac>)
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	600b      	str	r3, [r1, #0]
 8003bc0:	e015      	b.n	8003bee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bc2:	4b3f      	ldr	r3, [pc, #252]	; (8003cc0 <HAL_RCC_OscConfig+0x2b0>)
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bc8:	f7fd f8e8 	bl	8000d9c <HAL_GetTick>
 8003bcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bce:	e008      	b.n	8003be2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bd0:	f7fd f8e4 	bl	8000d9c <HAL_GetTick>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	2b02      	cmp	r3, #2
 8003bdc:	d901      	bls.n	8003be2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003bde:	2303      	movs	r3, #3
 8003be0:	e184      	b.n	8003eec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003be2:	4b36      	ldr	r3, [pc, #216]	; (8003cbc <HAL_RCC_OscConfig+0x2ac>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 0302 	and.w	r3, r3, #2
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d1f0      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0308 	and.w	r3, r3, #8
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d030      	beq.n	8003c5c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	695b      	ldr	r3, [r3, #20]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d016      	beq.n	8003c30 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c02:	4b30      	ldr	r3, [pc, #192]	; (8003cc4 <HAL_RCC_OscConfig+0x2b4>)
 8003c04:	2201      	movs	r2, #1
 8003c06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c08:	f7fd f8c8 	bl	8000d9c <HAL_GetTick>
 8003c0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c0e:	e008      	b.n	8003c22 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c10:	f7fd f8c4 	bl	8000d9c <HAL_GetTick>
 8003c14:	4602      	mov	r2, r0
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	1ad3      	subs	r3, r2, r3
 8003c1a:	2b02      	cmp	r3, #2
 8003c1c:	d901      	bls.n	8003c22 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003c1e:	2303      	movs	r3, #3
 8003c20:	e164      	b.n	8003eec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c22:	4b26      	ldr	r3, [pc, #152]	; (8003cbc <HAL_RCC_OscConfig+0x2ac>)
 8003c24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c26:	f003 0302 	and.w	r3, r3, #2
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d0f0      	beq.n	8003c10 <HAL_RCC_OscConfig+0x200>
 8003c2e:	e015      	b.n	8003c5c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c30:	4b24      	ldr	r3, [pc, #144]	; (8003cc4 <HAL_RCC_OscConfig+0x2b4>)
 8003c32:	2200      	movs	r2, #0
 8003c34:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c36:	f7fd f8b1 	bl	8000d9c <HAL_GetTick>
 8003c3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c3c:	e008      	b.n	8003c50 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c3e:	f7fd f8ad 	bl	8000d9c <HAL_GetTick>
 8003c42:	4602      	mov	r2, r0
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	1ad3      	subs	r3, r2, r3
 8003c48:	2b02      	cmp	r3, #2
 8003c4a:	d901      	bls.n	8003c50 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003c4c:	2303      	movs	r3, #3
 8003c4e:	e14d      	b.n	8003eec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c50:	4b1a      	ldr	r3, [pc, #104]	; (8003cbc <HAL_RCC_OscConfig+0x2ac>)
 8003c52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c54:	f003 0302 	and.w	r3, r3, #2
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d1f0      	bne.n	8003c3e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 0304 	and.w	r3, r3, #4
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	f000 80a0 	beq.w	8003daa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c6e:	4b13      	ldr	r3, [pc, #76]	; (8003cbc <HAL_RCC_OscConfig+0x2ac>)
 8003c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d10f      	bne.n	8003c9a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	60bb      	str	r3, [r7, #8]
 8003c7e:	4b0f      	ldr	r3, [pc, #60]	; (8003cbc <HAL_RCC_OscConfig+0x2ac>)
 8003c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c82:	4a0e      	ldr	r2, [pc, #56]	; (8003cbc <HAL_RCC_OscConfig+0x2ac>)
 8003c84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c88:	6413      	str	r3, [r2, #64]	; 0x40
 8003c8a:	4b0c      	ldr	r3, [pc, #48]	; (8003cbc <HAL_RCC_OscConfig+0x2ac>)
 8003c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c92:	60bb      	str	r3, [r7, #8]
 8003c94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c96:	2301      	movs	r3, #1
 8003c98:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c9a:	4b0b      	ldr	r3, [pc, #44]	; (8003cc8 <HAL_RCC_OscConfig+0x2b8>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d121      	bne.n	8003cea <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ca6:	4b08      	ldr	r3, [pc, #32]	; (8003cc8 <HAL_RCC_OscConfig+0x2b8>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a07      	ldr	r2, [pc, #28]	; (8003cc8 <HAL_RCC_OscConfig+0x2b8>)
 8003cac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cb2:	f7fd f873 	bl	8000d9c <HAL_GetTick>
 8003cb6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cb8:	e011      	b.n	8003cde <HAL_RCC_OscConfig+0x2ce>
 8003cba:	bf00      	nop
 8003cbc:	40023800 	.word	0x40023800
 8003cc0:	42470000 	.word	0x42470000
 8003cc4:	42470e80 	.word	0x42470e80
 8003cc8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ccc:	f7fd f866 	bl	8000d9c <HAL_GetTick>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	1ad3      	subs	r3, r2, r3
 8003cd6:	2b02      	cmp	r3, #2
 8003cd8:	d901      	bls.n	8003cde <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003cda:	2303      	movs	r3, #3
 8003cdc:	e106      	b.n	8003eec <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cde:	4b85      	ldr	r3, [pc, #532]	; (8003ef4 <HAL_RCC_OscConfig+0x4e4>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d0f0      	beq.n	8003ccc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d106      	bne.n	8003d00 <HAL_RCC_OscConfig+0x2f0>
 8003cf2:	4b81      	ldr	r3, [pc, #516]	; (8003ef8 <HAL_RCC_OscConfig+0x4e8>)
 8003cf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cf6:	4a80      	ldr	r2, [pc, #512]	; (8003ef8 <HAL_RCC_OscConfig+0x4e8>)
 8003cf8:	f043 0301 	orr.w	r3, r3, #1
 8003cfc:	6713      	str	r3, [r2, #112]	; 0x70
 8003cfe:	e01c      	b.n	8003d3a <HAL_RCC_OscConfig+0x32a>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	2b05      	cmp	r3, #5
 8003d06:	d10c      	bne.n	8003d22 <HAL_RCC_OscConfig+0x312>
 8003d08:	4b7b      	ldr	r3, [pc, #492]	; (8003ef8 <HAL_RCC_OscConfig+0x4e8>)
 8003d0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d0c:	4a7a      	ldr	r2, [pc, #488]	; (8003ef8 <HAL_RCC_OscConfig+0x4e8>)
 8003d0e:	f043 0304 	orr.w	r3, r3, #4
 8003d12:	6713      	str	r3, [r2, #112]	; 0x70
 8003d14:	4b78      	ldr	r3, [pc, #480]	; (8003ef8 <HAL_RCC_OscConfig+0x4e8>)
 8003d16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d18:	4a77      	ldr	r2, [pc, #476]	; (8003ef8 <HAL_RCC_OscConfig+0x4e8>)
 8003d1a:	f043 0301 	orr.w	r3, r3, #1
 8003d1e:	6713      	str	r3, [r2, #112]	; 0x70
 8003d20:	e00b      	b.n	8003d3a <HAL_RCC_OscConfig+0x32a>
 8003d22:	4b75      	ldr	r3, [pc, #468]	; (8003ef8 <HAL_RCC_OscConfig+0x4e8>)
 8003d24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d26:	4a74      	ldr	r2, [pc, #464]	; (8003ef8 <HAL_RCC_OscConfig+0x4e8>)
 8003d28:	f023 0301 	bic.w	r3, r3, #1
 8003d2c:	6713      	str	r3, [r2, #112]	; 0x70
 8003d2e:	4b72      	ldr	r3, [pc, #456]	; (8003ef8 <HAL_RCC_OscConfig+0x4e8>)
 8003d30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d32:	4a71      	ldr	r2, [pc, #452]	; (8003ef8 <HAL_RCC_OscConfig+0x4e8>)
 8003d34:	f023 0304 	bic.w	r3, r3, #4
 8003d38:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d015      	beq.n	8003d6e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d42:	f7fd f82b 	bl	8000d9c <HAL_GetTick>
 8003d46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d48:	e00a      	b.n	8003d60 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d4a:	f7fd f827 	bl	8000d9c <HAL_GetTick>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	1ad3      	subs	r3, r2, r3
 8003d54:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d901      	bls.n	8003d60 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003d5c:	2303      	movs	r3, #3
 8003d5e:	e0c5      	b.n	8003eec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d60:	4b65      	ldr	r3, [pc, #404]	; (8003ef8 <HAL_RCC_OscConfig+0x4e8>)
 8003d62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d64:	f003 0302 	and.w	r3, r3, #2
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d0ee      	beq.n	8003d4a <HAL_RCC_OscConfig+0x33a>
 8003d6c:	e014      	b.n	8003d98 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d6e:	f7fd f815 	bl	8000d9c <HAL_GetTick>
 8003d72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d74:	e00a      	b.n	8003d8c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d76:	f7fd f811 	bl	8000d9c <HAL_GetTick>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	1ad3      	subs	r3, r2, r3
 8003d80:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d901      	bls.n	8003d8c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003d88:	2303      	movs	r3, #3
 8003d8a:	e0af      	b.n	8003eec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d8c:	4b5a      	ldr	r3, [pc, #360]	; (8003ef8 <HAL_RCC_OscConfig+0x4e8>)
 8003d8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d90:	f003 0302 	and.w	r3, r3, #2
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d1ee      	bne.n	8003d76 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d98:	7dfb      	ldrb	r3, [r7, #23]
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d105      	bne.n	8003daa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d9e:	4b56      	ldr	r3, [pc, #344]	; (8003ef8 <HAL_RCC_OscConfig+0x4e8>)
 8003da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da2:	4a55      	ldr	r2, [pc, #340]	; (8003ef8 <HAL_RCC_OscConfig+0x4e8>)
 8003da4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003da8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	699b      	ldr	r3, [r3, #24]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	f000 809b 	beq.w	8003eea <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003db4:	4b50      	ldr	r3, [pc, #320]	; (8003ef8 <HAL_RCC_OscConfig+0x4e8>)
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	f003 030c 	and.w	r3, r3, #12
 8003dbc:	2b08      	cmp	r3, #8
 8003dbe:	d05c      	beq.n	8003e7a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	699b      	ldr	r3, [r3, #24]
 8003dc4:	2b02      	cmp	r3, #2
 8003dc6:	d141      	bne.n	8003e4c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dc8:	4b4c      	ldr	r3, [pc, #304]	; (8003efc <HAL_RCC_OscConfig+0x4ec>)
 8003dca:	2200      	movs	r2, #0
 8003dcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dce:	f7fc ffe5 	bl	8000d9c <HAL_GetTick>
 8003dd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dd4:	e008      	b.n	8003de8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dd6:	f7fc ffe1 	bl	8000d9c <HAL_GetTick>
 8003dda:	4602      	mov	r2, r0
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	1ad3      	subs	r3, r2, r3
 8003de0:	2b02      	cmp	r3, #2
 8003de2:	d901      	bls.n	8003de8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003de4:	2303      	movs	r3, #3
 8003de6:	e081      	b.n	8003eec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003de8:	4b43      	ldr	r3, [pc, #268]	; (8003ef8 <HAL_RCC_OscConfig+0x4e8>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d1f0      	bne.n	8003dd6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	69da      	ldr	r2, [r3, #28]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6a1b      	ldr	r3, [r3, #32]
 8003dfc:	431a      	orrs	r2, r3
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e02:	019b      	lsls	r3, r3, #6
 8003e04:	431a      	orrs	r2, r3
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e0a:	085b      	lsrs	r3, r3, #1
 8003e0c:	3b01      	subs	r3, #1
 8003e0e:	041b      	lsls	r3, r3, #16
 8003e10:	431a      	orrs	r2, r3
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e16:	061b      	lsls	r3, r3, #24
 8003e18:	4937      	ldr	r1, [pc, #220]	; (8003ef8 <HAL_RCC_OscConfig+0x4e8>)
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e1e:	4b37      	ldr	r3, [pc, #220]	; (8003efc <HAL_RCC_OscConfig+0x4ec>)
 8003e20:	2201      	movs	r2, #1
 8003e22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e24:	f7fc ffba 	bl	8000d9c <HAL_GetTick>
 8003e28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e2a:	e008      	b.n	8003e3e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e2c:	f7fc ffb6 	bl	8000d9c <HAL_GetTick>
 8003e30:	4602      	mov	r2, r0
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	1ad3      	subs	r3, r2, r3
 8003e36:	2b02      	cmp	r3, #2
 8003e38:	d901      	bls.n	8003e3e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003e3a:	2303      	movs	r3, #3
 8003e3c:	e056      	b.n	8003eec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e3e:	4b2e      	ldr	r3, [pc, #184]	; (8003ef8 <HAL_RCC_OscConfig+0x4e8>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d0f0      	beq.n	8003e2c <HAL_RCC_OscConfig+0x41c>
 8003e4a:	e04e      	b.n	8003eea <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e4c:	4b2b      	ldr	r3, [pc, #172]	; (8003efc <HAL_RCC_OscConfig+0x4ec>)
 8003e4e:	2200      	movs	r2, #0
 8003e50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e52:	f7fc ffa3 	bl	8000d9c <HAL_GetTick>
 8003e56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e58:	e008      	b.n	8003e6c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e5a:	f7fc ff9f 	bl	8000d9c <HAL_GetTick>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	1ad3      	subs	r3, r2, r3
 8003e64:	2b02      	cmp	r3, #2
 8003e66:	d901      	bls.n	8003e6c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003e68:	2303      	movs	r3, #3
 8003e6a:	e03f      	b.n	8003eec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e6c:	4b22      	ldr	r3, [pc, #136]	; (8003ef8 <HAL_RCC_OscConfig+0x4e8>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d1f0      	bne.n	8003e5a <HAL_RCC_OscConfig+0x44a>
 8003e78:	e037      	b.n	8003eea <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	699b      	ldr	r3, [r3, #24]
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d101      	bne.n	8003e86 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e032      	b.n	8003eec <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e86:	4b1c      	ldr	r3, [pc, #112]	; (8003ef8 <HAL_RCC_OscConfig+0x4e8>)
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	699b      	ldr	r3, [r3, #24]
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d028      	beq.n	8003ee6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	d121      	bne.n	8003ee6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d11a      	bne.n	8003ee6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003eb0:	68fa      	ldr	r2, [r7, #12]
 8003eb2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	687a      	ldr	r2, [r7, #4]
 8003eba:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003ebc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d111      	bne.n	8003ee6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ecc:	085b      	lsrs	r3, r3, #1
 8003ece:	3b01      	subs	r3, #1
 8003ed0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d107      	bne.n	8003ee6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d001      	beq.n	8003eea <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e000      	b.n	8003eec <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003eea:	2300      	movs	r3, #0
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	3718      	adds	r7, #24
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}
 8003ef4:	40007000 	.word	0x40007000
 8003ef8:	40023800 	.word	0x40023800
 8003efc:	42470060 	.word	0x42470060

08003f00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b084      	sub	sp, #16
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d101      	bne.n	8003f14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	e0cc      	b.n	80040ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f14:	4b68      	ldr	r3, [pc, #416]	; (80040b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 0307 	and.w	r3, r3, #7
 8003f1c:	683a      	ldr	r2, [r7, #0]
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	d90c      	bls.n	8003f3c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f22:	4b65      	ldr	r3, [pc, #404]	; (80040b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003f24:	683a      	ldr	r2, [r7, #0]
 8003f26:	b2d2      	uxtb	r2, r2
 8003f28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f2a:	4b63      	ldr	r3, [pc, #396]	; (80040b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 0307 	and.w	r3, r3, #7
 8003f32:	683a      	ldr	r2, [r7, #0]
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d001      	beq.n	8003f3c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	e0b8      	b.n	80040ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 0302 	and.w	r3, r3, #2
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d020      	beq.n	8003f8a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 0304 	and.w	r3, r3, #4
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d005      	beq.n	8003f60 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f54:	4b59      	ldr	r3, [pc, #356]	; (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	4a58      	ldr	r2, [pc, #352]	; (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 8003f5a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003f5e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 0308 	and.w	r3, r3, #8
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d005      	beq.n	8003f78 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f6c:	4b53      	ldr	r3, [pc, #332]	; (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	4a52      	ldr	r2, [pc, #328]	; (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 8003f72:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003f76:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f78:	4b50      	ldr	r3, [pc, #320]	; (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	494d      	ldr	r1, [pc, #308]	; (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 8003f86:	4313      	orrs	r3, r2
 8003f88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 0301 	and.w	r3, r3, #1
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d044      	beq.n	8004020 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d107      	bne.n	8003fae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f9e:	4b47      	ldr	r3, [pc, #284]	; (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d119      	bne.n	8003fde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	e07f      	b.n	80040ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	2b02      	cmp	r3, #2
 8003fb4:	d003      	beq.n	8003fbe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003fba:	2b03      	cmp	r3, #3
 8003fbc:	d107      	bne.n	8003fce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fbe:	4b3f      	ldr	r3, [pc, #252]	; (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d109      	bne.n	8003fde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e06f      	b.n	80040ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fce:	4b3b      	ldr	r3, [pc, #236]	; (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 0302 	and.w	r3, r3, #2
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d101      	bne.n	8003fde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e067      	b.n	80040ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003fde:	4b37      	ldr	r3, [pc, #220]	; (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	f023 0203 	bic.w	r2, r3, #3
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	4934      	ldr	r1, [pc, #208]	; (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 8003fec:	4313      	orrs	r3, r2
 8003fee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ff0:	f7fc fed4 	bl	8000d9c <HAL_GetTick>
 8003ff4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ff6:	e00a      	b.n	800400e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ff8:	f7fc fed0 	bl	8000d9c <HAL_GetTick>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	f241 3288 	movw	r2, #5000	; 0x1388
 8004006:	4293      	cmp	r3, r2
 8004008:	d901      	bls.n	800400e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800400a:	2303      	movs	r3, #3
 800400c:	e04f      	b.n	80040ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800400e:	4b2b      	ldr	r3, [pc, #172]	; (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	f003 020c 	and.w	r2, r3, #12
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	429a      	cmp	r2, r3
 800401e:	d1eb      	bne.n	8003ff8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004020:	4b25      	ldr	r3, [pc, #148]	; (80040b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 0307 	and.w	r3, r3, #7
 8004028:	683a      	ldr	r2, [r7, #0]
 800402a:	429a      	cmp	r2, r3
 800402c:	d20c      	bcs.n	8004048 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800402e:	4b22      	ldr	r3, [pc, #136]	; (80040b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004030:	683a      	ldr	r2, [r7, #0]
 8004032:	b2d2      	uxtb	r2, r2
 8004034:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004036:	4b20      	ldr	r3, [pc, #128]	; (80040b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 0307 	and.w	r3, r3, #7
 800403e:	683a      	ldr	r2, [r7, #0]
 8004040:	429a      	cmp	r2, r3
 8004042:	d001      	beq.n	8004048 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	e032      	b.n	80040ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 0304 	and.w	r3, r3, #4
 8004050:	2b00      	cmp	r3, #0
 8004052:	d008      	beq.n	8004066 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004054:	4b19      	ldr	r3, [pc, #100]	; (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	68db      	ldr	r3, [r3, #12]
 8004060:	4916      	ldr	r1, [pc, #88]	; (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 8004062:	4313      	orrs	r3, r2
 8004064:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 0308 	and.w	r3, r3, #8
 800406e:	2b00      	cmp	r3, #0
 8004070:	d009      	beq.n	8004086 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004072:	4b12      	ldr	r3, [pc, #72]	; (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	691b      	ldr	r3, [r3, #16]
 800407e:	00db      	lsls	r3, r3, #3
 8004080:	490e      	ldr	r1, [pc, #56]	; (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 8004082:	4313      	orrs	r3, r2
 8004084:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004086:	f000 f821 	bl	80040cc <HAL_RCC_GetSysClockFreq>
 800408a:	4602      	mov	r2, r0
 800408c:	4b0b      	ldr	r3, [pc, #44]	; (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	091b      	lsrs	r3, r3, #4
 8004092:	f003 030f 	and.w	r3, r3, #15
 8004096:	490a      	ldr	r1, [pc, #40]	; (80040c0 <HAL_RCC_ClockConfig+0x1c0>)
 8004098:	5ccb      	ldrb	r3, [r1, r3]
 800409a:	fa22 f303 	lsr.w	r3, r2, r3
 800409e:	4a09      	ldr	r2, [pc, #36]	; (80040c4 <HAL_RCC_ClockConfig+0x1c4>)
 80040a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80040a2:	4b09      	ldr	r3, [pc, #36]	; (80040c8 <HAL_RCC_ClockConfig+0x1c8>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4618      	mov	r0, r3
 80040a8:	f7fc fe36 	bl	8000d18 <HAL_InitTick>

  return HAL_OK;
 80040ac:	2300      	movs	r3, #0
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3710      	adds	r7, #16
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}
 80040b6:	bf00      	nop
 80040b8:	40023c00 	.word	0x40023c00
 80040bc:	40023800 	.word	0x40023800
 80040c0:	08007ba0 	.word	0x08007ba0
 80040c4:	20000000 	.word	0x20000000
 80040c8:	20000004 	.word	0x20000004

080040cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040cc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80040d0:	b084      	sub	sp, #16
 80040d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80040d4:	2300      	movs	r3, #0
 80040d6:	607b      	str	r3, [r7, #4]
 80040d8:	2300      	movs	r3, #0
 80040da:	60fb      	str	r3, [r7, #12]
 80040dc:	2300      	movs	r3, #0
 80040de:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80040e0:	2300      	movs	r3, #0
 80040e2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040e4:	4b67      	ldr	r3, [pc, #412]	; (8004284 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	f003 030c 	and.w	r3, r3, #12
 80040ec:	2b08      	cmp	r3, #8
 80040ee:	d00d      	beq.n	800410c <HAL_RCC_GetSysClockFreq+0x40>
 80040f0:	2b08      	cmp	r3, #8
 80040f2:	f200 80bd 	bhi.w	8004270 <HAL_RCC_GetSysClockFreq+0x1a4>
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d002      	beq.n	8004100 <HAL_RCC_GetSysClockFreq+0x34>
 80040fa:	2b04      	cmp	r3, #4
 80040fc:	d003      	beq.n	8004106 <HAL_RCC_GetSysClockFreq+0x3a>
 80040fe:	e0b7      	b.n	8004270 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004100:	4b61      	ldr	r3, [pc, #388]	; (8004288 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004102:	60bb      	str	r3, [r7, #8]
       break;
 8004104:	e0b7      	b.n	8004276 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004106:	4b61      	ldr	r3, [pc, #388]	; (800428c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004108:	60bb      	str	r3, [r7, #8]
      break;
 800410a:	e0b4      	b.n	8004276 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800410c:	4b5d      	ldr	r3, [pc, #372]	; (8004284 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004114:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004116:	4b5b      	ldr	r3, [pc, #364]	; (8004284 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800411e:	2b00      	cmp	r3, #0
 8004120:	d04d      	beq.n	80041be <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004122:	4b58      	ldr	r3, [pc, #352]	; (8004284 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	099b      	lsrs	r3, r3, #6
 8004128:	461a      	mov	r2, r3
 800412a:	f04f 0300 	mov.w	r3, #0
 800412e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004132:	f04f 0100 	mov.w	r1, #0
 8004136:	ea02 0800 	and.w	r8, r2, r0
 800413a:	ea03 0901 	and.w	r9, r3, r1
 800413e:	4640      	mov	r0, r8
 8004140:	4649      	mov	r1, r9
 8004142:	f04f 0200 	mov.w	r2, #0
 8004146:	f04f 0300 	mov.w	r3, #0
 800414a:	014b      	lsls	r3, r1, #5
 800414c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004150:	0142      	lsls	r2, r0, #5
 8004152:	4610      	mov	r0, r2
 8004154:	4619      	mov	r1, r3
 8004156:	ebb0 0008 	subs.w	r0, r0, r8
 800415a:	eb61 0109 	sbc.w	r1, r1, r9
 800415e:	f04f 0200 	mov.w	r2, #0
 8004162:	f04f 0300 	mov.w	r3, #0
 8004166:	018b      	lsls	r3, r1, #6
 8004168:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800416c:	0182      	lsls	r2, r0, #6
 800416e:	1a12      	subs	r2, r2, r0
 8004170:	eb63 0301 	sbc.w	r3, r3, r1
 8004174:	f04f 0000 	mov.w	r0, #0
 8004178:	f04f 0100 	mov.w	r1, #0
 800417c:	00d9      	lsls	r1, r3, #3
 800417e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004182:	00d0      	lsls	r0, r2, #3
 8004184:	4602      	mov	r2, r0
 8004186:	460b      	mov	r3, r1
 8004188:	eb12 0208 	adds.w	r2, r2, r8
 800418c:	eb43 0309 	adc.w	r3, r3, r9
 8004190:	f04f 0000 	mov.w	r0, #0
 8004194:	f04f 0100 	mov.w	r1, #0
 8004198:	0259      	lsls	r1, r3, #9
 800419a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800419e:	0250      	lsls	r0, r2, #9
 80041a0:	4602      	mov	r2, r0
 80041a2:	460b      	mov	r3, r1
 80041a4:	4610      	mov	r0, r2
 80041a6:	4619      	mov	r1, r3
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	461a      	mov	r2, r3
 80041ac:	f04f 0300 	mov.w	r3, #0
 80041b0:	f7fc f80a 	bl	80001c8 <__aeabi_uldivmod>
 80041b4:	4602      	mov	r2, r0
 80041b6:	460b      	mov	r3, r1
 80041b8:	4613      	mov	r3, r2
 80041ba:	60fb      	str	r3, [r7, #12]
 80041bc:	e04a      	b.n	8004254 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041be:	4b31      	ldr	r3, [pc, #196]	; (8004284 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	099b      	lsrs	r3, r3, #6
 80041c4:	461a      	mov	r2, r3
 80041c6:	f04f 0300 	mov.w	r3, #0
 80041ca:	f240 10ff 	movw	r0, #511	; 0x1ff
 80041ce:	f04f 0100 	mov.w	r1, #0
 80041d2:	ea02 0400 	and.w	r4, r2, r0
 80041d6:	ea03 0501 	and.w	r5, r3, r1
 80041da:	4620      	mov	r0, r4
 80041dc:	4629      	mov	r1, r5
 80041de:	f04f 0200 	mov.w	r2, #0
 80041e2:	f04f 0300 	mov.w	r3, #0
 80041e6:	014b      	lsls	r3, r1, #5
 80041e8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80041ec:	0142      	lsls	r2, r0, #5
 80041ee:	4610      	mov	r0, r2
 80041f0:	4619      	mov	r1, r3
 80041f2:	1b00      	subs	r0, r0, r4
 80041f4:	eb61 0105 	sbc.w	r1, r1, r5
 80041f8:	f04f 0200 	mov.w	r2, #0
 80041fc:	f04f 0300 	mov.w	r3, #0
 8004200:	018b      	lsls	r3, r1, #6
 8004202:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004206:	0182      	lsls	r2, r0, #6
 8004208:	1a12      	subs	r2, r2, r0
 800420a:	eb63 0301 	sbc.w	r3, r3, r1
 800420e:	f04f 0000 	mov.w	r0, #0
 8004212:	f04f 0100 	mov.w	r1, #0
 8004216:	00d9      	lsls	r1, r3, #3
 8004218:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800421c:	00d0      	lsls	r0, r2, #3
 800421e:	4602      	mov	r2, r0
 8004220:	460b      	mov	r3, r1
 8004222:	1912      	adds	r2, r2, r4
 8004224:	eb45 0303 	adc.w	r3, r5, r3
 8004228:	f04f 0000 	mov.w	r0, #0
 800422c:	f04f 0100 	mov.w	r1, #0
 8004230:	0299      	lsls	r1, r3, #10
 8004232:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004236:	0290      	lsls	r0, r2, #10
 8004238:	4602      	mov	r2, r0
 800423a:	460b      	mov	r3, r1
 800423c:	4610      	mov	r0, r2
 800423e:	4619      	mov	r1, r3
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	461a      	mov	r2, r3
 8004244:	f04f 0300 	mov.w	r3, #0
 8004248:	f7fb ffbe 	bl	80001c8 <__aeabi_uldivmod>
 800424c:	4602      	mov	r2, r0
 800424e:	460b      	mov	r3, r1
 8004250:	4613      	mov	r3, r2
 8004252:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004254:	4b0b      	ldr	r3, [pc, #44]	; (8004284 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	0c1b      	lsrs	r3, r3, #16
 800425a:	f003 0303 	and.w	r3, r3, #3
 800425e:	3301      	adds	r3, #1
 8004260:	005b      	lsls	r3, r3, #1
 8004262:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004264:	68fa      	ldr	r2, [r7, #12]
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	fbb2 f3f3 	udiv	r3, r2, r3
 800426c:	60bb      	str	r3, [r7, #8]
      break;
 800426e:	e002      	b.n	8004276 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004270:	4b05      	ldr	r3, [pc, #20]	; (8004288 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004272:	60bb      	str	r3, [r7, #8]
      break;
 8004274:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004276:	68bb      	ldr	r3, [r7, #8]
}
 8004278:	4618      	mov	r0, r3
 800427a:	3710      	adds	r7, #16
 800427c:	46bd      	mov	sp, r7
 800427e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004282:	bf00      	nop
 8004284:	40023800 	.word	0x40023800
 8004288:	00f42400 	.word	0x00f42400
 800428c:	007a1200 	.word	0x007a1200

08004290 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004290:	b480      	push	{r7}
 8004292:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004294:	4b02      	ldr	r3, [pc, #8]	; (80042a0 <HAL_RCC_GetHCLKFreq+0x10>)
 8004296:	681b      	ldr	r3, [r3, #0]
}
 8004298:	4618      	mov	r0, r3
 800429a:	46bd      	mov	sp, r7
 800429c:	bc80      	pop	{r7}
 800429e:	4770      	bx	lr
 80042a0:	20000000 	.word	0x20000000

080042a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80042a8:	f7ff fff2 	bl	8004290 <HAL_RCC_GetHCLKFreq>
 80042ac:	4602      	mov	r2, r0
 80042ae:	4b05      	ldr	r3, [pc, #20]	; (80042c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	0a9b      	lsrs	r3, r3, #10
 80042b4:	f003 0307 	and.w	r3, r3, #7
 80042b8:	4903      	ldr	r1, [pc, #12]	; (80042c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80042ba:	5ccb      	ldrb	r3, [r1, r3]
 80042bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	bd80      	pop	{r7, pc}
 80042c4:	40023800 	.word	0x40023800
 80042c8:	08007bb0 	.word	0x08007bb0

080042cc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b086      	sub	sp, #24
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80042d4:	2300      	movs	r3, #0
 80042d6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80042d8:	2300      	movs	r3, #0
 80042da:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 0301 	and.w	r3, r3, #1
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d105      	bne.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d035      	beq.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80042f4:	4b62      	ldr	r3, [pc, #392]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80042f6:	2200      	movs	r2, #0
 80042f8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80042fa:	f7fc fd4f 	bl	8000d9c <HAL_GetTick>
 80042fe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004300:	e008      	b.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004302:	f7fc fd4b 	bl	8000d9c <HAL_GetTick>
 8004306:	4602      	mov	r2, r0
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	1ad3      	subs	r3, r2, r3
 800430c:	2b02      	cmp	r3, #2
 800430e:	d901      	bls.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004310:	2303      	movs	r3, #3
 8004312:	e0b0      	b.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004314:	4b5b      	ldr	r3, [pc, #364]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800431c:	2b00      	cmp	r3, #0
 800431e:	d1f0      	bne.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	019a      	lsls	r2, r3, #6
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	071b      	lsls	r3, r3, #28
 800432c:	4955      	ldr	r1, [pc, #340]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800432e:	4313      	orrs	r3, r2
 8004330:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004334:	4b52      	ldr	r3, [pc, #328]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004336:	2201      	movs	r2, #1
 8004338:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800433a:	f7fc fd2f 	bl	8000d9c <HAL_GetTick>
 800433e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004340:	e008      	b.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004342:	f7fc fd2b 	bl	8000d9c <HAL_GetTick>
 8004346:	4602      	mov	r2, r0
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	1ad3      	subs	r3, r2, r3
 800434c:	2b02      	cmp	r3, #2
 800434e:	d901      	bls.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004350:	2303      	movs	r3, #3
 8004352:	e090      	b.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004354:	4b4b      	ldr	r3, [pc, #300]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800435c:	2b00      	cmp	r3, #0
 800435e:	d0f0      	beq.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f003 0302 	and.w	r3, r3, #2
 8004368:	2b00      	cmp	r3, #0
 800436a:	f000 8083 	beq.w	8004474 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800436e:	2300      	movs	r3, #0
 8004370:	60fb      	str	r3, [r7, #12]
 8004372:	4b44      	ldr	r3, [pc, #272]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004376:	4a43      	ldr	r2, [pc, #268]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004378:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800437c:	6413      	str	r3, [r2, #64]	; 0x40
 800437e:	4b41      	ldr	r3, [pc, #260]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004382:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004386:	60fb      	str	r3, [r7, #12]
 8004388:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800438a:	4b3f      	ldr	r3, [pc, #252]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a3e      	ldr	r2, [pc, #248]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004390:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004394:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004396:	f7fc fd01 	bl	8000d9c <HAL_GetTick>
 800439a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800439c:	e008      	b.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800439e:	f7fc fcfd 	bl	8000d9c <HAL_GetTick>
 80043a2:	4602      	mov	r2, r0
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	1ad3      	subs	r3, r2, r3
 80043a8:	2b02      	cmp	r3, #2
 80043aa:	d901      	bls.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80043ac:	2303      	movs	r3, #3
 80043ae:	e062      	b.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80043b0:	4b35      	ldr	r3, [pc, #212]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d0f0      	beq.n	800439e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80043bc:	4b31      	ldr	r3, [pc, #196]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043c4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d02f      	beq.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x160>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	68db      	ldr	r3, [r3, #12]
 80043d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043d4:	693a      	ldr	r2, [r7, #16]
 80043d6:	429a      	cmp	r2, r3
 80043d8:	d028      	beq.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80043da:	4b2a      	ldr	r3, [pc, #168]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043e2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80043e4:	4b29      	ldr	r3, [pc, #164]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80043e6:	2201      	movs	r2, #1
 80043e8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80043ea:	4b28      	ldr	r3, [pc, #160]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80043ec:	2200      	movs	r2, #0
 80043ee:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80043f0:	4a24      	ldr	r2, [pc, #144]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80043f6:	4b23      	ldr	r3, [pc, #140]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043fa:	f003 0301 	and.w	r3, r3, #1
 80043fe:	2b01      	cmp	r3, #1
 8004400:	d114      	bne.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004402:	f7fc fccb 	bl	8000d9c <HAL_GetTick>
 8004406:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004408:	e00a      	b.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800440a:	f7fc fcc7 	bl	8000d9c <HAL_GetTick>
 800440e:	4602      	mov	r2, r0
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	1ad3      	subs	r3, r2, r3
 8004414:	f241 3288 	movw	r2, #5000	; 0x1388
 8004418:	4293      	cmp	r3, r2
 800441a:	d901      	bls.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800441c:	2303      	movs	r3, #3
 800441e:	e02a      	b.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004420:	4b18      	ldr	r3, [pc, #96]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004424:	f003 0302 	and.w	r3, r3, #2
 8004428:	2b00      	cmp	r3, #0
 800442a:	d0ee      	beq.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	68db      	ldr	r3, [r3, #12]
 8004430:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004434:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004438:	d10d      	bne.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800443a:	4b12      	ldr	r3, [pc, #72]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	68db      	ldr	r3, [r3, #12]
 8004446:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800444a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800444e:	490d      	ldr	r1, [pc, #52]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004450:	4313      	orrs	r3, r2
 8004452:	608b      	str	r3, [r1, #8]
 8004454:	e005      	b.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004456:	4b0b      	ldr	r3, [pc, #44]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	4a0a      	ldr	r2, [pc, #40]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800445c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004460:	6093      	str	r3, [r2, #8]
 8004462:	4b08      	ldr	r3, [pc, #32]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004464:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	68db      	ldr	r3, [r3, #12]
 800446a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800446e:	4905      	ldr	r1, [pc, #20]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004470:	4313      	orrs	r3, r2
 8004472:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004474:	2300      	movs	r3, #0
}
 8004476:	4618      	mov	r0, r3
 8004478:	3718      	adds	r7, #24
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}
 800447e:	bf00      	nop
 8004480:	42470068 	.word	0x42470068
 8004484:	40023800 	.word	0x40023800
 8004488:	40007000 	.word	0x40007000
 800448c:	42470e40 	.word	0x42470e40

08004490 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004490:	b480      	push	{r7}
 8004492:	b087      	sub	sp, #28
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004498:	2300      	movs	r3, #0
 800449a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800449c:	2300      	movs	r3, #0
 800449e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80044a0:	2300      	movs	r3, #0
 80044a2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80044a4:	2300      	movs	r3, #0
 80044a6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d13e      	bne.n	800452c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80044ae:	4b22      	ldr	r3, [pc, #136]	; (8004538 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80044b6:	60fb      	str	r3, [r7, #12]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d005      	beq.n	80044ca <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d12f      	bne.n	8004524 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80044c4:	4b1d      	ldr	r3, [pc, #116]	; (800453c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80044c6:	617b      	str	r3, [r7, #20]
          break;
 80044c8:	e02f      	b.n	800452a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80044ca:	4b1b      	ldr	r3, [pc, #108]	; (8004538 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044d6:	d108      	bne.n	80044ea <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80044d8:	4b17      	ldr	r3, [pc, #92]	; (8004538 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044e0:	4a17      	ldr	r2, [pc, #92]	; (8004540 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80044e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80044e6:	613b      	str	r3, [r7, #16]
 80044e8:	e007      	b.n	80044fa <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80044ea:	4b13      	ldr	r3, [pc, #76]	; (8004538 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044f2:	4a14      	ldr	r2, [pc, #80]	; (8004544 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80044f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80044f8:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80044fa:	4b0f      	ldr	r3, [pc, #60]	; (8004538 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80044fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004500:	099b      	lsrs	r3, r3, #6
 8004502:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	fb02 f303 	mul.w	r3, r2, r3
 800450c:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800450e:	4b0a      	ldr	r3, [pc, #40]	; (8004538 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004510:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004514:	0f1b      	lsrs	r3, r3, #28
 8004516:	f003 0307 	and.w	r3, r3, #7
 800451a:	68ba      	ldr	r2, [r7, #8]
 800451c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004520:	617b      	str	r3, [r7, #20]
          break;
 8004522:	e002      	b.n	800452a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004524:	2300      	movs	r3, #0
 8004526:	617b      	str	r3, [r7, #20]
          break;
 8004528:	bf00      	nop
        }
      }
      break;
 800452a:	bf00      	nop
    }
  }
  return frequency;
 800452c:	697b      	ldr	r3, [r7, #20]
}
 800452e:	4618      	mov	r0, r3
 8004530:	371c      	adds	r7, #28
 8004532:	46bd      	mov	sp, r7
 8004534:	bc80      	pop	{r7}
 8004536:	4770      	bx	lr
 8004538:	40023800 	.word	0x40023800
 800453c:	00bb8000 	.word	0x00bb8000
 8004540:	007a1200 	.word	0x007a1200
 8004544:	00f42400 	.word	0x00f42400

08004548 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b082      	sub	sp, #8
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d101      	bne.n	800455a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	e07b      	b.n	8004652 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800455e:	2b00      	cmp	r3, #0
 8004560:	d108      	bne.n	8004574 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800456a:	d009      	beq.n	8004580 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2200      	movs	r2, #0
 8004570:	61da      	str	r2, [r3, #28]
 8004572:	e005      	b.n	8004580 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2200      	movs	r2, #0
 8004578:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2200      	movs	r2, #0
 800457e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2200      	movs	r2, #0
 8004584:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800458c:	b2db      	uxtb	r3, r3
 800458e:	2b00      	cmp	r3, #0
 8004590:	d106      	bne.n	80045a0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2200      	movs	r2, #0
 8004596:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f7fc faba 	bl	8000b14 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2202      	movs	r2, #2
 80045a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045b6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80045c8:	431a      	orrs	r2, r3
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	68db      	ldr	r3, [r3, #12]
 80045ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045d2:	431a      	orrs	r2, r3
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	691b      	ldr	r3, [r3, #16]
 80045d8:	f003 0302 	and.w	r3, r3, #2
 80045dc:	431a      	orrs	r2, r3
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	695b      	ldr	r3, [r3, #20]
 80045e2:	f003 0301 	and.w	r3, r3, #1
 80045e6:	431a      	orrs	r2, r3
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	699b      	ldr	r3, [r3, #24]
 80045ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045f0:	431a      	orrs	r2, r3
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	69db      	ldr	r3, [r3, #28]
 80045f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80045fa:	431a      	orrs	r2, r3
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6a1b      	ldr	r3, [r3, #32]
 8004600:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004604:	ea42 0103 	orr.w	r1, r2, r3
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800460c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	430a      	orrs	r2, r1
 8004616:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	699b      	ldr	r3, [r3, #24]
 800461c:	0c1b      	lsrs	r3, r3, #16
 800461e:	f003 0104 	and.w	r1, r3, #4
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004626:	f003 0210 	and.w	r2, r3, #16
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	430a      	orrs	r2, r1
 8004630:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	69da      	ldr	r2, [r3, #28]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004640:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2200      	movs	r2, #0
 8004646:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2201      	movs	r2, #1
 800464c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004650:	2300      	movs	r3, #0
}
 8004652:	4618      	mov	r0, r3
 8004654:	3708      	adds	r7, #8
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}

0800465a <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800465a:	b084      	sub	sp, #16
 800465c:	b580      	push	{r7, lr}
 800465e:	b084      	sub	sp, #16
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
 8004664:	f107 001c 	add.w	r0, r7, #28
 8004668:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800466c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800466e:	2b01      	cmp	r3, #1
 8004670:	d122      	bne.n	80046b8 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004676:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	68db      	ldr	r3, [r3, #12]
 8004682:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004686:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800468a:	687a      	ldr	r2, [r7, #4]
 800468c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	68db      	ldr	r3, [r3, #12]
 8004692:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800469a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800469c:	2b01      	cmp	r3, #1
 800469e:	d105      	bne.n	80046ac <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	68db      	ldr	r3, [r3, #12]
 80046a4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80046ac:	6878      	ldr	r0, [r7, #4]
 80046ae:	f000 f999 	bl	80049e4 <USB_CoreReset>
 80046b2:	4603      	mov	r3, r0
 80046b4:	73fb      	strb	r3, [r7, #15]
 80046b6:	e01a      	b.n	80046ee <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	68db      	ldr	r3, [r3, #12]
 80046bc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f000 f98d 	bl	80049e4 <USB_CoreReset>
 80046ca:	4603      	mov	r3, r0
 80046cc:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80046ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d106      	bne.n	80046e2 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046d8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	639a      	str	r2, [r3, #56]	; 0x38
 80046e0:	e005      	b.n	80046ee <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046e6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80046ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d10b      	bne.n	800470c <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	f043 0206 	orr.w	r2, r3, #6
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	f043 0220 	orr.w	r2, r3, #32
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800470c:	7bfb      	ldrb	r3, [r7, #15]
}
 800470e:	4618      	mov	r0, r3
 8004710:	3710      	adds	r7, #16
 8004712:	46bd      	mov	sp, r7
 8004714:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004718:	b004      	add	sp, #16
 800471a:	4770      	bx	lr

0800471c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800471c:	b480      	push	{r7}
 800471e:	b083      	sub	sp, #12
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	f043 0201 	orr.w	r2, r3, #1
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004730:	2300      	movs	r3, #0
}
 8004732:	4618      	mov	r0, r3
 8004734:	370c      	adds	r7, #12
 8004736:	46bd      	mov	sp, r7
 8004738:	bc80      	pop	{r7}
 800473a:	4770      	bx	lr

0800473c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800473c:	b480      	push	{r7}
 800473e:	b083      	sub	sp, #12
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	f023 0201 	bic.w	r2, r3, #1
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004750:	2300      	movs	r3, #0
}
 8004752:	4618      	mov	r0, r3
 8004754:	370c      	adds	r7, #12
 8004756:	46bd      	mov	sp, r7
 8004758:	bc80      	pop	{r7}
 800475a:	4770      	bx	lr

0800475c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b084      	sub	sp, #16
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
 8004764:	460b      	mov	r3, r1
 8004766:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004768:	2300      	movs	r3, #0
 800476a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	68db      	ldr	r3, [r3, #12]
 8004770:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004778:	78fb      	ldrb	r3, [r7, #3]
 800477a:	2b01      	cmp	r3, #1
 800477c:	d115      	bne.n	80047aa <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800478a:	2001      	movs	r0, #1
 800478c:	f7fc fb10 	bl	8000db0 <HAL_Delay>
      ms++;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	3301      	adds	r3, #1
 8004794:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f000 f916 	bl	80049c8 <USB_GetMode>
 800479c:	4603      	mov	r3, r0
 800479e:	2b01      	cmp	r3, #1
 80047a0:	d01e      	beq.n	80047e0 <USB_SetCurrentMode+0x84>
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2b31      	cmp	r3, #49	; 0x31
 80047a6:	d9f0      	bls.n	800478a <USB_SetCurrentMode+0x2e>
 80047a8:	e01a      	b.n	80047e0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80047aa:	78fb      	ldrb	r3, [r7, #3]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d115      	bne.n	80047dc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	68db      	ldr	r3, [r3, #12]
 80047b4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80047bc:	2001      	movs	r0, #1
 80047be:	f7fc faf7 	bl	8000db0 <HAL_Delay>
      ms++;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	3301      	adds	r3, #1
 80047c6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80047c8:	6878      	ldr	r0, [r7, #4]
 80047ca:	f000 f8fd 	bl	80049c8 <USB_GetMode>
 80047ce:	4603      	mov	r3, r0
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d005      	beq.n	80047e0 <USB_SetCurrentMode+0x84>
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2b31      	cmp	r3, #49	; 0x31
 80047d8:	d9f0      	bls.n	80047bc <USB_SetCurrentMode+0x60>
 80047da:	e001      	b.n	80047e0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	e005      	b.n	80047ec <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2b32      	cmp	r3, #50	; 0x32
 80047e4:	d101      	bne.n	80047ea <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	e000      	b.n	80047ec <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80047ea:	2300      	movs	r3, #0
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3710      	adds	r7, #16
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}

080047f4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b085      	sub	sp, #20
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
 80047fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80047fe:	2300      	movs	r3, #0
 8004800:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	019b      	lsls	r3, r3, #6
 8004806:	f043 0220 	orr.w	r2, r3, #32
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	3301      	adds	r3, #1
 8004812:	60fb      	str	r3, [r7, #12]
 8004814:	4a08      	ldr	r2, [pc, #32]	; (8004838 <USB_FlushTxFifo+0x44>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d901      	bls.n	800481e <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800481a:	2303      	movs	r3, #3
 800481c:	e006      	b.n	800482c <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	691b      	ldr	r3, [r3, #16]
 8004822:	f003 0320 	and.w	r3, r3, #32
 8004826:	2b20      	cmp	r3, #32
 8004828:	d0f1      	beq.n	800480e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800482a:	2300      	movs	r3, #0
}
 800482c:	4618      	mov	r0, r3
 800482e:	3714      	adds	r7, #20
 8004830:	46bd      	mov	sp, r7
 8004832:	bc80      	pop	{r7}
 8004834:	4770      	bx	lr
 8004836:	bf00      	nop
 8004838:	00030d40 	.word	0x00030d40

0800483c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800483c:	b480      	push	{r7}
 800483e:	b085      	sub	sp, #20
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004844:	2300      	movs	r3, #0
 8004846:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2210      	movs	r2, #16
 800484c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	3301      	adds	r3, #1
 8004852:	60fb      	str	r3, [r7, #12]
 8004854:	4a08      	ldr	r2, [pc, #32]	; (8004878 <USB_FlushRxFifo+0x3c>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d901      	bls.n	800485e <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800485a:	2303      	movs	r3, #3
 800485c:	e006      	b.n	800486c <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	691b      	ldr	r3, [r3, #16]
 8004862:	f003 0310 	and.w	r3, r3, #16
 8004866:	2b10      	cmp	r3, #16
 8004868:	d0f1      	beq.n	800484e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800486a:	2300      	movs	r3, #0
}
 800486c:	4618      	mov	r0, r3
 800486e:	3714      	adds	r7, #20
 8004870:	46bd      	mov	sp, r7
 8004872:	bc80      	pop	{r7}
 8004874:	4770      	bx	lr
 8004876:	bf00      	nop
 8004878:	00030d40 	.word	0x00030d40

0800487c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800487c:	b480      	push	{r7}
 800487e:	b089      	sub	sp, #36	; 0x24
 8004880:	af00      	add	r7, sp, #0
 8004882:	60f8      	str	r0, [r7, #12]
 8004884:	60b9      	str	r1, [r7, #8]
 8004886:	4611      	mov	r1, r2
 8004888:	461a      	mov	r2, r3
 800488a:	460b      	mov	r3, r1
 800488c:	71fb      	strb	r3, [r7, #7]
 800488e:	4613      	mov	r3, r2
 8004890:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800489a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d123      	bne.n	80048ea <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80048a2:	88bb      	ldrh	r3, [r7, #4]
 80048a4:	3303      	adds	r3, #3
 80048a6:	089b      	lsrs	r3, r3, #2
 80048a8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80048aa:	2300      	movs	r3, #0
 80048ac:	61bb      	str	r3, [r7, #24]
 80048ae:	e018      	b.n	80048e2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80048b0:	79fb      	ldrb	r3, [r7, #7]
 80048b2:	031a      	lsls	r2, r3, #12
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	4413      	add	r3, r2
 80048b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048bc:	461a      	mov	r2, r3
 80048be:	69fb      	ldr	r3, [r7, #28]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80048c4:	69fb      	ldr	r3, [r7, #28]
 80048c6:	3301      	adds	r3, #1
 80048c8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80048ca:	69fb      	ldr	r3, [r7, #28]
 80048cc:	3301      	adds	r3, #1
 80048ce:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80048d0:	69fb      	ldr	r3, [r7, #28]
 80048d2:	3301      	adds	r3, #1
 80048d4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80048d6:	69fb      	ldr	r3, [r7, #28]
 80048d8:	3301      	adds	r3, #1
 80048da:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80048dc:	69bb      	ldr	r3, [r7, #24]
 80048de:	3301      	adds	r3, #1
 80048e0:	61bb      	str	r3, [r7, #24]
 80048e2:	69ba      	ldr	r2, [r7, #24]
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	429a      	cmp	r2, r3
 80048e8:	d3e2      	bcc.n	80048b0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80048ea:	2300      	movs	r3, #0
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	3724      	adds	r7, #36	; 0x24
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bc80      	pop	{r7}
 80048f4:	4770      	bx	lr

080048f6 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80048f6:	b480      	push	{r7}
 80048f8:	b08b      	sub	sp, #44	; 0x2c
 80048fa:	af00      	add	r7, sp, #0
 80048fc:	60f8      	str	r0, [r7, #12]
 80048fe:	60b9      	str	r1, [r7, #8]
 8004900:	4613      	mov	r3, r2
 8004902:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800490c:	88fb      	ldrh	r3, [r7, #6]
 800490e:	089b      	lsrs	r3, r3, #2
 8004910:	b29b      	uxth	r3, r3
 8004912:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004914:	88fb      	ldrh	r3, [r7, #6]
 8004916:	f003 0303 	and.w	r3, r3, #3
 800491a:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800491c:	2300      	movs	r3, #0
 800491e:	623b      	str	r3, [r7, #32]
 8004920:	e014      	b.n	800494c <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004922:	69bb      	ldr	r3, [r7, #24]
 8004924:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492c:	601a      	str	r2, [r3, #0]
    pDest++;
 800492e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004930:	3301      	adds	r3, #1
 8004932:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004936:	3301      	adds	r3, #1
 8004938:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800493a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800493c:	3301      	adds	r3, #1
 800493e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004942:	3301      	adds	r3, #1
 8004944:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004946:	6a3b      	ldr	r3, [r7, #32]
 8004948:	3301      	adds	r3, #1
 800494a:	623b      	str	r3, [r7, #32]
 800494c:	6a3a      	ldr	r2, [r7, #32]
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	429a      	cmp	r2, r3
 8004952:	d3e6      	bcc.n	8004922 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004954:	8bfb      	ldrh	r3, [r7, #30]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d01e      	beq.n	8004998 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800495a:	2300      	movs	r3, #0
 800495c:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800495e:	69bb      	ldr	r3, [r7, #24]
 8004960:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004964:	461a      	mov	r2, r3
 8004966:	f107 0310 	add.w	r3, r7, #16
 800496a:	6812      	ldr	r2, [r2, #0]
 800496c:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800496e:	693a      	ldr	r2, [r7, #16]
 8004970:	6a3b      	ldr	r3, [r7, #32]
 8004972:	b2db      	uxtb	r3, r3
 8004974:	00db      	lsls	r3, r3, #3
 8004976:	fa22 f303 	lsr.w	r3, r2, r3
 800497a:	b2da      	uxtb	r2, r3
 800497c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800497e:	701a      	strb	r2, [r3, #0]
      i++;
 8004980:	6a3b      	ldr	r3, [r7, #32]
 8004982:	3301      	adds	r3, #1
 8004984:	623b      	str	r3, [r7, #32]
      pDest++;
 8004986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004988:	3301      	adds	r3, #1
 800498a:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800498c:	8bfb      	ldrh	r3, [r7, #30]
 800498e:	3b01      	subs	r3, #1
 8004990:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004992:	8bfb      	ldrh	r3, [r7, #30]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d1ea      	bne.n	800496e <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800499a:	4618      	mov	r0, r3
 800499c:	372c      	adds	r7, #44	; 0x2c
 800499e:	46bd      	mov	sp, r7
 80049a0:	bc80      	pop	{r7}
 80049a2:	4770      	bx	lr

080049a4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b085      	sub	sp, #20
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	695b      	ldr	r3, [r3, #20]
 80049b0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	699b      	ldr	r3, [r3, #24]
 80049b6:	68fa      	ldr	r2, [r7, #12]
 80049b8:	4013      	ands	r3, r2
 80049ba:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80049bc:	68fb      	ldr	r3, [r7, #12]
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3714      	adds	r7, #20
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bc80      	pop	{r7}
 80049c6:	4770      	bx	lr

080049c8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b083      	sub	sp, #12
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	695b      	ldr	r3, [r3, #20]
 80049d4:	f003 0301 	and.w	r3, r3, #1
}
 80049d8:	4618      	mov	r0, r3
 80049da:	370c      	adds	r7, #12
 80049dc:	46bd      	mov	sp, r7
 80049de:	bc80      	pop	{r7}
 80049e0:	4770      	bx	lr
	...

080049e4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b085      	sub	sp, #20
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80049ec:	2300      	movs	r3, #0
 80049ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	3301      	adds	r3, #1
 80049f4:	60fb      	str	r3, [r7, #12]
 80049f6:	4a12      	ldr	r2, [pc, #72]	; (8004a40 <USB_CoreReset+0x5c>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d901      	bls.n	8004a00 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80049fc:	2303      	movs	r3, #3
 80049fe:	e01a      	b.n	8004a36 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	691b      	ldr	r3, [r3, #16]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	daf3      	bge.n	80049f0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	691b      	ldr	r3, [r3, #16]
 8004a10:	f043 0201 	orr.w	r2, r3, #1
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	3301      	adds	r3, #1
 8004a1c:	60fb      	str	r3, [r7, #12]
 8004a1e:	4a08      	ldr	r2, [pc, #32]	; (8004a40 <USB_CoreReset+0x5c>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d901      	bls.n	8004a28 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8004a24:	2303      	movs	r3, #3
 8004a26:	e006      	b.n	8004a36 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	691b      	ldr	r3, [r3, #16]
 8004a2c:	f003 0301 	and.w	r3, r3, #1
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d0f1      	beq.n	8004a18 <USB_CoreReset+0x34>

  return HAL_OK;
 8004a34:	2300      	movs	r3, #0
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3714      	adds	r7, #20
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bc80      	pop	{r7}
 8004a3e:	4770      	bx	lr
 8004a40:	00030d40 	.word	0x00030d40

08004a44 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004a44:	b084      	sub	sp, #16
 8004a46:	b580      	push	{r7, lr}
 8004a48:	b084      	sub	sp, #16
 8004a4a:	af00      	add	r7, sp, #0
 8004a4c:	6078      	str	r0, [r7, #4]
 8004a4e:	f107 001c 	add.w	r0, r7, #28
 8004a52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004a60:	461a      	mov	r2, r3
 8004a62:	2300      	movs	r3, #0
 8004a64:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a6a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a76:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a82:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d018      	beq.n	8004ac8 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8004a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d10a      	bne.n	8004ab2 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	68ba      	ldr	r2, [r7, #8]
 8004aa6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004aaa:	f043 0304 	orr.w	r3, r3, #4
 8004aae:	6013      	str	r3, [r2, #0]
 8004ab0:	e014      	b.n	8004adc <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	68ba      	ldr	r2, [r7, #8]
 8004abc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004ac0:	f023 0304 	bic.w	r3, r3, #4
 8004ac4:	6013      	str	r3, [r2, #0]
 8004ac6:	e009      	b.n	8004adc <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	68ba      	ldr	r2, [r7, #8]
 8004ad2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004ad6:	f023 0304 	bic.w	r3, r3, #4
 8004ada:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8004adc:	2110      	movs	r1, #16
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f7ff fe88 	bl	80047f4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f7ff fea9 	bl	800483c <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8004aea:	2300      	movs	r3, #0
 8004aec:	60fb      	str	r3, [r7, #12]
 8004aee:	e015      	b.n	8004b1c <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	015a      	lsls	r2, r3, #5
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	4413      	add	r3, r2
 8004af8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004afc:	461a      	mov	r2, r3
 8004afe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004b02:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	015a      	lsls	r2, r3, #5
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	4413      	add	r3, r2
 8004b0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b10:	461a      	mov	r2, r3
 8004b12:	2300      	movs	r3, #0
 8004b14:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	3301      	adds	r3, #1
 8004b1a:	60fb      	str	r3, [r7, #12]
 8004b1c:	6a3b      	ldr	r3, [r7, #32]
 8004b1e:	68fa      	ldr	r2, [r7, #12]
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d3e5      	bcc.n	8004af0 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2200      	movs	r2, #0
 8004b28:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004b30:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d00b      	beq.n	8004b56 <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b44:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	4a13      	ldr	r2, [pc, #76]	; (8004b98 <USB_HostInit+0x154>)
 8004b4a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	4a13      	ldr	r2, [pc, #76]	; (8004b9c <USB_HostInit+0x158>)
 8004b50:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8004b54:	e009      	b.n	8004b6a <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2280      	movs	r2, #128	; 0x80
 8004b5a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	4a10      	ldr	r2, [pc, #64]	; (8004ba0 <USB_HostInit+0x15c>)
 8004b60:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	4a0f      	ldr	r2, [pc, #60]	; (8004ba4 <USB_HostInit+0x160>)
 8004b66:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d105      	bne.n	8004b7c <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	699b      	ldr	r3, [r3, #24]
 8004b74:	f043 0210 	orr.w	r2, r3, #16
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	699a      	ldr	r2, [r3, #24]
 8004b80:	4b09      	ldr	r3, [pc, #36]	; (8004ba8 <USB_HostInit+0x164>)
 8004b82:	4313      	orrs	r3, r2
 8004b84:	687a      	ldr	r2, [r7, #4]
 8004b86:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8004b88:	2300      	movs	r3, #0
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	3710      	adds	r7, #16
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004b94:	b004      	add	sp, #16
 8004b96:	4770      	bx	lr
 8004b98:	01000200 	.word	0x01000200
 8004b9c:	00e00300 	.word	0x00e00300
 8004ba0:	00600080 	.word	0x00600080
 8004ba4:	004000e0 	.word	0x004000e0
 8004ba8:	a3200008 	.word	0xa3200008

08004bac <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b085      	sub	sp, #20
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
 8004bb4:	460b      	mov	r3, r1
 8004bb6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	68fa      	ldr	r2, [r7, #12]
 8004bc6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004bca:	f023 0303 	bic.w	r3, r3, #3
 8004bce:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004bd6:	681a      	ldr	r2, [r3, #0]
 8004bd8:	78fb      	ldrb	r3, [r7, #3]
 8004bda:	f003 0303 	and.w	r3, r3, #3
 8004bde:	68f9      	ldr	r1, [r7, #12]
 8004be0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004be4:	4313      	orrs	r3, r2
 8004be6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004be8:	78fb      	ldrb	r3, [r7, #3]
 8004bea:	2b01      	cmp	r3, #1
 8004bec:	d107      	bne.n	8004bfe <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004bf4:	461a      	mov	r2, r3
 8004bf6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004bfa:	6053      	str	r3, [r2, #4]
 8004bfc:	e009      	b.n	8004c12 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8004bfe:	78fb      	ldrb	r3, [r7, #3]
 8004c00:	2b02      	cmp	r3, #2
 8004c02:	d106      	bne.n	8004c12 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c0a:	461a      	mov	r2, r3
 8004c0c:	f241 7370 	movw	r3, #6000	; 0x1770
 8004c10:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8004c12:	2300      	movs	r3, #0
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	3714      	adds	r7, #20
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bc80      	pop	{r7}
 8004c1c:	4770      	bx	lr

08004c1e <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8004c1e:	b580      	push	{r7, lr}
 8004c20:	b084      	sub	sp, #16
 8004c22:	af00      	add	r7, sp, #0
 8004c24:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004c3e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	68fa      	ldr	r2, [r7, #12]
 8004c44:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004c48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c4c:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8004c4e:	2064      	movs	r0, #100	; 0x64
 8004c50:	f7fc f8ae 	bl	8000db0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	68fa      	ldr	r2, [r7, #12]
 8004c58:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004c5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c60:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8004c62:	200a      	movs	r0, #10
 8004c64:	f7fc f8a4 	bl	8000db0 <HAL_Delay>

  return HAL_OK;
 8004c68:	2300      	movs	r3, #0
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3710      	adds	r7, #16
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}

08004c72 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8004c72:	b480      	push	{r7}
 8004c74:	b085      	sub	sp, #20
 8004c76:	af00      	add	r7, sp, #0
 8004c78:	6078      	str	r0, [r7, #4]
 8004c7a:	460b      	mov	r3, r1
 8004c7c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004c82:	2300      	movs	r3, #0
 8004c84:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004c96:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d109      	bne.n	8004cb6 <USB_DriveVbus+0x44>
 8004ca2:	78fb      	ldrb	r3, [r7, #3]
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d106      	bne.n	8004cb6 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	68fa      	ldr	r2, [r7, #12]
 8004cac:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004cb0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004cb4:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004cbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cc0:	d109      	bne.n	8004cd6 <USB_DriveVbus+0x64>
 8004cc2:	78fb      	ldrb	r3, [r7, #3]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d106      	bne.n	8004cd6 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	68fa      	ldr	r2, [r7, #12]
 8004ccc:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004cd0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004cd4:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8004cd6:	2300      	movs	r3, #0
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	3714      	adds	r7, #20
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bc80      	pop	{r7}
 8004ce0:	4770      	bx	lr

08004ce2 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004ce2:	b480      	push	{r7}
 8004ce4:	b085      	sub	sp, #20
 8004ce6:	af00      	add	r7, sp, #0
 8004ce8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	0c5b      	lsrs	r3, r3, #17
 8004d00:	f003 0303 	and.w	r3, r3, #3
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	3714      	adds	r7, #20
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bc80      	pop	{r7}
 8004d0c:	4770      	bx	lr

08004d0e <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8004d0e:	b480      	push	{r7}
 8004d10:	b085      	sub	sp, #20
 8004d12:	af00      	add	r7, sp, #0
 8004d14:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	b29b      	uxth	r3, r3
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	3714      	adds	r7, #20
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bc80      	pop	{r7}
 8004d2c:	4770      	bx	lr
	...

08004d30 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b088      	sub	sp, #32
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
 8004d38:	4608      	mov	r0, r1
 8004d3a:	4611      	mov	r1, r2
 8004d3c:	461a      	mov	r2, r3
 8004d3e:	4603      	mov	r3, r0
 8004d40:	70fb      	strb	r3, [r7, #3]
 8004d42:	460b      	mov	r3, r1
 8004d44:	70bb      	strb	r3, [r7, #2]
 8004d46:	4613      	mov	r3, r2
 8004d48:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8004d52:	78fb      	ldrb	r3, [r7, #3]
 8004d54:	015a      	lsls	r2, r3, #5
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	4413      	add	r3, r2
 8004d5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d5e:	461a      	mov	r2, r3
 8004d60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004d64:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8004d66:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004d6a:	2b03      	cmp	r3, #3
 8004d6c:	d87e      	bhi.n	8004e6c <USB_HC_Init+0x13c>
 8004d6e:	a201      	add	r2, pc, #4	; (adr r2, 8004d74 <USB_HC_Init+0x44>)
 8004d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d74:	08004d85 	.word	0x08004d85
 8004d78:	08004e2f 	.word	0x08004e2f
 8004d7c:	08004d85 	.word	0x08004d85
 8004d80:	08004df1 	.word	0x08004df1
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004d84:	78fb      	ldrb	r3, [r7, #3]
 8004d86:	015a      	lsls	r2, r3, #5
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	4413      	add	r3, r2
 8004d8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d90:	461a      	mov	r2, r3
 8004d92:	f240 439d 	movw	r3, #1181	; 0x49d
 8004d96:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8004d98:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	da10      	bge.n	8004dc2 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004da0:	78fb      	ldrb	r3, [r7, #3]
 8004da2:	015a      	lsls	r2, r3, #5
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	4413      	add	r3, r2
 8004da8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dac:	68db      	ldr	r3, [r3, #12]
 8004dae:	78fa      	ldrb	r2, [r7, #3]
 8004db0:	0151      	lsls	r1, r2, #5
 8004db2:	693a      	ldr	r2, [r7, #16]
 8004db4:	440a      	add	r2, r1
 8004db6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004dba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dbe:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8004dc0:	e057      	b.n	8004e72 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d051      	beq.n	8004e72 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8004dce:	78fb      	ldrb	r3, [r7, #3]
 8004dd0:	015a      	lsls	r2, r3, #5
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	4413      	add	r3, r2
 8004dd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dda:	68db      	ldr	r3, [r3, #12]
 8004ddc:	78fa      	ldrb	r2, [r7, #3]
 8004dde:	0151      	lsls	r1, r2, #5
 8004de0:	693a      	ldr	r2, [r7, #16]
 8004de2:	440a      	add	r2, r1
 8004de4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004de8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004dec:	60d3      	str	r3, [r2, #12]
      break;
 8004dee:	e040      	b.n	8004e72 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004df0:	78fb      	ldrb	r3, [r7, #3]
 8004df2:	015a      	lsls	r2, r3, #5
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	4413      	add	r3, r2
 8004df8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dfc:	461a      	mov	r2, r3
 8004dfe:	f240 639d 	movw	r3, #1693	; 0x69d
 8004e02:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004e04:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	da34      	bge.n	8004e76 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004e0c:	78fb      	ldrb	r3, [r7, #3]
 8004e0e:	015a      	lsls	r2, r3, #5
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	4413      	add	r3, r2
 8004e14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e18:	68db      	ldr	r3, [r3, #12]
 8004e1a:	78fa      	ldrb	r2, [r7, #3]
 8004e1c:	0151      	lsls	r1, r2, #5
 8004e1e:	693a      	ldr	r2, [r7, #16]
 8004e20:	440a      	add	r2, r1
 8004e22:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e2a:	60d3      	str	r3, [r2, #12]
      }

      break;
 8004e2c:	e023      	b.n	8004e76 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004e2e:	78fb      	ldrb	r3, [r7, #3]
 8004e30:	015a      	lsls	r2, r3, #5
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	4413      	add	r3, r2
 8004e36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e3a:	461a      	mov	r2, r3
 8004e3c:	f240 2325 	movw	r3, #549	; 0x225
 8004e40:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004e42:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	da17      	bge.n	8004e7a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8004e4a:	78fb      	ldrb	r3, [r7, #3]
 8004e4c:	015a      	lsls	r2, r3, #5
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	4413      	add	r3, r2
 8004e52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e56:	68db      	ldr	r3, [r3, #12]
 8004e58:	78fa      	ldrb	r2, [r7, #3]
 8004e5a:	0151      	lsls	r1, r2, #5
 8004e5c:	693a      	ldr	r2, [r7, #16]
 8004e5e:	440a      	add	r2, r1
 8004e60:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e64:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8004e68:	60d3      	str	r3, [r2, #12]
      }
      break;
 8004e6a:	e006      	b.n	8004e7a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	77fb      	strb	r3, [r7, #31]
      break;
 8004e70:	e004      	b.n	8004e7c <USB_HC_Init+0x14c>
      break;
 8004e72:	bf00      	nop
 8004e74:	e002      	b.n	8004e7c <USB_HC_Init+0x14c>
      break;
 8004e76:	bf00      	nop
 8004e78:	e000      	b.n	8004e7c <USB_HC_Init+0x14c>
      break;
 8004e7a:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e82:	699a      	ldr	r2, [r3, #24]
 8004e84:	78fb      	ldrb	r3, [r7, #3]
 8004e86:	f003 030f 	and.w	r3, r3, #15
 8004e8a:	2101      	movs	r1, #1
 8004e8c:	fa01 f303 	lsl.w	r3, r1, r3
 8004e90:	6939      	ldr	r1, [r7, #16]
 8004e92:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004e96:	4313      	orrs	r3, r2
 8004e98:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	699b      	ldr	r3, [r3, #24]
 8004e9e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8004ea6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	da03      	bge.n	8004eb6 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8004eae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004eb2:	61bb      	str	r3, [r7, #24]
 8004eb4:	e001      	b.n	8004eba <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f7ff ff11 	bl	8004ce2 <USB_GetHostSpeed>
 8004ec0:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8004ec2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004ec6:	2b02      	cmp	r3, #2
 8004ec8:	d106      	bne.n	8004ed8 <USB_HC_Init+0x1a8>
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2b02      	cmp	r3, #2
 8004ece:	d003      	beq.n	8004ed8 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8004ed0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004ed4:	617b      	str	r3, [r7, #20]
 8004ed6:	e001      	b.n	8004edc <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8004ed8:	2300      	movs	r3, #0
 8004eda:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004edc:	787b      	ldrb	r3, [r7, #1]
 8004ede:	059b      	lsls	r3, r3, #22
 8004ee0:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004ee4:	78bb      	ldrb	r3, [r7, #2]
 8004ee6:	02db      	lsls	r3, r3, #11
 8004ee8:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004eec:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004eee:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004ef2:	049b      	lsls	r3, r3, #18
 8004ef4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004ef8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004efa:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004efc:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004f00:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004f02:	69bb      	ldr	r3, [r7, #24]
 8004f04:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004f06:	78fb      	ldrb	r3, [r7, #3]
 8004f08:	0159      	lsls	r1, r3, #5
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	440b      	add	r3, r1
 8004f0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f12:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004f18:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8004f1a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004f1e:	2b03      	cmp	r3, #3
 8004f20:	d10f      	bne.n	8004f42 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8004f22:	78fb      	ldrb	r3, [r7, #3]
 8004f24:	015a      	lsls	r2, r3, #5
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	4413      	add	r3, r2
 8004f2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	78fa      	ldrb	r2, [r7, #3]
 8004f32:	0151      	lsls	r1, r2, #5
 8004f34:	693a      	ldr	r2, [r7, #16]
 8004f36:	440a      	add	r2, r1
 8004f38:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f3c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004f40:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8004f42:	7ffb      	ldrb	r3, [r7, #31]
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3720      	adds	r7, #32
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}

08004f4c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b08c      	sub	sp, #48	; 0x30
 8004f50:	af02      	add	r7, sp, #8
 8004f52:	60f8      	str	r0, [r7, #12]
 8004f54:	60b9      	str	r1, [r7, #8]
 8004f56:	4613      	mov	r3, r2
 8004f58:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	785b      	ldrb	r3, [r3, #1]
 8004f62:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8004f64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004f68:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d02d      	beq.n	8004fd2 <USB_HC_StartXfer+0x86>
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	791b      	ldrb	r3, [r3, #4]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d129      	bne.n	8004fd2 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8004f7e:	79fb      	ldrb	r3, [r7, #7]
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d117      	bne.n	8004fb4 <USB_HC_StartXfer+0x68>
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	79db      	ldrb	r3, [r3, #7]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d003      	beq.n	8004f94 <USB_HC_StartXfer+0x48>
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	79db      	ldrb	r3, [r3, #7]
 8004f90:	2b02      	cmp	r3, #2
 8004f92:	d10f      	bne.n	8004fb4 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8004f94:	69fb      	ldr	r3, [r7, #28]
 8004f96:	015a      	lsls	r2, r3, #5
 8004f98:	6a3b      	ldr	r3, [r7, #32]
 8004f9a:	4413      	add	r3, r2
 8004f9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fa0:	68db      	ldr	r3, [r3, #12]
 8004fa2:	69fa      	ldr	r2, [r7, #28]
 8004fa4:	0151      	lsls	r1, r2, #5
 8004fa6:	6a3a      	ldr	r2, [r7, #32]
 8004fa8:	440a      	add	r2, r1
 8004faa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004fae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fb2:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8004fb4:	79fb      	ldrb	r3, [r7, #7]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d10b      	bne.n	8004fd2 <USB_HC_StartXfer+0x86>
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	795b      	ldrb	r3, [r3, #5]
 8004fbe:	2b01      	cmp	r3, #1
 8004fc0:	d107      	bne.n	8004fd2 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	785b      	ldrb	r3, [r3, #1]
 8004fc6:	4619      	mov	r1, r3
 8004fc8:	68f8      	ldr	r0, [r7, #12]
 8004fca:	f000 fa2d 	bl	8005428 <USB_DoPing>
      return HAL_OK;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	e0f8      	b.n	80051c4 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	695b      	ldr	r3, [r3, #20]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d018      	beq.n	800500c <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	695b      	ldr	r3, [r3, #20]
 8004fde:	68ba      	ldr	r2, [r7, #8]
 8004fe0:	8912      	ldrh	r2, [r2, #8]
 8004fe2:	4413      	add	r3, r2
 8004fe4:	3b01      	subs	r3, #1
 8004fe6:	68ba      	ldr	r2, [r7, #8]
 8004fe8:	8912      	ldrh	r2, [r2, #8]
 8004fea:	fbb3 f3f2 	udiv	r3, r3, r2
 8004fee:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8004ff0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004ff2:	8b7b      	ldrh	r3, [r7, #26]
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	d90b      	bls.n	8005010 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8004ff8:	8b7b      	ldrh	r3, [r7, #26]
 8004ffa:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8004ffc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004ffe:	68ba      	ldr	r2, [r7, #8]
 8005000:	8912      	ldrh	r2, [r2, #8]
 8005002:	fb02 f203 	mul.w	r2, r2, r3
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	611a      	str	r2, [r3, #16]
 800500a:	e001      	b.n	8005010 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800500c:	2301      	movs	r3, #1
 800500e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	78db      	ldrb	r3, [r3, #3]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d007      	beq.n	8005028 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005018:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800501a:	68ba      	ldr	r2, [r7, #8]
 800501c:	8912      	ldrh	r2, [r2, #8]
 800501e:	fb02 f203 	mul.w	r2, r2, r3
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	611a      	str	r2, [r3, #16]
 8005026:	e003      	b.n	8005030 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	695a      	ldr	r2, [r3, #20]
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	691b      	ldr	r3, [r3, #16]
 8005034:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005038:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800503a:	04d9      	lsls	r1, r3, #19
 800503c:	4b63      	ldr	r3, [pc, #396]	; (80051cc <USB_HC_StartXfer+0x280>)
 800503e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005040:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	7a9b      	ldrb	r3, [r3, #10]
 8005046:	075b      	lsls	r3, r3, #29
 8005048:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800504c:	69f9      	ldr	r1, [r7, #28]
 800504e:	0148      	lsls	r0, r1, #5
 8005050:	6a39      	ldr	r1, [r7, #32]
 8005052:	4401      	add	r1, r0
 8005054:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005058:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800505a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800505c:	79fb      	ldrb	r3, [r7, #7]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d009      	beq.n	8005076 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	68d9      	ldr	r1, [r3, #12]
 8005066:	69fb      	ldr	r3, [r7, #28]
 8005068:	015a      	lsls	r2, r3, #5
 800506a:	6a3b      	ldr	r3, [r7, #32]
 800506c:	4413      	add	r3, r2
 800506e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005072:	460a      	mov	r2, r1
 8005074:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005076:	6a3b      	ldr	r3, [r7, #32]
 8005078:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	f003 0301 	and.w	r3, r3, #1
 8005082:	2b00      	cmp	r3, #0
 8005084:	bf0c      	ite	eq
 8005086:	2301      	moveq	r3, #1
 8005088:	2300      	movne	r3, #0
 800508a:	b2db      	uxtb	r3, r3
 800508c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800508e:	69fb      	ldr	r3, [r7, #28]
 8005090:	015a      	lsls	r2, r3, #5
 8005092:	6a3b      	ldr	r3, [r7, #32]
 8005094:	4413      	add	r3, r2
 8005096:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	69fa      	ldr	r2, [r7, #28]
 800509e:	0151      	lsls	r1, r2, #5
 80050a0:	6a3a      	ldr	r2, [r7, #32]
 80050a2:	440a      	add	r2, r1
 80050a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80050a8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80050ac:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80050ae:	69fb      	ldr	r3, [r7, #28]
 80050b0:	015a      	lsls	r2, r3, #5
 80050b2:	6a3b      	ldr	r3, [r7, #32]
 80050b4:	4413      	add	r3, r2
 80050b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050ba:	681a      	ldr	r2, [r3, #0]
 80050bc:	7e7b      	ldrb	r3, [r7, #25]
 80050be:	075b      	lsls	r3, r3, #29
 80050c0:	69f9      	ldr	r1, [r7, #28]
 80050c2:	0148      	lsls	r0, r1, #5
 80050c4:	6a39      	ldr	r1, [r7, #32]
 80050c6:	4401      	add	r1, r0
 80050c8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80050cc:	4313      	orrs	r3, r2
 80050ce:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80050d0:	69fb      	ldr	r3, [r7, #28]
 80050d2:	015a      	lsls	r2, r3, #5
 80050d4:	6a3b      	ldr	r3, [r7, #32]
 80050d6:	4413      	add	r3, r2
 80050d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80050e6:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	78db      	ldrb	r3, [r3, #3]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d004      	beq.n	80050fa <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050f6:	613b      	str	r3, [r7, #16]
 80050f8:	e003      	b.n	8005102 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005100:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005108:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800510a:	69fb      	ldr	r3, [r7, #28]
 800510c:	015a      	lsls	r2, r3, #5
 800510e:	6a3b      	ldr	r3, [r7, #32]
 8005110:	4413      	add	r3, r2
 8005112:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005116:	461a      	mov	r2, r3
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800511c:	79fb      	ldrb	r3, [r7, #7]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d001      	beq.n	8005126 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8005122:	2300      	movs	r3, #0
 8005124:	e04e      	b.n	80051c4 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	78db      	ldrb	r3, [r3, #3]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d149      	bne.n	80051c2 <USB_HC_StartXfer+0x276>
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	695b      	ldr	r3, [r3, #20]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d045      	beq.n	80051c2 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	79db      	ldrb	r3, [r3, #7]
 800513a:	2b03      	cmp	r3, #3
 800513c:	d830      	bhi.n	80051a0 <USB_HC_StartXfer+0x254>
 800513e:	a201      	add	r2, pc, #4	; (adr r2, 8005144 <USB_HC_StartXfer+0x1f8>)
 8005140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005144:	08005155 	.word	0x08005155
 8005148:	08005179 	.word	0x08005179
 800514c:	08005155 	.word	0x08005155
 8005150:	08005179 	.word	0x08005179
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	695b      	ldr	r3, [r3, #20]
 8005158:	3303      	adds	r3, #3
 800515a:	089b      	lsrs	r3, r3, #2
 800515c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800515e:	8afa      	ldrh	r2, [r7, #22]
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005164:	b29b      	uxth	r3, r3
 8005166:	429a      	cmp	r2, r3
 8005168:	d91c      	bls.n	80051a4 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	699b      	ldr	r3, [r3, #24]
 800516e:	f043 0220 	orr.w	r2, r3, #32
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	619a      	str	r2, [r3, #24]
        }
        break;
 8005176:	e015      	b.n	80051a4 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	695b      	ldr	r3, [r3, #20]
 800517c:	3303      	adds	r3, #3
 800517e:	089b      	lsrs	r3, r3, #2
 8005180:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005182:	8afa      	ldrh	r2, [r7, #22]
 8005184:	6a3b      	ldr	r3, [r7, #32]
 8005186:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800518a:	691b      	ldr	r3, [r3, #16]
 800518c:	b29b      	uxth	r3, r3
 800518e:	429a      	cmp	r2, r3
 8005190:	d90a      	bls.n	80051a8 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	699b      	ldr	r3, [r3, #24]
 8005196:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	619a      	str	r2, [r3, #24]
        }
        break;
 800519e:	e003      	b.n	80051a8 <USB_HC_StartXfer+0x25c>

      default:
        break;
 80051a0:	bf00      	nop
 80051a2:	e002      	b.n	80051aa <USB_HC_StartXfer+0x25e>
        break;
 80051a4:	bf00      	nop
 80051a6:	e000      	b.n	80051aa <USB_HC_StartXfer+0x25e>
        break;
 80051a8:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	68d9      	ldr	r1, [r3, #12]
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	785a      	ldrb	r2, [r3, #1]
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	695b      	ldr	r3, [r3, #20]
 80051b6:	b29b      	uxth	r3, r3
 80051b8:	2000      	movs	r0, #0
 80051ba:	9000      	str	r0, [sp, #0]
 80051bc:	68f8      	ldr	r0, [r7, #12]
 80051be:	f7ff fb5d 	bl	800487c <USB_WritePacket>
  }

  return HAL_OK;
 80051c2:	2300      	movs	r3, #0
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	3728      	adds	r7, #40	; 0x28
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}
 80051cc:	1ff80000 	.word	0x1ff80000

080051d0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b085      	sub	sp, #20
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051e2:	695b      	ldr	r3, [r3, #20]
 80051e4:	b29b      	uxth	r3, r3
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3714      	adds	r7, #20
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bc80      	pop	{r7}
 80051ee:	4770      	bx	lr

080051f0 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b089      	sub	sp, #36	; 0x24
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
 80051f8:	460b      	mov	r3, r1
 80051fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8005200:	78fb      	ldrb	r3, [r7, #3]
 8005202:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8005204:	2300      	movs	r3, #0
 8005206:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	015a      	lsls	r2, r3, #5
 800520c:	69bb      	ldr	r3, [r7, #24]
 800520e:	4413      	add	r3, r2
 8005210:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	0c9b      	lsrs	r3, r3, #18
 8005218:	f003 0303 	and.w	r3, r3, #3
 800521c:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	015a      	lsls	r2, r3, #5
 8005222:	69bb      	ldr	r3, [r7, #24]
 8005224:	4413      	add	r3, r2
 8005226:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	0fdb      	lsrs	r3, r3, #31
 800522e:	f003 0301 	and.w	r3, r3, #1
 8005232:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	f003 0320 	and.w	r3, r3, #32
 800523c:	2b20      	cmp	r3, #32
 800523e:	d104      	bne.n	800524a <USB_HC_Halt+0x5a>
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d101      	bne.n	800524a <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8005246:	2300      	movs	r3, #0
 8005248:	e0e8      	b.n	800541c <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d002      	beq.n	8005256 <USB_HC_Halt+0x66>
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	2b02      	cmp	r3, #2
 8005254:	d173      	bne.n	800533e <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	015a      	lsls	r2, r3, #5
 800525a:	69bb      	ldr	r3, [r7, #24]
 800525c:	4413      	add	r3, r2
 800525e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	697a      	ldr	r2, [r7, #20]
 8005266:	0151      	lsls	r1, r2, #5
 8005268:	69ba      	ldr	r2, [r7, #24]
 800526a:	440a      	add	r2, r1
 800526c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005270:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005274:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	f003 0320 	and.w	r3, r3, #32
 800527e:	2b00      	cmp	r3, #0
 8005280:	f040 80cb 	bne.w	800541a <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005288:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800528c:	2b00      	cmp	r3, #0
 800528e:	d143      	bne.n	8005318 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	015a      	lsls	r2, r3, #5
 8005294:	69bb      	ldr	r3, [r7, #24]
 8005296:	4413      	add	r3, r2
 8005298:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	697a      	ldr	r2, [r7, #20]
 80052a0:	0151      	lsls	r1, r2, #5
 80052a2:	69ba      	ldr	r2, [r7, #24]
 80052a4:	440a      	add	r2, r1
 80052a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052aa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80052ae:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	015a      	lsls	r2, r3, #5
 80052b4:	69bb      	ldr	r3, [r7, #24]
 80052b6:	4413      	add	r3, r2
 80052b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	697a      	ldr	r2, [r7, #20]
 80052c0:	0151      	lsls	r1, r2, #5
 80052c2:	69ba      	ldr	r2, [r7, #24]
 80052c4:	440a      	add	r2, r1
 80052c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052ca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80052ce:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	015a      	lsls	r2, r3, #5
 80052d4:	69bb      	ldr	r3, [r7, #24]
 80052d6:	4413      	add	r3, r2
 80052d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	697a      	ldr	r2, [r7, #20]
 80052e0:	0151      	lsls	r1, r2, #5
 80052e2:	69ba      	ldr	r2, [r7, #24]
 80052e4:	440a      	add	r2, r1
 80052e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052ea:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80052ee:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 80052f0:	69fb      	ldr	r3, [r7, #28]
 80052f2:	3301      	adds	r3, #1
 80052f4:	61fb      	str	r3, [r7, #28]
 80052f6:	69fb      	ldr	r3, [r7, #28]
 80052f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80052fc:	d81d      	bhi.n	800533a <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	015a      	lsls	r2, r3, #5
 8005302:	69bb      	ldr	r3, [r7, #24]
 8005304:	4413      	add	r3, r2
 8005306:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005310:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005314:	d0ec      	beq.n	80052f0 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005316:	e080      	b.n	800541a <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	015a      	lsls	r2, r3, #5
 800531c:	69bb      	ldr	r3, [r7, #24]
 800531e:	4413      	add	r3, r2
 8005320:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	697a      	ldr	r2, [r7, #20]
 8005328:	0151      	lsls	r1, r2, #5
 800532a:	69ba      	ldr	r2, [r7, #24]
 800532c:	440a      	add	r2, r1
 800532e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005332:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005336:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005338:	e06f      	b.n	800541a <USB_HC_Halt+0x22a>
            break;
 800533a:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800533c:	e06d      	b.n	800541a <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	015a      	lsls	r2, r3, #5
 8005342:	69bb      	ldr	r3, [r7, #24]
 8005344:	4413      	add	r3, r2
 8005346:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	697a      	ldr	r2, [r7, #20]
 800534e:	0151      	lsls	r1, r2, #5
 8005350:	69ba      	ldr	r2, [r7, #24]
 8005352:	440a      	add	r2, r1
 8005354:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005358:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800535c:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800535e:	69bb      	ldr	r3, [r7, #24]
 8005360:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005364:	691b      	ldr	r3, [r3, #16]
 8005366:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800536a:	2b00      	cmp	r3, #0
 800536c:	d143      	bne.n	80053f6 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	015a      	lsls	r2, r3, #5
 8005372:	69bb      	ldr	r3, [r7, #24]
 8005374:	4413      	add	r3, r2
 8005376:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	697a      	ldr	r2, [r7, #20]
 800537e:	0151      	lsls	r1, r2, #5
 8005380:	69ba      	ldr	r2, [r7, #24]
 8005382:	440a      	add	r2, r1
 8005384:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005388:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800538c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	015a      	lsls	r2, r3, #5
 8005392:	69bb      	ldr	r3, [r7, #24]
 8005394:	4413      	add	r3, r2
 8005396:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	697a      	ldr	r2, [r7, #20]
 800539e:	0151      	lsls	r1, r2, #5
 80053a0:	69ba      	ldr	r2, [r7, #24]
 80053a2:	440a      	add	r2, r1
 80053a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053a8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80053ac:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	015a      	lsls	r2, r3, #5
 80053b2:	69bb      	ldr	r3, [r7, #24]
 80053b4:	4413      	add	r3, r2
 80053b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	697a      	ldr	r2, [r7, #20]
 80053be:	0151      	lsls	r1, r2, #5
 80053c0:	69ba      	ldr	r2, [r7, #24]
 80053c2:	440a      	add	r2, r1
 80053c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053c8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80053cc:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80053ce:	69fb      	ldr	r3, [r7, #28]
 80053d0:	3301      	adds	r3, #1
 80053d2:	61fb      	str	r3, [r7, #28]
 80053d4:	69fb      	ldr	r3, [r7, #28]
 80053d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80053da:	d81d      	bhi.n	8005418 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	015a      	lsls	r2, r3, #5
 80053e0:	69bb      	ldr	r3, [r7, #24]
 80053e2:	4413      	add	r3, r2
 80053e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80053ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80053f2:	d0ec      	beq.n	80053ce <USB_HC_Halt+0x1de>
 80053f4:	e011      	b.n	800541a <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	015a      	lsls	r2, r3, #5
 80053fa:	69bb      	ldr	r3, [r7, #24]
 80053fc:	4413      	add	r3, r2
 80053fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	697a      	ldr	r2, [r7, #20]
 8005406:	0151      	lsls	r1, r2, #5
 8005408:	69ba      	ldr	r2, [r7, #24]
 800540a:	440a      	add	r2, r1
 800540c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005410:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005414:	6013      	str	r3, [r2, #0]
 8005416:	e000      	b.n	800541a <USB_HC_Halt+0x22a>
          break;
 8005418:	bf00      	nop
    }
  }

  return HAL_OK;
 800541a:	2300      	movs	r3, #0
}
 800541c:	4618      	mov	r0, r3
 800541e:	3724      	adds	r7, #36	; 0x24
 8005420:	46bd      	mov	sp, r7
 8005422:	bc80      	pop	{r7}
 8005424:	4770      	bx	lr
	...

08005428 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005428:	b480      	push	{r7}
 800542a:	b087      	sub	sp, #28
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	460b      	mov	r3, r1
 8005432:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005438:	78fb      	ldrb	r3, [r7, #3]
 800543a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800543c:	2301      	movs	r3, #1
 800543e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	04da      	lsls	r2, r3, #19
 8005444:	4b14      	ldr	r3, [pc, #80]	; (8005498 <USB_DoPing+0x70>)
 8005446:	4013      	ands	r3, r2
 8005448:	693a      	ldr	r2, [r7, #16]
 800544a:	0151      	lsls	r1, r2, #5
 800544c:	697a      	ldr	r2, [r7, #20]
 800544e:	440a      	add	r2, r1
 8005450:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005454:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005458:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	015a      	lsls	r2, r3, #5
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	4413      	add	r3, r2
 8005462:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005470:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005478:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	015a      	lsls	r2, r3, #5
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	4413      	add	r3, r2
 8005482:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005486:	461a      	mov	r2, r3
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800548c:	2300      	movs	r3, #0
}
 800548e:	4618      	mov	r0, r3
 8005490:	371c      	adds	r7, #28
 8005492:	46bd      	mov	sp, r7
 8005494:	bc80      	pop	{r7}
 8005496:	4770      	bx	lr
 8005498:	1ff80000 	.word	0x1ff80000

0800549c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b086      	sub	sp, #24
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80054a8:	2300      	movs	r3, #0
 80054aa:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f7ff f945 	bl	800473c <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80054b2:	2110      	movs	r1, #16
 80054b4:	6878      	ldr	r0, [r7, #4]
 80054b6:	f7ff f99d 	bl	80047f4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f7ff f9be 	bl	800483c <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80054c0:	2300      	movs	r3, #0
 80054c2:	613b      	str	r3, [r7, #16]
 80054c4:	e01f      	b.n	8005506 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 80054c6:	693b      	ldr	r3, [r7, #16]
 80054c8:	015a      	lsls	r2, r3, #5
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	4413      	add	r3, r2
 80054ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80054dc:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80054e4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80054ec:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	015a      	lsls	r2, r3, #5
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	4413      	add	r3, r2
 80054f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054fa:	461a      	mov	r2, r3
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	3301      	adds	r3, #1
 8005504:	613b      	str	r3, [r7, #16]
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	2b0f      	cmp	r3, #15
 800550a:	d9dc      	bls.n	80054c6 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800550c:	2300      	movs	r3, #0
 800550e:	613b      	str	r3, [r7, #16]
 8005510:	e034      	b.n	800557c <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	015a      	lsls	r2, r3, #5
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	4413      	add	r3, r2
 800551a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005528:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005530:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005538:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	015a      	lsls	r2, r3, #5
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	4413      	add	r3, r2
 8005542:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005546:	461a      	mov	r2, r3
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	3301      	adds	r3, #1
 8005550:	617b      	str	r3, [r7, #20]
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005558:	d80c      	bhi.n	8005574 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	015a      	lsls	r2, r3, #5
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	4413      	add	r3, r2
 8005562:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800556c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005570:	d0ec      	beq.n	800554c <USB_StopHost+0xb0>
 8005572:	e000      	b.n	8005576 <USB_StopHost+0xda>
        break;
 8005574:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	3301      	adds	r3, #1
 800557a:	613b      	str	r3, [r7, #16]
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	2b0f      	cmp	r3, #15
 8005580:	d9c7      	bls.n	8005512 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005588:	461a      	mov	r2, r3
 800558a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800558e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005596:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	f7ff f8bf 	bl	800471c <USB_EnableGlobalInt>

  return HAL_OK;
 800559e:	2300      	movs	r3, #0
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3718      	adds	r7, #24
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}

080055a8 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80055a8:	b590      	push	{r4, r7, lr}
 80055aa:	b089      	sub	sp, #36	; 0x24
 80055ac:	af04      	add	r7, sp, #16
 80055ae:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80055b0:	2301      	movs	r3, #1
 80055b2:	2202      	movs	r2, #2
 80055b4:	2102      	movs	r1, #2
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f000 fc5f 	bl	8005e7a <USBH_FindInterface>
 80055bc:	4603      	mov	r3, r0
 80055be:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80055c0:	7bfb      	ldrb	r3, [r7, #15]
 80055c2:	2bff      	cmp	r3, #255	; 0xff
 80055c4:	d002      	beq.n	80055cc <USBH_CDC_InterfaceInit+0x24>
 80055c6:	7bfb      	ldrb	r3, [r7, #15]
 80055c8:	2b01      	cmp	r3, #1
 80055ca:	d901      	bls.n	80055d0 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80055cc:	2302      	movs	r3, #2
 80055ce:	e13d      	b.n	800584c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80055d0:	7bfb      	ldrb	r3, [r7, #15]
 80055d2:	4619      	mov	r1, r3
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f000 fc35 	bl	8005e44 <USBH_SelectInterface>
 80055da:	4603      	mov	r3, r0
 80055dc:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80055de:	7bbb      	ldrb	r3, [r7, #14]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d001      	beq.n	80055e8 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80055e4:	2302      	movs	r3, #2
 80055e6:	e131      	b.n	800584c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80055ee:	2050      	movs	r0, #80	; 0x50
 80055f0:	f002 f9ea 	bl	80079c8 <malloc>
 80055f4:	4603      	mov	r3, r0
 80055f6:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80055fe:	69db      	ldr	r3, [r3, #28]
 8005600:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d101      	bne.n	800560c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8005608:	2302      	movs	r3, #2
 800560a:	e11f      	b.n	800584c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800560c:	2250      	movs	r2, #80	; 0x50
 800560e:	2100      	movs	r1, #0
 8005610:	68b8      	ldr	r0, [r7, #8]
 8005612:	f002 f9e9 	bl	80079e8 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8005616:	7bfb      	ldrb	r3, [r7, #15]
 8005618:	687a      	ldr	r2, [r7, #4]
 800561a:	211a      	movs	r1, #26
 800561c:	fb01 f303 	mul.w	r3, r1, r3
 8005620:	4413      	add	r3, r2
 8005622:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005626:	781b      	ldrb	r3, [r3, #0]
 8005628:	b25b      	sxtb	r3, r3
 800562a:	2b00      	cmp	r3, #0
 800562c:	da15      	bge.n	800565a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800562e:	7bfb      	ldrb	r3, [r7, #15]
 8005630:	687a      	ldr	r2, [r7, #4]
 8005632:	211a      	movs	r1, #26
 8005634:	fb01 f303 	mul.w	r3, r1, r3
 8005638:	4413      	add	r3, r2
 800563a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800563e:	781a      	ldrb	r2, [r3, #0]
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005644:	7bfb      	ldrb	r3, [r7, #15]
 8005646:	687a      	ldr	r2, [r7, #4]
 8005648:	211a      	movs	r1, #26
 800564a:	fb01 f303 	mul.w	r3, r1, r3
 800564e:	4413      	add	r3, r2
 8005650:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005654:	881a      	ldrh	r2, [r3, #0]
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	785b      	ldrb	r3, [r3, #1]
 800565e:	4619      	mov	r1, r3
 8005660:	6878      	ldr	r0, [r7, #4]
 8005662:	f001 fe22 	bl	80072aa <USBH_AllocPipe>
 8005666:	4603      	mov	r3, r0
 8005668:	461a      	mov	r2, r3
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	7819      	ldrb	r1, [r3, #0]
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	7858      	ldrb	r0, [r3, #1]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005682:	68ba      	ldr	r2, [r7, #8]
 8005684:	8952      	ldrh	r2, [r2, #10]
 8005686:	9202      	str	r2, [sp, #8]
 8005688:	2203      	movs	r2, #3
 800568a:	9201      	str	r2, [sp, #4]
 800568c:	9300      	str	r3, [sp, #0]
 800568e:	4623      	mov	r3, r4
 8005690:	4602      	mov	r2, r0
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f001 fdda 	bl	800724c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	781b      	ldrb	r3, [r3, #0]
 800569c:	2200      	movs	r2, #0
 800569e:	4619      	mov	r1, r3
 80056a0:	6878      	ldr	r0, [r7, #4]
 80056a2:	f002 f8e5 	bl	8007870 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80056a6:	2300      	movs	r3, #0
 80056a8:	2200      	movs	r2, #0
 80056aa:	210a      	movs	r1, #10
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	f000 fbe4 	bl	8005e7a <USBH_FindInterface>
 80056b2:	4603      	mov	r3, r0
 80056b4:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80056b6:	7bfb      	ldrb	r3, [r7, #15]
 80056b8:	2bff      	cmp	r3, #255	; 0xff
 80056ba:	d002      	beq.n	80056c2 <USBH_CDC_InterfaceInit+0x11a>
 80056bc:	7bfb      	ldrb	r3, [r7, #15]
 80056be:	2b01      	cmp	r3, #1
 80056c0:	d901      	bls.n	80056c6 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80056c2:	2302      	movs	r3, #2
 80056c4:	e0c2      	b.n	800584c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80056c6:	7bfb      	ldrb	r3, [r7, #15]
 80056c8:	687a      	ldr	r2, [r7, #4]
 80056ca:	211a      	movs	r1, #26
 80056cc:	fb01 f303 	mul.w	r3, r1, r3
 80056d0:	4413      	add	r3, r2
 80056d2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80056d6:	781b      	ldrb	r3, [r3, #0]
 80056d8:	b25b      	sxtb	r3, r3
 80056da:	2b00      	cmp	r3, #0
 80056dc:	da16      	bge.n	800570c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80056de:	7bfb      	ldrb	r3, [r7, #15]
 80056e0:	687a      	ldr	r2, [r7, #4]
 80056e2:	211a      	movs	r1, #26
 80056e4:	fb01 f303 	mul.w	r3, r1, r3
 80056e8:	4413      	add	r3, r2
 80056ea:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80056ee:	781a      	ldrb	r2, [r3, #0]
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80056f4:	7bfb      	ldrb	r3, [r7, #15]
 80056f6:	687a      	ldr	r2, [r7, #4]
 80056f8:	211a      	movs	r1, #26
 80056fa:	fb01 f303 	mul.w	r3, r1, r3
 80056fe:	4413      	add	r3, r2
 8005700:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005704:	881a      	ldrh	r2, [r3, #0]
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	835a      	strh	r2, [r3, #26]
 800570a:	e015      	b.n	8005738 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800570c:	7bfb      	ldrb	r3, [r7, #15]
 800570e:	687a      	ldr	r2, [r7, #4]
 8005710:	211a      	movs	r1, #26
 8005712:	fb01 f303 	mul.w	r3, r1, r3
 8005716:	4413      	add	r3, r2
 8005718:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800571c:	781a      	ldrb	r2, [r3, #0]
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005722:	7bfb      	ldrb	r3, [r7, #15]
 8005724:	687a      	ldr	r2, [r7, #4]
 8005726:	211a      	movs	r1, #26
 8005728:	fb01 f303 	mul.w	r3, r1, r3
 800572c:	4413      	add	r3, r2
 800572e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005732:	881a      	ldrh	r2, [r3, #0]
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8005738:	7bfb      	ldrb	r3, [r7, #15]
 800573a:	687a      	ldr	r2, [r7, #4]
 800573c:	211a      	movs	r1, #26
 800573e:	fb01 f303 	mul.w	r3, r1, r3
 8005742:	4413      	add	r3, r2
 8005744:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005748:	781b      	ldrb	r3, [r3, #0]
 800574a:	b25b      	sxtb	r3, r3
 800574c:	2b00      	cmp	r3, #0
 800574e:	da16      	bge.n	800577e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005750:	7bfb      	ldrb	r3, [r7, #15]
 8005752:	687a      	ldr	r2, [r7, #4]
 8005754:	211a      	movs	r1, #26
 8005756:	fb01 f303 	mul.w	r3, r1, r3
 800575a:	4413      	add	r3, r2
 800575c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005760:	781a      	ldrb	r2, [r3, #0]
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005766:	7bfb      	ldrb	r3, [r7, #15]
 8005768:	687a      	ldr	r2, [r7, #4]
 800576a:	211a      	movs	r1, #26
 800576c:	fb01 f303 	mul.w	r3, r1, r3
 8005770:	4413      	add	r3, r2
 8005772:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005776:	881a      	ldrh	r2, [r3, #0]
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	835a      	strh	r2, [r3, #26]
 800577c:	e015      	b.n	80057aa <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800577e:	7bfb      	ldrb	r3, [r7, #15]
 8005780:	687a      	ldr	r2, [r7, #4]
 8005782:	211a      	movs	r1, #26
 8005784:	fb01 f303 	mul.w	r3, r1, r3
 8005788:	4413      	add	r3, r2
 800578a:	f203 3356 	addw	r3, r3, #854	; 0x356
 800578e:	781a      	ldrb	r2, [r3, #0]
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005794:	7bfb      	ldrb	r3, [r7, #15]
 8005796:	687a      	ldr	r2, [r7, #4]
 8005798:	211a      	movs	r1, #26
 800579a:	fb01 f303 	mul.w	r3, r1, r3
 800579e:	4413      	add	r3, r2
 80057a0:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80057a4:	881a      	ldrh	r2, [r3, #0]
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	7b9b      	ldrb	r3, [r3, #14]
 80057ae:	4619      	mov	r1, r3
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	f001 fd7a 	bl	80072aa <USBH_AllocPipe>
 80057b6:	4603      	mov	r3, r0
 80057b8:	461a      	mov	r2, r3
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	7bdb      	ldrb	r3, [r3, #15]
 80057c2:	4619      	mov	r1, r3
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	f001 fd70 	bl	80072aa <USBH_AllocPipe>
 80057ca:	4603      	mov	r3, r0
 80057cc:	461a      	mov	r2, r3
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	7b59      	ldrb	r1, [r3, #13]
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	7b98      	ldrb	r0, [r3, #14]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80057e6:	68ba      	ldr	r2, [r7, #8]
 80057e8:	8b12      	ldrh	r2, [r2, #24]
 80057ea:	9202      	str	r2, [sp, #8]
 80057ec:	2202      	movs	r2, #2
 80057ee:	9201      	str	r2, [sp, #4]
 80057f0:	9300      	str	r3, [sp, #0]
 80057f2:	4623      	mov	r3, r4
 80057f4:	4602      	mov	r2, r0
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f001 fd28 	bl	800724c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	7b19      	ldrb	r1, [r3, #12]
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	7bd8      	ldrb	r0, [r3, #15]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005810:	68ba      	ldr	r2, [r7, #8]
 8005812:	8b52      	ldrh	r2, [r2, #26]
 8005814:	9202      	str	r2, [sp, #8]
 8005816:	2202      	movs	r2, #2
 8005818:	9201      	str	r2, [sp, #4]
 800581a:	9300      	str	r3, [sp, #0]
 800581c:	4623      	mov	r3, r4
 800581e:	4602      	mov	r2, r0
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f001 fd13 	bl	800724c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	2200      	movs	r2, #0
 800582a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	7b5b      	ldrb	r3, [r3, #13]
 8005832:	2200      	movs	r2, #0
 8005834:	4619      	mov	r1, r3
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f002 f81a 	bl	8007870 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	7b1b      	ldrb	r3, [r3, #12]
 8005840:	2200      	movs	r2, #0
 8005842:	4619      	mov	r1, r3
 8005844:	6878      	ldr	r0, [r7, #4]
 8005846:	f002 f813 	bl	8007870 <USBH_LL_SetToggle>

  return USBH_OK;
 800584a:	2300      	movs	r3, #0
}
 800584c:	4618      	mov	r0, r3
 800584e:	3714      	adds	r7, #20
 8005850:	46bd      	mov	sp, r7
 8005852:	bd90      	pop	{r4, r7, pc}

08005854 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b084      	sub	sp, #16
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005862:	69db      	ldr	r3, [r3, #28]
 8005864:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	781b      	ldrb	r3, [r3, #0]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d00e      	beq.n	800588c <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	781b      	ldrb	r3, [r3, #0]
 8005872:	4619      	mov	r1, r3
 8005874:	6878      	ldr	r0, [r7, #4]
 8005876:	f001 fd08 	bl	800728a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	781b      	ldrb	r3, [r3, #0]
 800587e:	4619      	mov	r1, r3
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	f001 fd33 	bl	80072ec <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2200      	movs	r2, #0
 800588a:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	7b1b      	ldrb	r3, [r3, #12]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d00e      	beq.n	80058b2 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	7b1b      	ldrb	r3, [r3, #12]
 8005898:	4619      	mov	r1, r3
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f001 fcf5 	bl	800728a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	7b1b      	ldrb	r3, [r3, #12]
 80058a4:	4619      	mov	r1, r3
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f001 fd20 	bl	80072ec <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2200      	movs	r2, #0
 80058b0:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	7b5b      	ldrb	r3, [r3, #13]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d00e      	beq.n	80058d8 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	7b5b      	ldrb	r3, [r3, #13]
 80058be:	4619      	mov	r1, r3
 80058c0:	6878      	ldr	r0, [r7, #4]
 80058c2:	f001 fce2 	bl	800728a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	7b5b      	ldrb	r3, [r3, #13]
 80058ca:	4619      	mov	r1, r3
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f001 fd0d 	bl	80072ec <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2200      	movs	r2, #0
 80058d6:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80058de:	69db      	ldr	r3, [r3, #28]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d00b      	beq.n	80058fc <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80058ea:	69db      	ldr	r3, [r3, #28]
 80058ec:	4618      	mov	r0, r3
 80058ee:	f002 f873 	bl	80079d8 <free>
    phost->pActiveClass->pData = 0U;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80058f8:	2200      	movs	r2, #0
 80058fa:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80058fc:	2300      	movs	r3, #0
}
 80058fe:	4618      	mov	r0, r3
 8005900:	3710      	adds	r7, #16
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}

08005906 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8005906:	b580      	push	{r7, lr}
 8005908:	b084      	sub	sp, #16
 800590a:	af00      	add	r7, sp, #0
 800590c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005914:	69db      	ldr	r3, [r3, #28]
 8005916:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	3340      	adds	r3, #64	; 0x40
 800591c:	4619      	mov	r1, r3
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	f000 f8b0 	bl	8005a84 <GetLineCoding>
 8005924:	4603      	mov	r3, r0
 8005926:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8005928:	7afb      	ldrb	r3, [r7, #11]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d105      	bne.n	800593a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005934:	2102      	movs	r1, #2
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800593a:	7afb      	ldrb	r3, [r7, #11]
}
 800593c:	4618      	mov	r0, r3
 800593e:	3710      	adds	r7, #16
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}

08005944 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b084      	sub	sp, #16
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800594c:	2301      	movs	r3, #1
 800594e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8005950:	2300      	movs	r3, #0
 8005952:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800595a:	69db      	ldr	r3, [r3, #28]
 800595c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8005964:	2b04      	cmp	r3, #4
 8005966:	d877      	bhi.n	8005a58 <USBH_CDC_Process+0x114>
 8005968:	a201      	add	r2, pc, #4	; (adr r2, 8005970 <USBH_CDC_Process+0x2c>)
 800596a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800596e:	bf00      	nop
 8005970:	08005985 	.word	0x08005985
 8005974:	0800598b 	.word	0x0800598b
 8005978:	080059bb 	.word	0x080059bb
 800597c:	08005a2f 	.word	0x08005a2f
 8005980:	08005a3d 	.word	0x08005a3d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8005984:	2300      	movs	r3, #0
 8005986:	73fb      	strb	r3, [r7, #15]
      break;
 8005988:	e06d      	b.n	8005a66 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800598e:	4619      	mov	r1, r3
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f000 f896 	bl	8005ac2 <SetLineCoding>
 8005996:	4603      	mov	r3, r0
 8005998:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800599a:	7bbb      	ldrb	r3, [r7, #14]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d104      	bne.n	80059aa <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	2202      	movs	r2, #2
 80059a4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80059a8:	e058      	b.n	8005a5c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80059aa:	7bbb      	ldrb	r3, [r7, #14]
 80059ac:	2b01      	cmp	r3, #1
 80059ae:	d055      	beq.n	8005a5c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	2204      	movs	r2, #4
 80059b4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80059b8:	e050      	b.n	8005a5c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	3340      	adds	r3, #64	; 0x40
 80059be:	4619      	mov	r1, r3
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	f000 f85f 	bl	8005a84 <GetLineCoding>
 80059c6:	4603      	mov	r3, r0
 80059c8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80059ca:	7bbb      	ldrb	r3, [r7, #14]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d126      	bne.n	8005a1e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	2200      	movs	r2, #0
 80059d4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059e2:	791b      	ldrb	r3, [r3, #4]
 80059e4:	429a      	cmp	r2, r3
 80059e6:	d13b      	bne.n	8005a60 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059f2:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80059f4:	429a      	cmp	r2, r3
 80059f6:	d133      	bne.n	8005a60 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a02:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005a04:	429a      	cmp	r2, r3
 8005a06:	d12b      	bne.n	8005a60 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a10:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005a12:	429a      	cmp	r2, r3
 8005a14:	d124      	bne.n	8005a60 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f000 f955 	bl	8005cc6 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8005a1c:	e020      	b.n	8005a60 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8005a1e:	7bbb      	ldrb	r3, [r7, #14]
 8005a20:	2b01      	cmp	r3, #1
 8005a22:	d01d      	beq.n	8005a60 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	2204      	movs	r2, #4
 8005a28:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8005a2c:	e018      	b.n	8005a60 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f000 f866 	bl	8005b00 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	f000 f8d9 	bl	8005bec <CDC_ProcessReception>
      break;
 8005a3a:	e014      	b.n	8005a66 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8005a3c:	2100      	movs	r1, #0
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f000 ffd7 	bl	80069f2 <USBH_ClrFeature>
 8005a44:	4603      	mov	r3, r0
 8005a46:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005a48:	7bbb      	ldrb	r3, [r7, #14]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d10a      	bne.n	8005a64 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	2200      	movs	r2, #0
 8005a52:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8005a56:	e005      	b.n	8005a64 <USBH_CDC_Process+0x120>

    default:
      break;
 8005a58:	bf00      	nop
 8005a5a:	e004      	b.n	8005a66 <USBH_CDC_Process+0x122>
      break;
 8005a5c:	bf00      	nop
 8005a5e:	e002      	b.n	8005a66 <USBH_CDC_Process+0x122>
      break;
 8005a60:	bf00      	nop
 8005a62:	e000      	b.n	8005a66 <USBH_CDC_Process+0x122>
      break;
 8005a64:	bf00      	nop

  }

  return status;
 8005a66:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	3710      	adds	r7, #16
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}

08005a70 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b083      	sub	sp, #12
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8005a78:	2300      	movs	r3, #0
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	370c      	adds	r7, #12
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bc80      	pop	{r7}
 8005a82:	4770      	bx	lr

08005a84 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b082      	sub	sp, #8
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
 8005a8c:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	22a1      	movs	r2, #161	; 0xa1
 8005a92:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2221      	movs	r2, #33	; 0x21
 8005a98:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2207      	movs	r2, #7
 8005aaa:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	2207      	movs	r2, #7
 8005ab0:	4619      	mov	r1, r3
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f001 f978 	bl	8006da8 <USBH_CtlReq>
 8005ab8:	4603      	mov	r3, r0
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	3708      	adds	r7, #8
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bd80      	pop	{r7, pc}

08005ac2 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8005ac2:	b580      	push	{r7, lr}
 8005ac4:	b082      	sub	sp, #8
 8005ac6:	af00      	add	r7, sp, #0
 8005ac8:	6078      	str	r0, [r7, #4]
 8005aca:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2221      	movs	r2, #33	; 0x21
 8005ad0:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2220      	movs	r2, #32
 8005ad6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2200      	movs	r2, #0
 8005adc:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2207      	movs	r2, #7
 8005ae8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	2207      	movs	r2, #7
 8005aee:	4619      	mov	r1, r3
 8005af0:	6878      	ldr	r0, [r7, #4]
 8005af2:	f001 f959 	bl	8006da8 <USBH_CtlReq>
 8005af6:	4603      	mov	r3, r0
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	3708      	adds	r7, #8
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd80      	pop	{r7, pc}

08005b00 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b086      	sub	sp, #24
 8005b04:	af02      	add	r7, sp, #8
 8005b06:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005b0e:	69db      	ldr	r3, [r3, #28]
 8005b10:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005b12:	2300      	movs	r3, #0
 8005b14:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d002      	beq.n	8005b26 <CDC_ProcessTransmission+0x26>
 8005b20:	2b02      	cmp	r3, #2
 8005b22:	d023      	beq.n	8005b6c <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8005b24:	e05e      	b.n	8005be4 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b2a:	68fa      	ldr	r2, [r7, #12]
 8005b2c:	8b12      	ldrh	r2, [r2, #24]
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d90b      	bls.n	8005b4a <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	69d9      	ldr	r1, [r3, #28]
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	8b1a      	ldrh	r2, [r3, #24]
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	7b5b      	ldrb	r3, [r3, #13]
 8005b3e:	2001      	movs	r0, #1
 8005b40:	9000      	str	r0, [sp, #0]
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f001 fb3f 	bl	80071c6 <USBH_BulkSendData>
 8005b48:	e00b      	b.n	8005b62 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8005b52:	b29a      	uxth	r2, r3
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	7b5b      	ldrb	r3, [r3, #13]
 8005b58:	2001      	movs	r0, #1
 8005b5a:	9000      	str	r0, [sp, #0]
 8005b5c:	6878      	ldr	r0, [r7, #4]
 8005b5e:	f001 fb32 	bl	80071c6 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2202      	movs	r2, #2
 8005b66:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005b6a:	e03b      	b.n	8005be4 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	7b5b      	ldrb	r3, [r3, #13]
 8005b70:	4619      	mov	r1, r3
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f001 fe52 	bl	800781c <USBH_LL_GetURBState>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8005b7c:	7afb      	ldrb	r3, [r7, #11]
 8005b7e:	2b01      	cmp	r3, #1
 8005b80:	d128      	bne.n	8005bd4 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b86:	68fa      	ldr	r2, [r7, #12]
 8005b88:	8b12      	ldrh	r2, [r2, #24]
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d90e      	bls.n	8005bac <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b92:	68fa      	ldr	r2, [r7, #12]
 8005b94:	8b12      	ldrh	r2, [r2, #24]
 8005b96:	1a9a      	subs	r2, r3, r2
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	69db      	ldr	r3, [r3, #28]
 8005ba0:	68fa      	ldr	r2, [r7, #12]
 8005ba2:	8b12      	ldrh	r2, [r2, #24]
 8005ba4:	441a      	add	r2, r3
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	61da      	str	r2, [r3, #28]
 8005baa:	e002      	b.n	8005bb2 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d004      	beq.n	8005bc4 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	2201      	movs	r2, #1
 8005bbe:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005bc2:	e00e      	b.n	8005be2 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	f000 f868 	bl	8005ca2 <USBH_CDC_TransmitCallback>
      break;
 8005bd2:	e006      	b.n	8005be2 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8005bd4:	7afb      	ldrb	r3, [r7, #11]
 8005bd6:	2b02      	cmp	r3, #2
 8005bd8:	d103      	bne.n	8005be2 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2201      	movs	r2, #1
 8005bde:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005be2:	bf00      	nop
  }
}
 8005be4:	bf00      	nop
 8005be6:	3710      	adds	r7, #16
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}

08005bec <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b086      	sub	sp, #24
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005bfa:	69db      	ldr	r3, [r3, #28]
 8005bfc:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8005c08:	2b03      	cmp	r3, #3
 8005c0a:	d002      	beq.n	8005c12 <CDC_ProcessReception+0x26>
 8005c0c:	2b04      	cmp	r3, #4
 8005c0e:	d00e      	beq.n	8005c2e <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8005c10:	e043      	b.n	8005c9a <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	6a19      	ldr	r1, [r3, #32]
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	8b5a      	ldrh	r2, [r3, #26]
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	7b1b      	ldrb	r3, [r3, #12]
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f001 faf6 	bl	8007210 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	2204      	movs	r2, #4
 8005c28:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8005c2c:	e035      	b.n	8005c9a <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	7b1b      	ldrb	r3, [r3, #12]
 8005c32:	4619      	mov	r1, r3
 8005c34:	6878      	ldr	r0, [r7, #4]
 8005c36:	f001 fdf1 	bl	800781c <USBH_LL_GetURBState>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8005c3e:	7cfb      	ldrb	r3, [r7, #19]
 8005c40:	2b01      	cmp	r3, #1
 8005c42:	d129      	bne.n	8005c98 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	7b1b      	ldrb	r3, [r3, #12]
 8005c48:	4619      	mov	r1, r3
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f001 fd54 	bl	80076f8 <USBH_LL_GetLastXferSize>
 8005c50:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c56:	68fa      	ldr	r2, [r7, #12]
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	d016      	beq.n	8005c8a <CDC_ProcessReception+0x9e>
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	8b5b      	ldrh	r3, [r3, #26]
 8005c60:	461a      	mov	r2, r3
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d910      	bls.n	8005c8a <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	1ad2      	subs	r2, r2, r3
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	6a1a      	ldr	r2, [r3, #32]
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	441a      	add	r2, r3
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	2203      	movs	r2, #3
 8005c84:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8005c88:	e006      	b.n	8005c98 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f000 f80e 	bl	8005cb4 <USBH_CDC_ReceiveCallback>
      break;
 8005c98:	bf00      	nop
  }
}
 8005c9a:	bf00      	nop
 8005c9c:	3718      	adds	r7, #24
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bd80      	pop	{r7, pc}

08005ca2 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8005ca2:	b480      	push	{r7}
 8005ca4:	b083      	sub	sp, #12
 8005ca6:	af00      	add	r7, sp, #0
 8005ca8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005caa:	bf00      	nop
 8005cac:	370c      	adds	r7, #12
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bc80      	pop	{r7}
 8005cb2:	4770      	bx	lr

08005cb4 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b083      	sub	sp, #12
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005cbc:	bf00      	nop
 8005cbe:	370c      	adds	r7, #12
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bc80      	pop	{r7}
 8005cc4:	4770      	bx	lr

08005cc6 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8005cc6:	b480      	push	{r7}
 8005cc8:	b083      	sub	sp, #12
 8005cca:	af00      	add	r7, sp, #0
 8005ccc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005cce:	bf00      	nop
 8005cd0:	370c      	adds	r7, #12
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bc80      	pop	{r7}
 8005cd6:	4770      	bx	lr

08005cd8 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b084      	sub	sp, #16
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	60f8      	str	r0, [r7, #12]
 8005ce0:	60b9      	str	r1, [r7, #8]
 8005ce2:	4613      	mov	r3, r2
 8005ce4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d101      	bne.n	8005cf0 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8005cec:	2302      	movs	r3, #2
 8005cee:	e029      	b.n	8005d44 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	79fa      	ldrb	r2, [r7, #7]
 8005cf4:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2200      	movs	r2, #0
 8005d04:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8005d08:	68f8      	ldr	r0, [r7, #12]
 8005d0a:	f000 f81f 	bl	8005d4c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2200      	movs	r2, #0
 8005d12:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2200      	movs	r2, #0
 8005d22:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d003      	beq.n	8005d3c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	68ba      	ldr	r2, [r7, #8]
 8005d38:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8005d3c:	68f8      	ldr	r0, [r7, #12]
 8005d3e:	f001 fc27 	bl	8007590 <USBH_LL_Init>

  return USBH_OK;
 8005d42:	2300      	movs	r3, #0
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	3710      	adds	r7, #16
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}

08005d4c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b085      	sub	sp, #20
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8005d54:	2300      	movs	r3, #0
 8005d56:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005d58:	2300      	movs	r3, #0
 8005d5a:	60fb      	str	r3, [r7, #12]
 8005d5c:	e009      	b.n	8005d72 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8005d5e:	687a      	ldr	r2, [r7, #4]
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	33e0      	adds	r3, #224	; 0xe0
 8005d64:	009b      	lsls	r3, r3, #2
 8005d66:	4413      	add	r3, r2
 8005d68:	2200      	movs	r2, #0
 8005d6a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	3301      	adds	r3, #1
 8005d70:	60fb      	str	r3, [r7, #12]
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2b0e      	cmp	r3, #14
 8005d76:	d9f2      	bls.n	8005d5e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005d78:	2300      	movs	r3, #0
 8005d7a:	60fb      	str	r3, [r7, #12]
 8005d7c:	e009      	b.n	8005d92 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8005d7e:	687a      	ldr	r2, [r7, #4]
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	4413      	add	r3, r2
 8005d84:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005d88:	2200      	movs	r2, #0
 8005d8a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	3301      	adds	r3, #1
 8005d90:	60fb      	str	r3, [r7, #12]
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d98:	d3f1      	bcc.n	8005d7e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2200      	movs	r2, #0
 8005da4:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2201      	movs	r2, #1
 8005daa:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2200      	movs	r2, #0
 8005db0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2201      	movs	r2, #1
 8005db8:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2240      	movs	r2, #64	; 0x40
 8005dbe:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2201      	movs	r2, #1
 8005dd2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2200      	movs	r2, #0
 8005de2:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8005de6:	2300      	movs	r3, #0
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	3714      	adds	r7, #20
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bc80      	pop	{r7}
 8005df0:	4770      	bx	lr

08005df2 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8005df2:	b480      	push	{r7}
 8005df4:	b085      	sub	sp, #20
 8005df6:	af00      	add	r7, sp, #0
 8005df8:	6078      	str	r0, [r7, #4]
 8005dfa:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d016      	beq.n	8005e34 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d10e      	bne.n	8005e2e <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005e16:	1c59      	adds	r1, r3, #1
 8005e18:	687a      	ldr	r2, [r7, #4]
 8005e1a:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8005e1e:	687a      	ldr	r2, [r7, #4]
 8005e20:	33de      	adds	r3, #222	; 0xde
 8005e22:	6839      	ldr	r1, [r7, #0]
 8005e24:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8005e28:	2300      	movs	r3, #0
 8005e2a:	73fb      	strb	r3, [r7, #15]
 8005e2c:	e004      	b.n	8005e38 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8005e2e:	2302      	movs	r3, #2
 8005e30:	73fb      	strb	r3, [r7, #15]
 8005e32:	e001      	b.n	8005e38 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8005e34:	2302      	movs	r3, #2
 8005e36:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005e38:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3714      	adds	r7, #20
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bc80      	pop	{r7}
 8005e42:	4770      	bx	lr

08005e44 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b085      	sub	sp, #20
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
 8005e4c:	460b      	mov	r3, r1
 8005e4e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8005e50:	2300      	movs	r3, #0
 8005e52:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8005e5a:	78fa      	ldrb	r2, [r7, #3]
 8005e5c:	429a      	cmp	r2, r3
 8005e5e:	d204      	bcs.n	8005e6a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	78fa      	ldrb	r2, [r7, #3]
 8005e64:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8005e68:	e001      	b.n	8005e6e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8005e6a:	2302      	movs	r3, #2
 8005e6c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005e6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e70:	4618      	mov	r0, r3
 8005e72:	3714      	adds	r7, #20
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bc80      	pop	{r7}
 8005e78:	4770      	bx	lr

08005e7a <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8005e7a:	b480      	push	{r7}
 8005e7c:	b087      	sub	sp, #28
 8005e7e:	af00      	add	r7, sp, #0
 8005e80:	6078      	str	r0, [r7, #4]
 8005e82:	4608      	mov	r0, r1
 8005e84:	4611      	mov	r1, r2
 8005e86:	461a      	mov	r2, r3
 8005e88:	4603      	mov	r3, r0
 8005e8a:	70fb      	strb	r3, [r7, #3]
 8005e8c:	460b      	mov	r3, r1
 8005e8e:	70bb      	strb	r3, [r7, #2]
 8005e90:	4613      	mov	r3, r2
 8005e92:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8005e94:	2300      	movs	r3, #0
 8005e96:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8005e98:	2300      	movs	r3, #0
 8005e9a:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8005ea2:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005ea4:	e025      	b.n	8005ef2 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8005ea6:	7dfb      	ldrb	r3, [r7, #23]
 8005ea8:	221a      	movs	r2, #26
 8005eaa:	fb02 f303 	mul.w	r3, r2, r3
 8005eae:	3308      	adds	r3, #8
 8005eb0:	68fa      	ldr	r2, [r7, #12]
 8005eb2:	4413      	add	r3, r2
 8005eb4:	3302      	adds	r3, #2
 8005eb6:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	795b      	ldrb	r3, [r3, #5]
 8005ebc:	78fa      	ldrb	r2, [r7, #3]
 8005ebe:	429a      	cmp	r2, r3
 8005ec0:	d002      	beq.n	8005ec8 <USBH_FindInterface+0x4e>
 8005ec2:	78fb      	ldrb	r3, [r7, #3]
 8005ec4:	2bff      	cmp	r3, #255	; 0xff
 8005ec6:	d111      	bne.n	8005eec <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8005ecc:	78ba      	ldrb	r2, [r7, #2]
 8005ece:	429a      	cmp	r2, r3
 8005ed0:	d002      	beq.n	8005ed8 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005ed2:	78bb      	ldrb	r3, [r7, #2]
 8005ed4:	2bff      	cmp	r3, #255	; 0xff
 8005ed6:	d109      	bne.n	8005eec <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005ed8:	693b      	ldr	r3, [r7, #16]
 8005eda:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005edc:	787a      	ldrb	r2, [r7, #1]
 8005ede:	429a      	cmp	r2, r3
 8005ee0:	d002      	beq.n	8005ee8 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005ee2:	787b      	ldrb	r3, [r7, #1]
 8005ee4:	2bff      	cmp	r3, #255	; 0xff
 8005ee6:	d101      	bne.n	8005eec <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8005ee8:	7dfb      	ldrb	r3, [r7, #23]
 8005eea:	e006      	b.n	8005efa <USBH_FindInterface+0x80>
    }
    if_ix++;
 8005eec:	7dfb      	ldrb	r3, [r7, #23]
 8005eee:	3301      	adds	r3, #1
 8005ef0:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005ef2:	7dfb      	ldrb	r3, [r7, #23]
 8005ef4:	2b01      	cmp	r3, #1
 8005ef6:	d9d6      	bls.n	8005ea6 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8005ef8:	23ff      	movs	r3, #255	; 0xff
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	371c      	adds	r7, #28
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bc80      	pop	{r7}
 8005f02:	4770      	bx	lr

08005f04 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b082      	sub	sp, #8
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	f001 fb7b 	bl	8007608 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8005f12:	2101      	movs	r1, #1
 8005f14:	6878      	ldr	r0, [r7, #4]
 8005f16:	f001 fc94 	bl	8007842 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8005f1a:	2300      	movs	r3, #0
}
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	3708      	adds	r7, #8
 8005f20:	46bd      	mov	sp, r7
 8005f22:	bd80      	pop	{r7, pc}

08005f24 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b088      	sub	sp, #32
 8005f28:	af04      	add	r7, sp, #16
 8005f2a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8005f2c:	2302      	movs	r3, #2
 8005f2e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8005f30:	2300      	movs	r3, #0
 8005f32:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8005f3a:	b2db      	uxtb	r3, r3
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	d102      	bne.n	8005f46 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2203      	movs	r2, #3
 8005f44:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	781b      	ldrb	r3, [r3, #0]
 8005f4a:	b2db      	uxtb	r3, r3
 8005f4c:	2b0b      	cmp	r3, #11
 8005f4e:	f200 81b3 	bhi.w	80062b8 <USBH_Process+0x394>
 8005f52:	a201      	add	r2, pc, #4	; (adr r2, 8005f58 <USBH_Process+0x34>)
 8005f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f58:	08005f89 	.word	0x08005f89
 8005f5c:	08005fbb 	.word	0x08005fbb
 8005f60:	08006023 	.word	0x08006023
 8005f64:	08006253 	.word	0x08006253
 8005f68:	080062b9 	.word	0x080062b9
 8005f6c:	080060c7 	.word	0x080060c7
 8005f70:	080061f9 	.word	0x080061f9
 8005f74:	080060fd 	.word	0x080060fd
 8005f78:	0800611d 	.word	0x0800611d
 8005f7c:	0800613d 	.word	0x0800613d
 8005f80:	0800616b 	.word	0x0800616b
 8005f84:	0800623b 	.word	0x0800623b
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8005f8e:	b2db      	uxtb	r3, r3
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	f000 8193 	beq.w	80062bc <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2201      	movs	r2, #1
 8005f9a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8005f9c:	20c8      	movs	r0, #200	; 0xc8
 8005f9e:	f001 fc96 	bl	80078ce <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f001 fb8d 	bl	80076c2 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2200      	movs	r2, #0
 8005fac:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8005fb8:	e180      	b.n	80062bc <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8005fc0:	2b01      	cmp	r3, #1
 8005fc2:	d107      	bne.n	8005fd4 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2202      	movs	r2, #2
 8005fd0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005fd2:	e182      	b.n	80062da <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005fda:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005fde:	d914      	bls.n	800600a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8005fe6:	3301      	adds	r3, #1
 8005fe8:	b2da      	uxtb	r2, r3
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8005ff6:	2b03      	cmp	r3, #3
 8005ff8:	d903      	bls.n	8006002 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	220d      	movs	r2, #13
 8005ffe:	701a      	strb	r2, [r3, #0]
      break;
 8006000:	e16b      	b.n	80062da <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2200      	movs	r2, #0
 8006006:	701a      	strb	r2, [r3, #0]
      break;
 8006008:	e167      	b.n	80062da <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006010:	f103 020a 	add.w	r2, r3, #10
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800601a:	200a      	movs	r0, #10
 800601c:	f001 fc57 	bl	80078ce <USBH_Delay>
      break;
 8006020:	e15b      	b.n	80062da <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006028:	2b00      	cmp	r3, #0
 800602a:	d005      	beq.n	8006038 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006032:	2104      	movs	r1, #4
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006038:	2064      	movs	r0, #100	; 0x64
 800603a:	f001 fc48 	bl	80078ce <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f001 fb18 	bl	8007674 <USBH_LL_GetSpeed>
 8006044:	4603      	mov	r3, r0
 8006046:	461a      	mov	r2, r3
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2205      	movs	r2, #5
 8006052:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006054:	2100      	movs	r1, #0
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f001 f927 	bl	80072aa <USBH_AllocPipe>
 800605c:	4603      	mov	r3, r0
 800605e:	461a      	mov	r2, r3
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006064:	2180      	movs	r1, #128	; 0x80
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f001 f91f 	bl	80072aa <USBH_AllocPipe>
 800606c:	4603      	mov	r3, r0
 800606e:	461a      	mov	r2, r3
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	7919      	ldrb	r1, [r3, #4]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006084:	687a      	ldr	r2, [r7, #4]
 8006086:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006088:	b292      	uxth	r2, r2
 800608a:	9202      	str	r2, [sp, #8]
 800608c:	2200      	movs	r2, #0
 800608e:	9201      	str	r2, [sp, #4]
 8006090:	9300      	str	r3, [sp, #0]
 8006092:	4603      	mov	r3, r0
 8006094:	2280      	movs	r2, #128	; 0x80
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f001 f8d8 	bl	800724c <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	7959      	ldrb	r1, [r3, #5]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80060ac:	687a      	ldr	r2, [r7, #4]
 80060ae:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80060b0:	b292      	uxth	r2, r2
 80060b2:	9202      	str	r2, [sp, #8]
 80060b4:	2200      	movs	r2, #0
 80060b6:	9201      	str	r2, [sp, #4]
 80060b8:	9300      	str	r3, [sp, #0]
 80060ba:	4603      	mov	r3, r0
 80060bc:	2200      	movs	r2, #0
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f001 f8c4 	bl	800724c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80060c4:	e109      	b.n	80062da <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f000 f90c 	bl	80062e4 <USBH_HandleEnum>
 80060cc:	4603      	mov	r3, r0
 80060ce:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80060d0:	7bbb      	ldrb	r3, [r7, #14]
 80060d2:	b2db      	uxtb	r3, r3
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	f040 80f3 	bne.w	80062c0 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2200      	movs	r2, #0
 80060de:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80060e8:	2b01      	cmp	r3, #1
 80060ea:	d103      	bne.n	80060f4 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2208      	movs	r2, #8
 80060f0:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80060f2:	e0e5      	b.n	80062c0 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2207      	movs	r2, #7
 80060f8:	701a      	strb	r2, [r3, #0]
      break;
 80060fa:	e0e1      	b.n	80062c0 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006102:	2b00      	cmp	r3, #0
 8006104:	f000 80de 	beq.w	80062c4 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800610e:	2101      	movs	r1, #1
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2208      	movs	r2, #8
 8006118:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800611a:	e0d3      	b.n	80062c4 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8006122:	b29b      	uxth	r3, r3
 8006124:	4619      	mov	r1, r3
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f000 fc1c 	bl	8006964 <USBH_SetCfg>
 800612c:	4603      	mov	r3, r0
 800612e:	2b00      	cmp	r3, #0
 8006130:	f040 80ca 	bne.w	80062c8 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2209      	movs	r2, #9
 8006138:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800613a:	e0c5      	b.n	80062c8 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8006142:	f003 0320 	and.w	r3, r3, #32
 8006146:	2b00      	cmp	r3, #0
 8006148:	d00b      	beq.n	8006162 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800614a:	2101      	movs	r1, #1
 800614c:	6878      	ldr	r0, [r7, #4]
 800614e:	f000 fc2c 	bl	80069aa <USBH_SetFeature>
 8006152:	4603      	mov	r3, r0
 8006154:	2b00      	cmp	r3, #0
 8006156:	f040 80b9 	bne.w	80062cc <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	220a      	movs	r2, #10
 800615e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006160:	e0b4      	b.n	80062cc <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	220a      	movs	r2, #10
 8006166:	701a      	strb	r2, [r3, #0]
      break;
 8006168:	e0b0      	b.n	80062cc <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006170:	2b00      	cmp	r3, #0
 8006172:	f000 80ad 	beq.w	80062d0 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2200      	movs	r2, #0
 800617a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800617e:	2300      	movs	r3, #0
 8006180:	73fb      	strb	r3, [r7, #15]
 8006182:	e016      	b.n	80061b2 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006184:	7bfa      	ldrb	r2, [r7, #15]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	32de      	adds	r2, #222	; 0xde
 800618a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800618e:	791a      	ldrb	r2, [r3, #4]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8006196:	429a      	cmp	r2, r3
 8006198:	d108      	bne.n	80061ac <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 800619a:	7bfa      	ldrb	r2, [r7, #15]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	32de      	adds	r2, #222	; 0xde
 80061a0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 80061aa:	e005      	b.n	80061b8 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80061ac:	7bfb      	ldrb	r3, [r7, #15]
 80061ae:	3301      	adds	r3, #1
 80061b0:	73fb      	strb	r3, [r7, #15]
 80061b2:	7bfb      	ldrb	r3, [r7, #15]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d0e5      	beq.n	8006184 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d016      	beq.n	80061f0 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80061c8:	689b      	ldr	r3, [r3, #8]
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	4798      	blx	r3
 80061ce:	4603      	mov	r3, r0
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d109      	bne.n	80061e8 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2206      	movs	r2, #6
 80061d8:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80061e0:	2103      	movs	r1, #3
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80061e6:	e073      	b.n	80062d0 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	220d      	movs	r2, #13
 80061ec:	701a      	strb	r2, [r3, #0]
      break;
 80061ee:	e06f      	b.n	80062d0 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	220d      	movs	r2, #13
 80061f4:	701a      	strb	r2, [r3, #0]
      break;
 80061f6:	e06b      	b.n	80062d0 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d017      	beq.n	8006232 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006208:	691b      	ldr	r3, [r3, #16]
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	4798      	blx	r3
 800620e:	4603      	mov	r3, r0
 8006210:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006212:	7bbb      	ldrb	r3, [r7, #14]
 8006214:	b2db      	uxtb	r3, r3
 8006216:	2b00      	cmp	r3, #0
 8006218:	d103      	bne.n	8006222 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	220b      	movs	r2, #11
 800621e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006220:	e058      	b.n	80062d4 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 8006222:	7bbb      	ldrb	r3, [r7, #14]
 8006224:	b2db      	uxtb	r3, r3
 8006226:	2b02      	cmp	r3, #2
 8006228:	d154      	bne.n	80062d4 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	220d      	movs	r2, #13
 800622e:	701a      	strb	r2, [r3, #0]
      break;
 8006230:	e050      	b.n	80062d4 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	220d      	movs	r2, #13
 8006236:	701a      	strb	r2, [r3, #0]
      break;
 8006238:	e04c      	b.n	80062d4 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006240:	2b00      	cmp	r3, #0
 8006242:	d049      	beq.n	80062d8 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800624a:	695b      	ldr	r3, [r3, #20]
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	4798      	blx	r3
      }
      break;
 8006250:	e042      	b.n	80062d8 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2200      	movs	r2, #0
 8006256:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f7ff fd76 	bl	8005d4c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006266:	2b00      	cmp	r3, #0
 8006268:	d009      	beq.n	800627e <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006270:	68db      	ldr	r3, [r3, #12]
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2200      	movs	r2, #0
 800627a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006284:	2b00      	cmp	r3, #0
 8006286:	d005      	beq.n	8006294 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800628e:	2105      	movs	r1, #5
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800629a:	b2db      	uxtb	r3, r3
 800629c:	2b01      	cmp	r3, #1
 800629e:	d107      	bne.n	80062b0 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2200      	movs	r2, #0
 80062a4:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	f7ff fe2b 	bl	8005f04 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80062ae:	e014      	b.n	80062da <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 80062b0:	6878      	ldr	r0, [r7, #4]
 80062b2:	f001 f9a9 	bl	8007608 <USBH_LL_Start>
      break;
 80062b6:	e010      	b.n	80062da <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 80062b8:	bf00      	nop
 80062ba:	e00e      	b.n	80062da <USBH_Process+0x3b6>
      break;
 80062bc:	bf00      	nop
 80062be:	e00c      	b.n	80062da <USBH_Process+0x3b6>
      break;
 80062c0:	bf00      	nop
 80062c2:	e00a      	b.n	80062da <USBH_Process+0x3b6>
    break;
 80062c4:	bf00      	nop
 80062c6:	e008      	b.n	80062da <USBH_Process+0x3b6>
      break;
 80062c8:	bf00      	nop
 80062ca:	e006      	b.n	80062da <USBH_Process+0x3b6>
      break;
 80062cc:	bf00      	nop
 80062ce:	e004      	b.n	80062da <USBH_Process+0x3b6>
      break;
 80062d0:	bf00      	nop
 80062d2:	e002      	b.n	80062da <USBH_Process+0x3b6>
      break;
 80062d4:	bf00      	nop
 80062d6:	e000      	b.n	80062da <USBH_Process+0x3b6>
      break;
 80062d8:	bf00      	nop
  }
  return USBH_OK;
 80062da:	2300      	movs	r3, #0
}
 80062dc:	4618      	mov	r0, r3
 80062de:	3710      	adds	r7, #16
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}

080062e4 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b088      	sub	sp, #32
 80062e8:	af04      	add	r7, sp, #16
 80062ea:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80062ec:	2301      	movs	r3, #1
 80062ee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80062f0:	2301      	movs	r3, #1
 80062f2:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	785b      	ldrb	r3, [r3, #1]
 80062f8:	2b07      	cmp	r3, #7
 80062fa:	f200 81c1 	bhi.w	8006680 <USBH_HandleEnum+0x39c>
 80062fe:	a201      	add	r2, pc, #4	; (adr r2, 8006304 <USBH_HandleEnum+0x20>)
 8006300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006304:	08006325 	.word	0x08006325
 8006308:	080063e3 	.word	0x080063e3
 800630c:	0800644d 	.word	0x0800644d
 8006310:	080064db 	.word	0x080064db
 8006314:	08006545 	.word	0x08006545
 8006318:	080065b5 	.word	0x080065b5
 800631c:	080065fb 	.word	0x080065fb
 8006320:	08006641 	.word	0x08006641
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8006324:	2108      	movs	r1, #8
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f000 fa4c 	bl	80067c4 <USBH_Get_DevDesc>
 800632c:	4603      	mov	r3, r0
 800632e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006330:	7bbb      	ldrb	r3, [r7, #14]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d130      	bne.n	8006398 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2201      	movs	r2, #1
 8006344:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	7919      	ldrb	r1, [r3, #4]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006356:	687a      	ldr	r2, [r7, #4]
 8006358:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800635a:	b292      	uxth	r2, r2
 800635c:	9202      	str	r2, [sp, #8]
 800635e:	2200      	movs	r2, #0
 8006360:	9201      	str	r2, [sp, #4]
 8006362:	9300      	str	r3, [sp, #0]
 8006364:	4603      	mov	r3, r0
 8006366:	2280      	movs	r2, #128	; 0x80
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	f000 ff6f 	bl	800724c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	7959      	ldrb	r1, [r3, #5]
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800637e:	687a      	ldr	r2, [r7, #4]
 8006380:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006382:	b292      	uxth	r2, r2
 8006384:	9202      	str	r2, [sp, #8]
 8006386:	2200      	movs	r2, #0
 8006388:	9201      	str	r2, [sp, #4]
 800638a:	9300      	str	r3, [sp, #0]
 800638c:	4603      	mov	r3, r0
 800638e:	2200      	movs	r2, #0
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f000 ff5b 	bl	800724c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006396:	e175      	b.n	8006684 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006398:	7bbb      	ldrb	r3, [r7, #14]
 800639a:	2b03      	cmp	r3, #3
 800639c:	f040 8172 	bne.w	8006684 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80063a6:	3301      	adds	r3, #1
 80063a8:	b2da      	uxtb	r2, r3
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80063b6:	2b03      	cmp	r3, #3
 80063b8:	d903      	bls.n	80063c2 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	220d      	movs	r2, #13
 80063be:	701a      	strb	r2, [r3, #0]
      break;
 80063c0:	e160      	b.n	8006684 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	795b      	ldrb	r3, [r3, #5]
 80063c6:	4619      	mov	r1, r3
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	f000 ff8f 	bl	80072ec <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	791b      	ldrb	r3, [r3, #4]
 80063d2:	4619      	mov	r1, r3
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	f000 ff89 	bl	80072ec <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2200      	movs	r2, #0
 80063de:	701a      	strb	r2, [r3, #0]
      break;
 80063e0:	e150      	b.n	8006684 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80063e2:	2112      	movs	r1, #18
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	f000 f9ed 	bl	80067c4 <USBH_Get_DevDesc>
 80063ea:	4603      	mov	r3, r0
 80063ec:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80063ee:	7bbb      	ldrb	r3, [r7, #14]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d103      	bne.n	80063fc <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2202      	movs	r2, #2
 80063f8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80063fa:	e145      	b.n	8006688 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80063fc:	7bbb      	ldrb	r3, [r7, #14]
 80063fe:	2b03      	cmp	r3, #3
 8006400:	f040 8142 	bne.w	8006688 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800640a:	3301      	adds	r3, #1
 800640c:	b2da      	uxtb	r2, r3
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800641a:	2b03      	cmp	r3, #3
 800641c:	d903      	bls.n	8006426 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	220d      	movs	r2, #13
 8006422:	701a      	strb	r2, [r3, #0]
      break;
 8006424:	e130      	b.n	8006688 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	795b      	ldrb	r3, [r3, #5]
 800642a:	4619      	mov	r1, r3
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f000 ff5d 	bl	80072ec <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	791b      	ldrb	r3, [r3, #4]
 8006436:	4619      	mov	r1, r3
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	f000 ff57 	bl	80072ec <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2200      	movs	r2, #0
 8006442:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2200      	movs	r2, #0
 8006448:	701a      	strb	r2, [r3, #0]
      break;
 800644a:	e11d      	b.n	8006688 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800644c:	2101      	movs	r1, #1
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f000 fa64 	bl	800691c <USBH_SetAddress>
 8006454:	4603      	mov	r3, r0
 8006456:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006458:	7bbb      	ldrb	r3, [r7, #14]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d132      	bne.n	80064c4 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800645e:	2002      	movs	r0, #2
 8006460:	f001 fa35 	bl	80078ce <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2201      	movs	r2, #1
 8006468:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2203      	movs	r2, #3
 8006470:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	7919      	ldrb	r1, [r3, #4]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006482:	687a      	ldr	r2, [r7, #4]
 8006484:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006486:	b292      	uxth	r2, r2
 8006488:	9202      	str	r2, [sp, #8]
 800648a:	2200      	movs	r2, #0
 800648c:	9201      	str	r2, [sp, #4]
 800648e:	9300      	str	r3, [sp, #0]
 8006490:	4603      	mov	r3, r0
 8006492:	2280      	movs	r2, #128	; 0x80
 8006494:	6878      	ldr	r0, [r7, #4]
 8006496:	f000 fed9 	bl	800724c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	7959      	ldrb	r1, [r3, #5]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80064aa:	687a      	ldr	r2, [r7, #4]
 80064ac:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80064ae:	b292      	uxth	r2, r2
 80064b0:	9202      	str	r2, [sp, #8]
 80064b2:	2200      	movs	r2, #0
 80064b4:	9201      	str	r2, [sp, #4]
 80064b6:	9300      	str	r3, [sp, #0]
 80064b8:	4603      	mov	r3, r0
 80064ba:	2200      	movs	r2, #0
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f000 fec5 	bl	800724c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80064c2:	e0e3      	b.n	800668c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80064c4:	7bbb      	ldrb	r3, [r7, #14]
 80064c6:	2b03      	cmp	r3, #3
 80064c8:	f040 80e0 	bne.w	800668c <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	220d      	movs	r2, #13
 80064d0:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2200      	movs	r2, #0
 80064d6:	705a      	strb	r2, [r3, #1]
      break;
 80064d8:	e0d8      	b.n	800668c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80064da:	2109      	movs	r1, #9
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f000 f999 	bl	8006814 <USBH_Get_CfgDesc>
 80064e2:	4603      	mov	r3, r0
 80064e4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80064e6:	7bbb      	ldrb	r3, [r7, #14]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d103      	bne.n	80064f4 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2204      	movs	r2, #4
 80064f0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80064f2:	e0cd      	b.n	8006690 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80064f4:	7bbb      	ldrb	r3, [r7, #14]
 80064f6:	2b03      	cmp	r3, #3
 80064f8:	f040 80ca 	bne.w	8006690 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006502:	3301      	adds	r3, #1
 8006504:	b2da      	uxtb	r2, r3
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006512:	2b03      	cmp	r3, #3
 8006514:	d903      	bls.n	800651e <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	220d      	movs	r2, #13
 800651a:	701a      	strb	r2, [r3, #0]
      break;
 800651c:	e0b8      	b.n	8006690 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	795b      	ldrb	r3, [r3, #5]
 8006522:	4619      	mov	r1, r3
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f000 fee1 	bl	80072ec <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	791b      	ldrb	r3, [r3, #4]
 800652e:	4619      	mov	r1, r3
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	f000 fedb 	bl	80072ec <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2200      	movs	r2, #0
 800653a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2200      	movs	r2, #0
 8006540:	701a      	strb	r2, [r3, #0]
      break;
 8006542:	e0a5      	b.n	8006690 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800654a:	4619      	mov	r1, r3
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	f000 f961 	bl	8006814 <USBH_Get_CfgDesc>
 8006552:	4603      	mov	r3, r0
 8006554:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006556:	7bbb      	ldrb	r3, [r7, #14]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d103      	bne.n	8006564 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2205      	movs	r2, #5
 8006560:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006562:	e097      	b.n	8006694 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006564:	7bbb      	ldrb	r3, [r7, #14]
 8006566:	2b03      	cmp	r3, #3
 8006568:	f040 8094 	bne.w	8006694 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006572:	3301      	adds	r3, #1
 8006574:	b2da      	uxtb	r2, r3
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006582:	2b03      	cmp	r3, #3
 8006584:	d903      	bls.n	800658e <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	220d      	movs	r2, #13
 800658a:	701a      	strb	r2, [r3, #0]
      break;
 800658c:	e082      	b.n	8006694 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	795b      	ldrb	r3, [r3, #5]
 8006592:	4619      	mov	r1, r3
 8006594:	6878      	ldr	r0, [r7, #4]
 8006596:	f000 fea9 	bl	80072ec <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	791b      	ldrb	r3, [r3, #4]
 800659e:	4619      	mov	r1, r3
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	f000 fea3 	bl	80072ec <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2200      	movs	r2, #0
 80065aa:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2200      	movs	r2, #0
 80065b0:	701a      	strb	r2, [r3, #0]
      break;
 80065b2:	e06f      	b.n	8006694 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d019      	beq.n	80065f2 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80065ca:	23ff      	movs	r3, #255	; 0xff
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	f000 f945 	bl	800685c <USBH_Get_StringDesc>
 80065d2:	4603      	mov	r3, r0
 80065d4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80065d6:	7bbb      	ldrb	r3, [r7, #14]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d103      	bne.n	80065e4 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2206      	movs	r2, #6
 80065e0:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80065e2:	e059      	b.n	8006698 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80065e4:	7bbb      	ldrb	r3, [r7, #14]
 80065e6:	2b03      	cmp	r3, #3
 80065e8:	d156      	bne.n	8006698 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2206      	movs	r2, #6
 80065ee:	705a      	strb	r2, [r3, #1]
      break;
 80065f0:	e052      	b.n	8006698 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2206      	movs	r2, #6
 80065f6:	705a      	strb	r2, [r3, #1]
      break;
 80065f8:	e04e      	b.n	8006698 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8006600:	2b00      	cmp	r3, #0
 8006602:	d019      	beq.n	8006638 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006610:	23ff      	movs	r3, #255	; 0xff
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f000 f922 	bl	800685c <USBH_Get_StringDesc>
 8006618:	4603      	mov	r3, r0
 800661a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800661c:	7bbb      	ldrb	r3, [r7, #14]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d103      	bne.n	800662a <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2207      	movs	r2, #7
 8006626:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006628:	e038      	b.n	800669c <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800662a:	7bbb      	ldrb	r3, [r7, #14]
 800662c:	2b03      	cmp	r3, #3
 800662e:	d135      	bne.n	800669c <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2207      	movs	r2, #7
 8006634:	705a      	strb	r2, [r3, #1]
      break;
 8006636:	e031      	b.n	800669c <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2207      	movs	r2, #7
 800663c:	705a      	strb	r2, [r3, #1]
      break;
 800663e:	e02d      	b.n	800669c <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8006646:	2b00      	cmp	r3, #0
 8006648:	d017      	beq.n	800667a <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006656:	23ff      	movs	r3, #255	; 0xff
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f000 f8ff 	bl	800685c <USBH_Get_StringDesc>
 800665e:	4603      	mov	r3, r0
 8006660:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006662:	7bbb      	ldrb	r3, [r7, #14]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d102      	bne.n	800666e <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8006668:	2300      	movs	r3, #0
 800666a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800666c:	e018      	b.n	80066a0 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800666e:	7bbb      	ldrb	r3, [r7, #14]
 8006670:	2b03      	cmp	r3, #3
 8006672:	d115      	bne.n	80066a0 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8006674:	2300      	movs	r3, #0
 8006676:	73fb      	strb	r3, [r7, #15]
      break;
 8006678:	e012      	b.n	80066a0 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800667a:	2300      	movs	r3, #0
 800667c:	73fb      	strb	r3, [r7, #15]
      break;
 800667e:	e00f      	b.n	80066a0 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8006680:	bf00      	nop
 8006682:	e00e      	b.n	80066a2 <USBH_HandleEnum+0x3be>
      break;
 8006684:	bf00      	nop
 8006686:	e00c      	b.n	80066a2 <USBH_HandleEnum+0x3be>
      break;
 8006688:	bf00      	nop
 800668a:	e00a      	b.n	80066a2 <USBH_HandleEnum+0x3be>
      break;
 800668c:	bf00      	nop
 800668e:	e008      	b.n	80066a2 <USBH_HandleEnum+0x3be>
      break;
 8006690:	bf00      	nop
 8006692:	e006      	b.n	80066a2 <USBH_HandleEnum+0x3be>
      break;
 8006694:	bf00      	nop
 8006696:	e004      	b.n	80066a2 <USBH_HandleEnum+0x3be>
      break;
 8006698:	bf00      	nop
 800669a:	e002      	b.n	80066a2 <USBH_HandleEnum+0x3be>
      break;
 800669c:	bf00      	nop
 800669e:	e000      	b.n	80066a2 <USBH_HandleEnum+0x3be>
      break;
 80066a0:	bf00      	nop
  }
  return Status;
 80066a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80066a4:	4618      	mov	r0, r3
 80066a6:	3710      	adds	r7, #16
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bd80      	pop	{r7, pc}

080066ac <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80066ac:	b480      	push	{r7}
 80066ae:	b083      	sub	sp, #12
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
 80066b4:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	683a      	ldr	r2, [r7, #0]
 80066ba:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80066be:	bf00      	nop
 80066c0:	370c      	adds	r7, #12
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bc80      	pop	{r7}
 80066c6:	4770      	bx	lr

080066c8 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b082      	sub	sp, #8
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80066d6:	1c5a      	adds	r2, r3, #1
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f000 f804 	bl	80066ec <USBH_HandleSof>
}
 80066e4:	bf00      	nop
 80066e6:	3708      	adds	r7, #8
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd80      	pop	{r7, pc}

080066ec <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b082      	sub	sp, #8
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	781b      	ldrb	r3, [r3, #0]
 80066f8:	b2db      	uxtb	r3, r3
 80066fa:	2b0b      	cmp	r3, #11
 80066fc:	d10a      	bne.n	8006714 <USBH_HandleSof+0x28>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006704:	2b00      	cmp	r3, #0
 8006706:	d005      	beq.n	8006714 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800670e:	699b      	ldr	r3, [r3, #24]
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	4798      	blx	r3
  }
}
 8006714:	bf00      	nop
 8006716:	3708      	adds	r7, #8
 8006718:	46bd      	mov	sp, r7
 800671a:	bd80      	pop	{r7, pc}

0800671c <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800671c:	b480      	push	{r7}
 800671e:	b083      	sub	sp, #12
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2201      	movs	r2, #1
 8006728:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800672c:	bf00      	nop
}
 800672e:	370c      	adds	r7, #12
 8006730:	46bd      	mov	sp, r7
 8006732:	bc80      	pop	{r7}
 8006734:	4770      	bx	lr

08006736 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8006736:	b480      	push	{r7}
 8006738:	b083      	sub	sp, #12
 800673a:	af00      	add	r7, sp, #0
 800673c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2200      	movs	r2, #0
 8006742:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8006746:	bf00      	nop
}
 8006748:	370c      	adds	r7, #12
 800674a:	46bd      	mov	sp, r7
 800674c:	bc80      	pop	{r7}
 800674e:	4770      	bx	lr

08006750 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8006750:	b480      	push	{r7}
 8006752:	b083      	sub	sp, #12
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2201      	movs	r2, #1
 800675c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2200      	movs	r2, #0
 8006764:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2200      	movs	r2, #0
 800676c:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8006770:	2300      	movs	r3, #0
}
 8006772:	4618      	mov	r0, r3
 8006774:	370c      	adds	r7, #12
 8006776:	46bd      	mov	sp, r7
 8006778:	bc80      	pop	{r7}
 800677a:	4770      	bx	lr

0800677c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b082      	sub	sp, #8
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2201      	movs	r2, #1
 8006788:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2200      	movs	r2, #0
 8006790:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2200      	movs	r2, #0
 8006798:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	f000 ff4e 	bl	800763e <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	791b      	ldrb	r3, [r3, #4]
 80067a6:	4619      	mov	r1, r3
 80067a8:	6878      	ldr	r0, [r7, #4]
 80067aa:	f000 fd9f 	bl	80072ec <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	795b      	ldrb	r3, [r3, #5]
 80067b2:	4619      	mov	r1, r3
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f000 fd99 	bl	80072ec <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80067ba:	2300      	movs	r3, #0
}
 80067bc:	4618      	mov	r0, r3
 80067be:	3708      	adds	r7, #8
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd80      	pop	{r7, pc}

080067c4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b086      	sub	sp, #24
 80067c8:	af02      	add	r7, sp, #8
 80067ca:	6078      	str	r0, [r7, #4]
 80067cc:	460b      	mov	r3, r1
 80067ce:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80067d6:	78fb      	ldrb	r3, [r7, #3]
 80067d8:	b29b      	uxth	r3, r3
 80067da:	9300      	str	r3, [sp, #0]
 80067dc:	4613      	mov	r3, r2
 80067de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80067e2:	2100      	movs	r1, #0
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	f000 f864 	bl	80068b2 <USBH_GetDescriptor>
 80067ea:	4603      	mov	r3, r0
 80067ec:	73fb      	strb	r3, [r7, #15]
 80067ee:	7bfb      	ldrb	r3, [r7, #15]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d10a      	bne.n	800680a <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f203 3026 	addw	r0, r3, #806	; 0x326
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006800:	78fa      	ldrb	r2, [r7, #3]
 8006802:	b292      	uxth	r2, r2
 8006804:	4619      	mov	r1, r3
 8006806:	f000 f918 	bl	8006a3a <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800680a:	7bfb      	ldrb	r3, [r7, #15]
}
 800680c:	4618      	mov	r0, r3
 800680e:	3710      	adds	r7, #16
 8006810:	46bd      	mov	sp, r7
 8006812:	bd80      	pop	{r7, pc}

08006814 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8006814:	b580      	push	{r7, lr}
 8006816:	b086      	sub	sp, #24
 8006818:	af02      	add	r7, sp, #8
 800681a:	6078      	str	r0, [r7, #4]
 800681c:	460b      	mov	r3, r1
 800681e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	331c      	adds	r3, #28
 8006824:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8006826:	887b      	ldrh	r3, [r7, #2]
 8006828:	9300      	str	r3, [sp, #0]
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006830:	2100      	movs	r1, #0
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f000 f83d 	bl	80068b2 <USBH_GetDescriptor>
 8006838:	4603      	mov	r3, r0
 800683a:	72fb      	strb	r3, [r7, #11]
 800683c:	7afb      	ldrb	r3, [r7, #11]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d107      	bne.n	8006852 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006848:	887a      	ldrh	r2, [r7, #2]
 800684a:	68f9      	ldr	r1, [r7, #12]
 800684c:	4618      	mov	r0, r3
 800684e:	f000 f963 	bl	8006b18 <USBH_ParseCfgDesc>
  }

  return status;
 8006852:	7afb      	ldrb	r3, [r7, #11]
}
 8006854:	4618      	mov	r0, r3
 8006856:	3710      	adds	r7, #16
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}

0800685c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b088      	sub	sp, #32
 8006860:	af02      	add	r7, sp, #8
 8006862:	60f8      	str	r0, [r7, #12]
 8006864:	607a      	str	r2, [r7, #4]
 8006866:	461a      	mov	r2, r3
 8006868:	460b      	mov	r3, r1
 800686a:	72fb      	strb	r3, [r7, #11]
 800686c:	4613      	mov	r3, r2
 800686e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8006870:	7afb      	ldrb	r3, [r7, #11]
 8006872:	b29b      	uxth	r3, r3
 8006874:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006878:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8006880:	893b      	ldrh	r3, [r7, #8]
 8006882:	9300      	str	r3, [sp, #0]
 8006884:	460b      	mov	r3, r1
 8006886:	2100      	movs	r1, #0
 8006888:	68f8      	ldr	r0, [r7, #12]
 800688a:	f000 f812 	bl	80068b2 <USBH_GetDescriptor>
 800688e:	4603      	mov	r3, r0
 8006890:	75fb      	strb	r3, [r7, #23]
 8006892:	7dfb      	ldrb	r3, [r7, #23]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d107      	bne.n	80068a8 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800689e:	893a      	ldrh	r2, [r7, #8]
 80068a0:	6879      	ldr	r1, [r7, #4]
 80068a2:	4618      	mov	r0, r3
 80068a4:	f000 fa34 	bl	8006d10 <USBH_ParseStringDesc>
  }

  return status;
 80068a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3718      	adds	r7, #24
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}

080068b2 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 80068b2:	b580      	push	{r7, lr}
 80068b4:	b084      	sub	sp, #16
 80068b6:	af00      	add	r7, sp, #0
 80068b8:	60f8      	str	r0, [r7, #12]
 80068ba:	607b      	str	r3, [r7, #4]
 80068bc:	460b      	mov	r3, r1
 80068be:	72fb      	strb	r3, [r7, #11]
 80068c0:	4613      	mov	r3, r2
 80068c2:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	789b      	ldrb	r3, [r3, #2]
 80068c8:	2b01      	cmp	r3, #1
 80068ca:	d11c      	bne.n	8006906 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80068cc:	7afb      	ldrb	r3, [r7, #11]
 80068ce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80068d2:	b2da      	uxtb	r2, r3
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	2206      	movs	r2, #6
 80068dc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	893a      	ldrh	r2, [r7, #8]
 80068e2:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80068e4:	893b      	ldrh	r3, [r7, #8]
 80068e6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80068ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80068ee:	d104      	bne.n	80068fa <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	f240 4209 	movw	r2, #1033	; 0x409
 80068f6:	829a      	strh	r2, [r3, #20]
 80068f8:	e002      	b.n	8006900 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	2200      	movs	r2, #0
 80068fe:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	8b3a      	ldrh	r2, [r7, #24]
 8006904:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8006906:	8b3b      	ldrh	r3, [r7, #24]
 8006908:	461a      	mov	r2, r3
 800690a:	6879      	ldr	r1, [r7, #4]
 800690c:	68f8      	ldr	r0, [r7, #12]
 800690e:	f000 fa4b 	bl	8006da8 <USBH_CtlReq>
 8006912:	4603      	mov	r3, r0
}
 8006914:	4618      	mov	r0, r3
 8006916:	3710      	adds	r7, #16
 8006918:	46bd      	mov	sp, r7
 800691a:	bd80      	pop	{r7, pc}

0800691c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b082      	sub	sp, #8
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
 8006924:	460b      	mov	r3, r1
 8006926:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	789b      	ldrb	r3, [r3, #2]
 800692c:	2b01      	cmp	r3, #1
 800692e:	d10f      	bne.n	8006950 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2200      	movs	r2, #0
 8006934:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2205      	movs	r2, #5
 800693a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800693c:	78fb      	ldrb	r3, [r7, #3]
 800693e:	b29a      	uxth	r2, r3
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2200      	movs	r2, #0
 8006948:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2200      	movs	r2, #0
 800694e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8006950:	2200      	movs	r2, #0
 8006952:	2100      	movs	r1, #0
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	f000 fa27 	bl	8006da8 <USBH_CtlReq>
 800695a:	4603      	mov	r3, r0
}
 800695c:	4618      	mov	r0, r3
 800695e:	3708      	adds	r7, #8
 8006960:	46bd      	mov	sp, r7
 8006962:	bd80      	pop	{r7, pc}

08006964 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b082      	sub	sp, #8
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
 800696c:	460b      	mov	r3, r1
 800696e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	789b      	ldrb	r3, [r3, #2]
 8006974:	2b01      	cmp	r3, #1
 8006976:	d10e      	bne.n	8006996 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2200      	movs	r2, #0
 800697c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2209      	movs	r2, #9
 8006982:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	887a      	ldrh	r2, [r7, #2]
 8006988:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2200      	movs	r2, #0
 800698e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2200      	movs	r2, #0
 8006994:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8006996:	2200      	movs	r2, #0
 8006998:	2100      	movs	r1, #0
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f000 fa04 	bl	8006da8 <USBH_CtlReq>
 80069a0:	4603      	mov	r3, r0
}
 80069a2:	4618      	mov	r0, r3
 80069a4:	3708      	adds	r7, #8
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bd80      	pop	{r7, pc}

080069aa <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80069aa:	b580      	push	{r7, lr}
 80069ac:	b082      	sub	sp, #8
 80069ae:	af00      	add	r7, sp, #0
 80069b0:	6078      	str	r0, [r7, #4]
 80069b2:	460b      	mov	r3, r1
 80069b4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	789b      	ldrb	r3, [r3, #2]
 80069ba:	2b01      	cmp	r3, #1
 80069bc:	d10f      	bne.n	80069de <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2200      	movs	r2, #0
 80069c2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2203      	movs	r2, #3
 80069c8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80069ca:	78fb      	ldrb	r3, [r7, #3]
 80069cc:	b29a      	uxth	r2, r3
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2200      	movs	r2, #0
 80069d6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2200      	movs	r2, #0
 80069dc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80069de:	2200      	movs	r2, #0
 80069e0:	2100      	movs	r1, #0
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f000 f9e0 	bl	8006da8 <USBH_CtlReq>
 80069e8:	4603      	mov	r3, r0
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	3708      	adds	r7, #8
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}

080069f2 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80069f2:	b580      	push	{r7, lr}
 80069f4:	b082      	sub	sp, #8
 80069f6:	af00      	add	r7, sp, #0
 80069f8:	6078      	str	r0, [r7, #4]
 80069fa:	460b      	mov	r3, r1
 80069fc:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	789b      	ldrb	r3, [r3, #2]
 8006a02:	2b01      	cmp	r3, #1
 8006a04:	d10f      	bne.n	8006a26 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2202      	movs	r2, #2
 8006a0a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2201      	movs	r2, #1
 8006a10:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2200      	movs	r2, #0
 8006a16:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8006a18:	78fb      	ldrb	r3, [r7, #3]
 8006a1a:	b29a      	uxth	r2, r3
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2200      	movs	r2, #0
 8006a24:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8006a26:	2200      	movs	r2, #0
 8006a28:	2100      	movs	r1, #0
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f000 f9bc 	bl	8006da8 <USBH_CtlReq>
 8006a30:	4603      	mov	r3, r0
}
 8006a32:	4618      	mov	r0, r3
 8006a34:	3708      	adds	r7, #8
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bd80      	pop	{r7, pc}

08006a3a <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8006a3a:	b480      	push	{r7}
 8006a3c:	b085      	sub	sp, #20
 8006a3e:	af00      	add	r7, sp, #0
 8006a40:	60f8      	str	r0, [r7, #12]
 8006a42:	60b9      	str	r1, [r7, #8]
 8006a44:	4613      	mov	r3, r2
 8006a46:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	781a      	ldrb	r2, [r3, #0]
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	785a      	ldrb	r2, [r3, #1]
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	3302      	adds	r3, #2
 8006a5c:	781b      	ldrb	r3, [r3, #0]
 8006a5e:	b29a      	uxth	r2, r3
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	3303      	adds	r3, #3
 8006a64:	781b      	ldrb	r3, [r3, #0]
 8006a66:	b29b      	uxth	r3, r3
 8006a68:	021b      	lsls	r3, r3, #8
 8006a6a:	b29b      	uxth	r3, r3
 8006a6c:	4313      	orrs	r3, r2
 8006a6e:	b29a      	uxth	r2, r3
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	791a      	ldrb	r2, [r3, #4]
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	795a      	ldrb	r2, [r3, #5]
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	799a      	ldrb	r2, [r3, #6]
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	79da      	ldrb	r2, [r3, #7]
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8006a94:	88fb      	ldrh	r3, [r7, #6]
 8006a96:	2b08      	cmp	r3, #8
 8006a98:	d939      	bls.n	8006b0e <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	3308      	adds	r3, #8
 8006a9e:	781b      	ldrb	r3, [r3, #0]
 8006aa0:	b29a      	uxth	r2, r3
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	3309      	adds	r3, #9
 8006aa6:	781b      	ldrb	r3, [r3, #0]
 8006aa8:	b29b      	uxth	r3, r3
 8006aaa:	021b      	lsls	r3, r3, #8
 8006aac:	b29b      	uxth	r3, r3
 8006aae:	4313      	orrs	r3, r2
 8006ab0:	b29a      	uxth	r2, r3
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	330a      	adds	r3, #10
 8006aba:	781b      	ldrb	r3, [r3, #0]
 8006abc:	b29a      	uxth	r2, r3
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	330b      	adds	r3, #11
 8006ac2:	781b      	ldrb	r3, [r3, #0]
 8006ac4:	b29b      	uxth	r3, r3
 8006ac6:	021b      	lsls	r3, r3, #8
 8006ac8:	b29b      	uxth	r3, r3
 8006aca:	4313      	orrs	r3, r2
 8006acc:	b29a      	uxth	r2, r3
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	330c      	adds	r3, #12
 8006ad6:	781b      	ldrb	r3, [r3, #0]
 8006ad8:	b29a      	uxth	r2, r3
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	330d      	adds	r3, #13
 8006ade:	781b      	ldrb	r3, [r3, #0]
 8006ae0:	b29b      	uxth	r3, r3
 8006ae2:	021b      	lsls	r3, r3, #8
 8006ae4:	b29b      	uxth	r3, r3
 8006ae6:	4313      	orrs	r3, r2
 8006ae8:	b29a      	uxth	r2, r3
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	7b9a      	ldrb	r2, [r3, #14]
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	7bda      	ldrb	r2, [r3, #15]
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	7c1a      	ldrb	r2, [r3, #16]
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	7c5a      	ldrb	r2, [r3, #17]
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	745a      	strb	r2, [r3, #17]
  }
}
 8006b0e:	bf00      	nop
 8006b10:	3714      	adds	r7, #20
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bc80      	pop	{r7}
 8006b16:	4770      	bx	lr

08006b18 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b08a      	sub	sp, #40	; 0x28
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	60f8      	str	r0, [r7, #12]
 8006b20:	60b9      	str	r1, [r7, #8]
 8006b22:	4613      	mov	r3, r2
 8006b24:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8006b30:	2300      	movs	r3, #0
 8006b32:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	781a      	ldrb	r2, [r3, #0]
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	785a      	ldrb	r2, [r3, #1]
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	3302      	adds	r3, #2
 8006b4e:	781b      	ldrb	r3, [r3, #0]
 8006b50:	b29a      	uxth	r2, r3
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	3303      	adds	r3, #3
 8006b56:	781b      	ldrb	r3, [r3, #0]
 8006b58:	b29b      	uxth	r3, r3
 8006b5a:	021b      	lsls	r3, r3, #8
 8006b5c:	b29b      	uxth	r3, r3
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	b29a      	uxth	r2, r3
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	791a      	ldrb	r2, [r3, #4]
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	795a      	ldrb	r2, [r3, #5]
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	799a      	ldrb	r2, [r3, #6]
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	79da      	ldrb	r2, [r3, #7]
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	7a1a      	ldrb	r2, [r3, #8]
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8006b8e:	88fb      	ldrh	r3, [r7, #6]
 8006b90:	2b09      	cmp	r3, #9
 8006b92:	d95f      	bls.n	8006c54 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8006b94:	2309      	movs	r3, #9
 8006b96:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8006b98:	2300      	movs	r3, #0
 8006b9a:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006b9c:	e051      	b.n	8006c42 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006b9e:	f107 0316 	add.w	r3, r7, #22
 8006ba2:	4619      	mov	r1, r3
 8006ba4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006ba6:	f000 f8e5 	bl	8006d74 <USBH_GetNextDesc>
 8006baa:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8006bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bae:	785b      	ldrb	r3, [r3, #1]
 8006bb0:	2b04      	cmp	r3, #4
 8006bb2:	d146      	bne.n	8006c42 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8006bb4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006bb8:	221a      	movs	r2, #26
 8006bba:	fb02 f303 	mul.w	r3, r2, r3
 8006bbe:	3308      	adds	r3, #8
 8006bc0:	68fa      	ldr	r2, [r7, #12]
 8006bc2:	4413      	add	r3, r2
 8006bc4:	3302      	adds	r3, #2
 8006bc6:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8006bc8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006bca:	69f8      	ldr	r0, [r7, #28]
 8006bcc:	f000 f846 	bl	8006c5c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006bda:	e022      	b.n	8006c22 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006bdc:	f107 0316 	add.w	r3, r7, #22
 8006be0:	4619      	mov	r1, r3
 8006be2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006be4:	f000 f8c6 	bl	8006d74 <USBH_GetNextDesc>
 8006be8:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8006bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bec:	785b      	ldrb	r3, [r3, #1]
 8006bee:	2b05      	cmp	r3, #5
 8006bf0:	d117      	bne.n	8006c22 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8006bf2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006bf6:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8006bfa:	3201      	adds	r2, #1
 8006bfc:	00d2      	lsls	r2, r2, #3
 8006bfe:	211a      	movs	r1, #26
 8006c00:	fb01 f303 	mul.w	r3, r1, r3
 8006c04:	4413      	add	r3, r2
 8006c06:	3308      	adds	r3, #8
 8006c08:	68fa      	ldr	r2, [r7, #12]
 8006c0a:	4413      	add	r3, r2
 8006c0c:	3304      	adds	r3, #4
 8006c0e:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8006c10:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006c12:	69b8      	ldr	r0, [r7, #24]
 8006c14:	f000 f850 	bl	8006cb8 <USBH_ParseEPDesc>
            ep_ix++;
 8006c18:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8006c1c:	3301      	adds	r3, #1
 8006c1e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006c22:	69fb      	ldr	r3, [r7, #28]
 8006c24:	791b      	ldrb	r3, [r3, #4]
 8006c26:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8006c2a:	429a      	cmp	r2, r3
 8006c2c:	d204      	bcs.n	8006c38 <USBH_ParseCfgDesc+0x120>
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	885a      	ldrh	r2, [r3, #2]
 8006c32:	8afb      	ldrh	r3, [r7, #22]
 8006c34:	429a      	cmp	r2, r3
 8006c36:	d8d1      	bhi.n	8006bdc <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8006c38:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006c3c:	3301      	adds	r3, #1
 8006c3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006c42:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006c46:	2b01      	cmp	r3, #1
 8006c48:	d804      	bhi.n	8006c54 <USBH_ParseCfgDesc+0x13c>
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	885a      	ldrh	r2, [r3, #2]
 8006c4e:	8afb      	ldrh	r3, [r7, #22]
 8006c50:	429a      	cmp	r2, r3
 8006c52:	d8a4      	bhi.n	8006b9e <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8006c54:	bf00      	nop
 8006c56:	3728      	adds	r7, #40	; 0x28
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bd80      	pop	{r7, pc}

08006c5c <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b083      	sub	sp, #12
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
 8006c64:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	781a      	ldrb	r2, [r3, #0]
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	785a      	ldrb	r2, [r3, #1]
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	789a      	ldrb	r2, [r3, #2]
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	78da      	ldrb	r2, [r3, #3]
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	791a      	ldrb	r2, [r3, #4]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	795a      	ldrb	r2, [r3, #5]
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	799a      	ldrb	r2, [r3, #6]
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	79da      	ldrb	r2, [r3, #7]
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	7a1a      	ldrb	r2, [r3, #8]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	721a      	strb	r2, [r3, #8]
}
 8006cae:	bf00      	nop
 8006cb0:	370c      	adds	r7, #12
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bc80      	pop	{r7}
 8006cb6:	4770      	bx	lr

08006cb8 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8006cb8:	b480      	push	{r7}
 8006cba:	b083      	sub	sp, #12
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
 8006cc0:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	781a      	ldrb	r2, [r3, #0]
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	785a      	ldrb	r2, [r3, #1]
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	789a      	ldrb	r2, [r3, #2]
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	78da      	ldrb	r2, [r3, #3]
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	3304      	adds	r3, #4
 8006ce6:	781b      	ldrb	r3, [r3, #0]
 8006ce8:	b29a      	uxth	r2, r3
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	3305      	adds	r3, #5
 8006cee:	781b      	ldrb	r3, [r3, #0]
 8006cf0:	b29b      	uxth	r3, r3
 8006cf2:	021b      	lsls	r3, r3, #8
 8006cf4:	b29b      	uxth	r3, r3
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	b29a      	uxth	r2, r3
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	799a      	ldrb	r2, [r3, #6]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	719a      	strb	r2, [r3, #6]
}
 8006d06:	bf00      	nop
 8006d08:	370c      	adds	r7, #12
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bc80      	pop	{r7}
 8006d0e:	4770      	bx	lr

08006d10 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8006d10:	b480      	push	{r7}
 8006d12:	b087      	sub	sp, #28
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	60f8      	str	r0, [r7, #12]
 8006d18:	60b9      	str	r1, [r7, #8]
 8006d1a:	4613      	mov	r3, r2
 8006d1c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	3301      	adds	r3, #1
 8006d22:	781b      	ldrb	r3, [r3, #0]
 8006d24:	2b03      	cmp	r3, #3
 8006d26:	d120      	bne.n	8006d6a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	781b      	ldrb	r3, [r3, #0]
 8006d2c:	1e9a      	subs	r2, r3, #2
 8006d2e:	88fb      	ldrh	r3, [r7, #6]
 8006d30:	4293      	cmp	r3, r2
 8006d32:	bf28      	it	cs
 8006d34:	4613      	movcs	r3, r2
 8006d36:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	3302      	adds	r3, #2
 8006d3c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8006d3e:	2300      	movs	r3, #0
 8006d40:	82fb      	strh	r3, [r7, #22]
 8006d42:	e00b      	b.n	8006d5c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8006d44:	8afb      	ldrh	r3, [r7, #22]
 8006d46:	68fa      	ldr	r2, [r7, #12]
 8006d48:	4413      	add	r3, r2
 8006d4a:	781a      	ldrb	r2, [r3, #0]
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	701a      	strb	r2, [r3, #0]
      pdest++;
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	3301      	adds	r3, #1
 8006d54:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8006d56:	8afb      	ldrh	r3, [r7, #22]
 8006d58:	3302      	adds	r3, #2
 8006d5a:	82fb      	strh	r3, [r7, #22]
 8006d5c:	8afa      	ldrh	r2, [r7, #22]
 8006d5e:	8abb      	ldrh	r3, [r7, #20]
 8006d60:	429a      	cmp	r2, r3
 8006d62:	d3ef      	bcc.n	8006d44 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	2200      	movs	r2, #0
 8006d68:	701a      	strb	r2, [r3, #0]
  }
}
 8006d6a:	bf00      	nop
 8006d6c:	371c      	adds	r7, #28
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bc80      	pop	{r7}
 8006d72:	4770      	bx	lr

08006d74 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8006d74:	b480      	push	{r7}
 8006d76:	b085      	sub	sp, #20
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
 8006d7c:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	881a      	ldrh	r2, [r3, #0]
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	781b      	ldrb	r3, [r3, #0]
 8006d86:	b29b      	uxth	r3, r3
 8006d88:	4413      	add	r3, r2
 8006d8a:	b29a      	uxth	r2, r3
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	781b      	ldrb	r3, [r3, #0]
 8006d94:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	4413      	add	r3, r2
 8006d9a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006d9c:	68fb      	ldr	r3, [r7, #12]
}
 8006d9e:	4618      	mov	r0, r3
 8006da0:	3714      	adds	r7, #20
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bc80      	pop	{r7}
 8006da6:	4770      	bx	lr

08006da8 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b086      	sub	sp, #24
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	60f8      	str	r0, [r7, #12]
 8006db0:	60b9      	str	r1, [r7, #8]
 8006db2:	4613      	mov	r3, r2
 8006db4:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8006db6:	2301      	movs	r3, #1
 8006db8:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	789b      	ldrb	r3, [r3, #2]
 8006dbe:	2b01      	cmp	r3, #1
 8006dc0:	d002      	beq.n	8006dc8 <USBH_CtlReq+0x20>
 8006dc2:	2b02      	cmp	r3, #2
 8006dc4:	d00f      	beq.n	8006de6 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8006dc6:	e027      	b.n	8006e18 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	68ba      	ldr	r2, [r7, #8]
 8006dcc:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	88fa      	ldrh	r2, [r7, #6]
 8006dd2:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	2202      	movs	r2, #2
 8006dde:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8006de0:	2301      	movs	r3, #1
 8006de2:	75fb      	strb	r3, [r7, #23]
      break;
 8006de4:	e018      	b.n	8006e18 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8006de6:	68f8      	ldr	r0, [r7, #12]
 8006de8:	f000 f81c 	bl	8006e24 <USBH_HandleControl>
 8006dec:	4603      	mov	r3, r0
 8006dee:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8006df0:	7dfb      	ldrb	r3, [r7, #23]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d002      	beq.n	8006dfc <USBH_CtlReq+0x54>
 8006df6:	7dfb      	ldrb	r3, [r7, #23]
 8006df8:	2b03      	cmp	r3, #3
 8006dfa:	d106      	bne.n	8006e0a <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	2201      	movs	r2, #1
 8006e00:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	2200      	movs	r2, #0
 8006e06:	761a      	strb	r2, [r3, #24]
      break;
 8006e08:	e005      	b.n	8006e16 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8006e0a:	7dfb      	ldrb	r3, [r7, #23]
 8006e0c:	2b02      	cmp	r3, #2
 8006e0e:	d102      	bne.n	8006e16 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	2201      	movs	r2, #1
 8006e14:	709a      	strb	r2, [r3, #2]
      break;
 8006e16:	bf00      	nop
  }
  return status;
 8006e18:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	3718      	adds	r7, #24
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bd80      	pop	{r7, pc}
	...

08006e24 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b086      	sub	sp, #24
 8006e28:	af02      	add	r7, sp, #8
 8006e2a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006e30:	2300      	movs	r3, #0
 8006e32:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	7e1b      	ldrb	r3, [r3, #24]
 8006e38:	3b01      	subs	r3, #1
 8006e3a:	2b0a      	cmp	r3, #10
 8006e3c:	f200 8156 	bhi.w	80070ec <USBH_HandleControl+0x2c8>
 8006e40:	a201      	add	r2, pc, #4	; (adr r2, 8006e48 <USBH_HandleControl+0x24>)
 8006e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e46:	bf00      	nop
 8006e48:	08006e75 	.word	0x08006e75
 8006e4c:	08006e8f 	.word	0x08006e8f
 8006e50:	08006ef9 	.word	0x08006ef9
 8006e54:	08006f1f 	.word	0x08006f1f
 8006e58:	08006f57 	.word	0x08006f57
 8006e5c:	08006f81 	.word	0x08006f81
 8006e60:	08006fd3 	.word	0x08006fd3
 8006e64:	08006ff5 	.word	0x08006ff5
 8006e68:	08007031 	.word	0x08007031
 8006e6c:	08007057 	.word	0x08007057
 8006e70:	08007095 	.word	0x08007095
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	f103 0110 	add.w	r1, r3, #16
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	795b      	ldrb	r3, [r3, #5]
 8006e7e:	461a      	mov	r2, r3
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	f000 f943 	bl	800710c <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2202      	movs	r2, #2
 8006e8a:	761a      	strb	r2, [r3, #24]
      break;
 8006e8c:	e139      	b.n	8007102 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	795b      	ldrb	r3, [r3, #5]
 8006e92:	4619      	mov	r1, r3
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f000 fcc1 	bl	800781c <USBH_LL_GetURBState>
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8006e9e:	7bbb      	ldrb	r3, [r7, #14]
 8006ea0:	2b01      	cmp	r3, #1
 8006ea2:	d11e      	bne.n	8006ee2 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	7c1b      	ldrb	r3, [r3, #16]
 8006ea8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006eac:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	8adb      	ldrh	r3, [r3, #22]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d00a      	beq.n	8006ecc <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8006eb6:	7b7b      	ldrb	r3, [r7, #13]
 8006eb8:	2b80      	cmp	r3, #128	; 0x80
 8006eba:	d103      	bne.n	8006ec4 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2203      	movs	r2, #3
 8006ec0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8006ec2:	e115      	b.n	80070f0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2205      	movs	r2, #5
 8006ec8:	761a      	strb	r2, [r3, #24]
      break;
 8006eca:	e111      	b.n	80070f0 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8006ecc:	7b7b      	ldrb	r3, [r7, #13]
 8006ece:	2b80      	cmp	r3, #128	; 0x80
 8006ed0:	d103      	bne.n	8006eda <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2209      	movs	r2, #9
 8006ed6:	761a      	strb	r2, [r3, #24]
      break;
 8006ed8:	e10a      	b.n	80070f0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2207      	movs	r2, #7
 8006ede:	761a      	strb	r2, [r3, #24]
      break;
 8006ee0:	e106      	b.n	80070f0 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8006ee2:	7bbb      	ldrb	r3, [r7, #14]
 8006ee4:	2b04      	cmp	r3, #4
 8006ee6:	d003      	beq.n	8006ef0 <USBH_HandleControl+0xcc>
 8006ee8:	7bbb      	ldrb	r3, [r7, #14]
 8006eea:	2b02      	cmp	r3, #2
 8006eec:	f040 8100 	bne.w	80070f0 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	220b      	movs	r2, #11
 8006ef4:	761a      	strb	r2, [r3, #24]
      break;
 8006ef6:	e0fb      	b.n	80070f0 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006efe:	b29a      	uxth	r2, r3
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6899      	ldr	r1, [r3, #8]
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	899a      	ldrh	r2, [r3, #12]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	791b      	ldrb	r3, [r3, #4]
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f000 f93a 	bl	800718a <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2204      	movs	r2, #4
 8006f1a:	761a      	strb	r2, [r3, #24]
      break;
 8006f1c:	e0f1      	b.n	8007102 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	791b      	ldrb	r3, [r3, #4]
 8006f22:	4619      	mov	r1, r3
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	f000 fc79 	bl	800781c <USBH_LL_GetURBState>
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8006f2e:	7bbb      	ldrb	r3, [r7, #14]
 8006f30:	2b01      	cmp	r3, #1
 8006f32:	d102      	bne.n	8006f3a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2209      	movs	r2, #9
 8006f38:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8006f3a:	7bbb      	ldrb	r3, [r7, #14]
 8006f3c:	2b05      	cmp	r3, #5
 8006f3e:	d102      	bne.n	8006f46 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8006f40:	2303      	movs	r3, #3
 8006f42:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8006f44:	e0d6      	b.n	80070f4 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8006f46:	7bbb      	ldrb	r3, [r7, #14]
 8006f48:	2b04      	cmp	r3, #4
 8006f4a:	f040 80d3 	bne.w	80070f4 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	220b      	movs	r2, #11
 8006f52:	761a      	strb	r2, [r3, #24]
      break;
 8006f54:	e0ce      	b.n	80070f4 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6899      	ldr	r1, [r3, #8]
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	899a      	ldrh	r2, [r3, #12]
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	795b      	ldrb	r3, [r3, #5]
 8006f62:	2001      	movs	r0, #1
 8006f64:	9000      	str	r0, [sp, #0]
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f000 f8ea 	bl	8007140 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006f72:	b29a      	uxth	r2, r3
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2206      	movs	r2, #6
 8006f7c:	761a      	strb	r2, [r3, #24]
      break;
 8006f7e:	e0c0      	b.n	8007102 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	795b      	ldrb	r3, [r3, #5]
 8006f84:	4619      	mov	r1, r3
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	f000 fc48 	bl	800781c <USBH_LL_GetURBState>
 8006f8c:	4603      	mov	r3, r0
 8006f8e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8006f90:	7bbb      	ldrb	r3, [r7, #14]
 8006f92:	2b01      	cmp	r3, #1
 8006f94:	d103      	bne.n	8006f9e <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2207      	movs	r2, #7
 8006f9a:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8006f9c:	e0ac      	b.n	80070f8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8006f9e:	7bbb      	ldrb	r3, [r7, #14]
 8006fa0:	2b05      	cmp	r3, #5
 8006fa2:	d105      	bne.n	8006fb0 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	220c      	movs	r2, #12
 8006fa8:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8006faa:	2303      	movs	r3, #3
 8006fac:	73fb      	strb	r3, [r7, #15]
      break;
 8006fae:	e0a3      	b.n	80070f8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006fb0:	7bbb      	ldrb	r3, [r7, #14]
 8006fb2:	2b02      	cmp	r3, #2
 8006fb4:	d103      	bne.n	8006fbe <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2205      	movs	r2, #5
 8006fba:	761a      	strb	r2, [r3, #24]
      break;
 8006fbc:	e09c      	b.n	80070f8 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8006fbe:	7bbb      	ldrb	r3, [r7, #14]
 8006fc0:	2b04      	cmp	r3, #4
 8006fc2:	f040 8099 	bne.w	80070f8 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	220b      	movs	r2, #11
 8006fca:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8006fcc:	2302      	movs	r3, #2
 8006fce:	73fb      	strb	r3, [r7, #15]
      break;
 8006fd0:	e092      	b.n	80070f8 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	791b      	ldrb	r3, [r3, #4]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	2100      	movs	r1, #0
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f000 f8d5 	bl	800718a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006fe6:	b29a      	uxth	r2, r3
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2208      	movs	r2, #8
 8006ff0:	761a      	strb	r2, [r3, #24]

      break;
 8006ff2:	e086      	b.n	8007102 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	791b      	ldrb	r3, [r3, #4]
 8006ff8:	4619      	mov	r1, r3
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f000 fc0e 	bl	800781c <USBH_LL_GetURBState>
 8007000:	4603      	mov	r3, r0
 8007002:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007004:	7bbb      	ldrb	r3, [r7, #14]
 8007006:	2b01      	cmp	r3, #1
 8007008:	d105      	bne.n	8007016 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	220d      	movs	r2, #13
 800700e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007010:	2300      	movs	r3, #0
 8007012:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007014:	e072      	b.n	80070fc <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8007016:	7bbb      	ldrb	r3, [r7, #14]
 8007018:	2b04      	cmp	r3, #4
 800701a:	d103      	bne.n	8007024 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	220b      	movs	r2, #11
 8007020:	761a      	strb	r2, [r3, #24]
      break;
 8007022:	e06b      	b.n	80070fc <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8007024:	7bbb      	ldrb	r3, [r7, #14]
 8007026:	2b05      	cmp	r3, #5
 8007028:	d168      	bne.n	80070fc <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800702a:	2303      	movs	r3, #3
 800702c:	73fb      	strb	r3, [r7, #15]
      break;
 800702e:	e065      	b.n	80070fc <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	795b      	ldrb	r3, [r3, #5]
 8007034:	2201      	movs	r2, #1
 8007036:	9200      	str	r2, [sp, #0]
 8007038:	2200      	movs	r2, #0
 800703a:	2100      	movs	r1, #0
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	f000 f87f 	bl	8007140 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007048:	b29a      	uxth	r2, r3
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	220a      	movs	r2, #10
 8007052:	761a      	strb	r2, [r3, #24]
      break;
 8007054:	e055      	b.n	8007102 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	795b      	ldrb	r3, [r3, #5]
 800705a:	4619      	mov	r1, r3
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	f000 fbdd 	bl	800781c <USBH_LL_GetURBState>
 8007062:	4603      	mov	r3, r0
 8007064:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007066:	7bbb      	ldrb	r3, [r7, #14]
 8007068:	2b01      	cmp	r3, #1
 800706a:	d105      	bne.n	8007078 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800706c:	2300      	movs	r3, #0
 800706e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	220d      	movs	r2, #13
 8007074:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007076:	e043      	b.n	8007100 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007078:	7bbb      	ldrb	r3, [r7, #14]
 800707a:	2b02      	cmp	r3, #2
 800707c:	d103      	bne.n	8007086 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2209      	movs	r2, #9
 8007082:	761a      	strb	r2, [r3, #24]
      break;
 8007084:	e03c      	b.n	8007100 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8007086:	7bbb      	ldrb	r3, [r7, #14]
 8007088:	2b04      	cmp	r3, #4
 800708a:	d139      	bne.n	8007100 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	220b      	movs	r2, #11
 8007090:	761a      	strb	r2, [r3, #24]
      break;
 8007092:	e035      	b.n	8007100 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	7e5b      	ldrb	r3, [r3, #25]
 8007098:	3301      	adds	r3, #1
 800709a:	b2da      	uxtb	r2, r3
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	765a      	strb	r2, [r3, #25]
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	7e5b      	ldrb	r3, [r3, #25]
 80070a4:	2b02      	cmp	r3, #2
 80070a6:	d806      	bhi.n	80070b6 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2201      	movs	r2, #1
 80070ac:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2201      	movs	r2, #1
 80070b2:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80070b4:	e025      	b.n	8007102 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80070bc:	2106      	movs	r1, #6
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2200      	movs	r2, #0
 80070c6:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	795b      	ldrb	r3, [r3, #5]
 80070cc:	4619      	mov	r1, r3
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f000 f90c 	bl	80072ec <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	791b      	ldrb	r3, [r3, #4]
 80070d8:	4619      	mov	r1, r3
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f000 f906 	bl	80072ec <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2200      	movs	r2, #0
 80070e4:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80070e6:	2302      	movs	r3, #2
 80070e8:	73fb      	strb	r3, [r7, #15]
      break;
 80070ea:	e00a      	b.n	8007102 <USBH_HandleControl+0x2de>

    default:
      break;
 80070ec:	bf00      	nop
 80070ee:	e008      	b.n	8007102 <USBH_HandleControl+0x2de>
      break;
 80070f0:	bf00      	nop
 80070f2:	e006      	b.n	8007102 <USBH_HandleControl+0x2de>
      break;
 80070f4:	bf00      	nop
 80070f6:	e004      	b.n	8007102 <USBH_HandleControl+0x2de>
      break;
 80070f8:	bf00      	nop
 80070fa:	e002      	b.n	8007102 <USBH_HandleControl+0x2de>
      break;
 80070fc:	bf00      	nop
 80070fe:	e000      	b.n	8007102 <USBH_HandleControl+0x2de>
      break;
 8007100:	bf00      	nop
  }

  return status;
 8007102:	7bfb      	ldrb	r3, [r7, #15]
}
 8007104:	4618      	mov	r0, r3
 8007106:	3710      	adds	r7, #16
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}

0800710c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b088      	sub	sp, #32
 8007110:	af04      	add	r7, sp, #16
 8007112:	60f8      	str	r0, [r7, #12]
 8007114:	60b9      	str	r1, [r7, #8]
 8007116:	4613      	mov	r3, r2
 8007118:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800711a:	79f9      	ldrb	r1, [r7, #7]
 800711c:	2300      	movs	r3, #0
 800711e:	9303      	str	r3, [sp, #12]
 8007120:	2308      	movs	r3, #8
 8007122:	9302      	str	r3, [sp, #8]
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	9301      	str	r3, [sp, #4]
 8007128:	2300      	movs	r3, #0
 800712a:	9300      	str	r3, [sp, #0]
 800712c:	2300      	movs	r3, #0
 800712e:	2200      	movs	r2, #0
 8007130:	68f8      	ldr	r0, [r7, #12]
 8007132:	f000 fb42 	bl	80077ba <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8007136:	2300      	movs	r3, #0
}
 8007138:	4618      	mov	r0, r3
 800713a:	3710      	adds	r7, #16
 800713c:	46bd      	mov	sp, r7
 800713e:	bd80      	pop	{r7, pc}

08007140 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b088      	sub	sp, #32
 8007144:	af04      	add	r7, sp, #16
 8007146:	60f8      	str	r0, [r7, #12]
 8007148:	60b9      	str	r1, [r7, #8]
 800714a:	4611      	mov	r1, r2
 800714c:	461a      	mov	r2, r3
 800714e:	460b      	mov	r3, r1
 8007150:	80fb      	strh	r3, [r7, #6]
 8007152:	4613      	mov	r3, r2
 8007154:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800715c:	2b00      	cmp	r3, #0
 800715e:	d001      	beq.n	8007164 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007160:	2300      	movs	r3, #0
 8007162:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007164:	7979      	ldrb	r1, [r7, #5]
 8007166:	7e3b      	ldrb	r3, [r7, #24]
 8007168:	9303      	str	r3, [sp, #12]
 800716a:	88fb      	ldrh	r3, [r7, #6]
 800716c:	9302      	str	r3, [sp, #8]
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	9301      	str	r3, [sp, #4]
 8007172:	2301      	movs	r3, #1
 8007174:	9300      	str	r3, [sp, #0]
 8007176:	2300      	movs	r3, #0
 8007178:	2200      	movs	r2, #0
 800717a:	68f8      	ldr	r0, [r7, #12]
 800717c:	f000 fb1d 	bl	80077ba <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007180:	2300      	movs	r3, #0
}
 8007182:	4618      	mov	r0, r3
 8007184:	3710      	adds	r7, #16
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}

0800718a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800718a:	b580      	push	{r7, lr}
 800718c:	b088      	sub	sp, #32
 800718e:	af04      	add	r7, sp, #16
 8007190:	60f8      	str	r0, [r7, #12]
 8007192:	60b9      	str	r1, [r7, #8]
 8007194:	4611      	mov	r1, r2
 8007196:	461a      	mov	r2, r3
 8007198:	460b      	mov	r3, r1
 800719a:	80fb      	strh	r3, [r7, #6]
 800719c:	4613      	mov	r3, r2
 800719e:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80071a0:	7979      	ldrb	r1, [r7, #5]
 80071a2:	2300      	movs	r3, #0
 80071a4:	9303      	str	r3, [sp, #12]
 80071a6:	88fb      	ldrh	r3, [r7, #6]
 80071a8:	9302      	str	r3, [sp, #8]
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	9301      	str	r3, [sp, #4]
 80071ae:	2301      	movs	r3, #1
 80071b0:	9300      	str	r3, [sp, #0]
 80071b2:	2300      	movs	r3, #0
 80071b4:	2201      	movs	r2, #1
 80071b6:	68f8      	ldr	r0, [r7, #12]
 80071b8:	f000 faff 	bl	80077ba <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80071bc:	2300      	movs	r3, #0

}
 80071be:	4618      	mov	r0, r3
 80071c0:	3710      	adds	r7, #16
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bd80      	pop	{r7, pc}

080071c6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80071c6:	b580      	push	{r7, lr}
 80071c8:	b088      	sub	sp, #32
 80071ca:	af04      	add	r7, sp, #16
 80071cc:	60f8      	str	r0, [r7, #12]
 80071ce:	60b9      	str	r1, [r7, #8]
 80071d0:	4611      	mov	r1, r2
 80071d2:	461a      	mov	r2, r3
 80071d4:	460b      	mov	r3, r1
 80071d6:	80fb      	strh	r3, [r7, #6]
 80071d8:	4613      	mov	r3, r2
 80071da:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d001      	beq.n	80071ea <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80071e6:	2300      	movs	r3, #0
 80071e8:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80071ea:	7979      	ldrb	r1, [r7, #5]
 80071ec:	7e3b      	ldrb	r3, [r7, #24]
 80071ee:	9303      	str	r3, [sp, #12]
 80071f0:	88fb      	ldrh	r3, [r7, #6]
 80071f2:	9302      	str	r3, [sp, #8]
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	9301      	str	r3, [sp, #4]
 80071f8:	2301      	movs	r3, #1
 80071fa:	9300      	str	r3, [sp, #0]
 80071fc:	2302      	movs	r3, #2
 80071fe:	2200      	movs	r2, #0
 8007200:	68f8      	ldr	r0, [r7, #12]
 8007202:	f000 fada 	bl	80077ba <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8007206:	2300      	movs	r3, #0
}
 8007208:	4618      	mov	r0, r3
 800720a:	3710      	adds	r7, #16
 800720c:	46bd      	mov	sp, r7
 800720e:	bd80      	pop	{r7, pc}

08007210 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b088      	sub	sp, #32
 8007214:	af04      	add	r7, sp, #16
 8007216:	60f8      	str	r0, [r7, #12]
 8007218:	60b9      	str	r1, [r7, #8]
 800721a:	4611      	mov	r1, r2
 800721c:	461a      	mov	r2, r3
 800721e:	460b      	mov	r3, r1
 8007220:	80fb      	strh	r3, [r7, #6]
 8007222:	4613      	mov	r3, r2
 8007224:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007226:	7979      	ldrb	r1, [r7, #5]
 8007228:	2300      	movs	r3, #0
 800722a:	9303      	str	r3, [sp, #12]
 800722c:	88fb      	ldrh	r3, [r7, #6]
 800722e:	9302      	str	r3, [sp, #8]
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	9301      	str	r3, [sp, #4]
 8007234:	2301      	movs	r3, #1
 8007236:	9300      	str	r3, [sp, #0]
 8007238:	2302      	movs	r3, #2
 800723a:	2201      	movs	r2, #1
 800723c:	68f8      	ldr	r0, [r7, #12]
 800723e:	f000 fabc 	bl	80077ba <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8007242:	2300      	movs	r3, #0
}
 8007244:	4618      	mov	r0, r3
 8007246:	3710      	adds	r7, #16
 8007248:	46bd      	mov	sp, r7
 800724a:	bd80      	pop	{r7, pc}

0800724c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b086      	sub	sp, #24
 8007250:	af04      	add	r7, sp, #16
 8007252:	6078      	str	r0, [r7, #4]
 8007254:	4608      	mov	r0, r1
 8007256:	4611      	mov	r1, r2
 8007258:	461a      	mov	r2, r3
 800725a:	4603      	mov	r3, r0
 800725c:	70fb      	strb	r3, [r7, #3]
 800725e:	460b      	mov	r3, r1
 8007260:	70bb      	strb	r3, [r7, #2]
 8007262:	4613      	mov	r3, r2
 8007264:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8007266:	7878      	ldrb	r0, [r7, #1]
 8007268:	78ba      	ldrb	r2, [r7, #2]
 800726a:	78f9      	ldrb	r1, [r7, #3]
 800726c:	8b3b      	ldrh	r3, [r7, #24]
 800726e:	9302      	str	r3, [sp, #8]
 8007270:	7d3b      	ldrb	r3, [r7, #20]
 8007272:	9301      	str	r3, [sp, #4]
 8007274:	7c3b      	ldrb	r3, [r7, #16]
 8007276:	9300      	str	r3, [sp, #0]
 8007278:	4603      	mov	r3, r0
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	f000 fa4f 	bl	800771e <USBH_LL_OpenPipe>

  return USBH_OK;
 8007280:	2300      	movs	r3, #0
}
 8007282:	4618      	mov	r0, r3
 8007284:	3708      	adds	r7, #8
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}

0800728a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800728a:	b580      	push	{r7, lr}
 800728c:	b082      	sub	sp, #8
 800728e:	af00      	add	r7, sp, #0
 8007290:	6078      	str	r0, [r7, #4]
 8007292:	460b      	mov	r3, r1
 8007294:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8007296:	78fb      	ldrb	r3, [r7, #3]
 8007298:	4619      	mov	r1, r3
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f000 fa6e 	bl	800777c <USBH_LL_ClosePipe>

  return USBH_OK;
 80072a0:	2300      	movs	r3, #0
}
 80072a2:	4618      	mov	r0, r3
 80072a4:	3708      	adds	r7, #8
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bd80      	pop	{r7, pc}

080072aa <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80072aa:	b580      	push	{r7, lr}
 80072ac:	b084      	sub	sp, #16
 80072ae:	af00      	add	r7, sp, #0
 80072b0:	6078      	str	r0, [r7, #4]
 80072b2:	460b      	mov	r3, r1
 80072b4:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f000 f835 	bl	8007326 <USBH_GetFreePipe>
 80072bc:	4603      	mov	r3, r0
 80072be:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80072c0:	89fb      	ldrh	r3, [r7, #14]
 80072c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d00a      	beq.n	80072e0 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 80072ca:	78fa      	ldrb	r2, [r7, #3]
 80072cc:	89fb      	ldrh	r3, [r7, #14]
 80072ce:	f003 030f 	and.w	r3, r3, #15
 80072d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80072d6:	6879      	ldr	r1, [r7, #4]
 80072d8:	33e0      	adds	r3, #224	; 0xe0
 80072da:	009b      	lsls	r3, r3, #2
 80072dc:	440b      	add	r3, r1
 80072de:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80072e0:	89fb      	ldrh	r3, [r7, #14]
 80072e2:	b2db      	uxtb	r3, r3
}
 80072e4:	4618      	mov	r0, r3
 80072e6:	3710      	adds	r7, #16
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bd80      	pop	{r7, pc}

080072ec <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80072ec:	b480      	push	{r7}
 80072ee:	b083      	sub	sp, #12
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
 80072f4:	460b      	mov	r3, r1
 80072f6:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 80072f8:	78fb      	ldrb	r3, [r7, #3]
 80072fa:	2b0a      	cmp	r3, #10
 80072fc:	d80d      	bhi.n	800731a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80072fe:	78fb      	ldrb	r3, [r7, #3]
 8007300:	687a      	ldr	r2, [r7, #4]
 8007302:	33e0      	adds	r3, #224	; 0xe0
 8007304:	009b      	lsls	r3, r3, #2
 8007306:	4413      	add	r3, r2
 8007308:	685a      	ldr	r2, [r3, #4]
 800730a:	78fb      	ldrb	r3, [r7, #3]
 800730c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007310:	6879      	ldr	r1, [r7, #4]
 8007312:	33e0      	adds	r3, #224	; 0xe0
 8007314:	009b      	lsls	r3, r3, #2
 8007316:	440b      	add	r3, r1
 8007318:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800731a:	2300      	movs	r3, #0
}
 800731c:	4618      	mov	r0, r3
 800731e:	370c      	adds	r7, #12
 8007320:	46bd      	mov	sp, r7
 8007322:	bc80      	pop	{r7}
 8007324:	4770      	bx	lr

08007326 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8007326:	b480      	push	{r7}
 8007328:	b085      	sub	sp, #20
 800732a:	af00      	add	r7, sp, #0
 800732c:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800732e:	2300      	movs	r3, #0
 8007330:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8007332:	2300      	movs	r3, #0
 8007334:	73fb      	strb	r3, [r7, #15]
 8007336:	e00f      	b.n	8007358 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007338:	7bfb      	ldrb	r3, [r7, #15]
 800733a:	687a      	ldr	r2, [r7, #4]
 800733c:	33e0      	adds	r3, #224	; 0xe0
 800733e:	009b      	lsls	r3, r3, #2
 8007340:	4413      	add	r3, r2
 8007342:	685b      	ldr	r3, [r3, #4]
 8007344:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007348:	2b00      	cmp	r3, #0
 800734a:	d102      	bne.n	8007352 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800734c:	7bfb      	ldrb	r3, [r7, #15]
 800734e:	b29b      	uxth	r3, r3
 8007350:	e007      	b.n	8007362 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8007352:	7bfb      	ldrb	r3, [r7, #15]
 8007354:	3301      	adds	r3, #1
 8007356:	73fb      	strb	r3, [r7, #15]
 8007358:	7bfb      	ldrb	r3, [r7, #15]
 800735a:	2b0a      	cmp	r3, #10
 800735c:	d9ec      	bls.n	8007338 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800735e:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8007362:	4618      	mov	r0, r3
 8007364:	3714      	adds	r7, #20
 8007366:	46bd      	mov	sp, r7
 8007368:	bc80      	pop	{r7}
 800736a:	4770      	bx	lr

0800736c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8007370:	2201      	movs	r2, #1
 8007372:	490e      	ldr	r1, [pc, #56]	; (80073ac <MX_USB_HOST_Init+0x40>)
 8007374:	480e      	ldr	r0, [pc, #56]	; (80073b0 <MX_USB_HOST_Init+0x44>)
 8007376:	f7fe fcaf 	bl	8005cd8 <USBH_Init>
 800737a:	4603      	mov	r3, r0
 800737c:	2b00      	cmp	r3, #0
 800737e:	d001      	beq.n	8007384 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8007380:	f7f9 fad2 	bl	8000928 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8007384:	490b      	ldr	r1, [pc, #44]	; (80073b4 <MX_USB_HOST_Init+0x48>)
 8007386:	480a      	ldr	r0, [pc, #40]	; (80073b0 <MX_USB_HOST_Init+0x44>)
 8007388:	f7fe fd33 	bl	8005df2 <USBH_RegisterClass>
 800738c:	4603      	mov	r3, r0
 800738e:	2b00      	cmp	r3, #0
 8007390:	d001      	beq.n	8007396 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8007392:	f7f9 fac9 	bl	8000928 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8007396:	4806      	ldr	r0, [pc, #24]	; (80073b0 <MX_USB_HOST_Init+0x44>)
 8007398:	f7fe fdb4 	bl	8005f04 <USBH_Start>
 800739c:	4603      	mov	r3, r0
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d001      	beq.n	80073a6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80073a2:	f7f9 fac1 	bl	8000928 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80073a6:	bf00      	nop
 80073a8:	bd80      	pop	{r7, pc}
 80073aa:	bf00      	nop
 80073ac:	080073cd 	.word	0x080073cd
 80073b0:	200001b4 	.word	0x200001b4
 80073b4:	2000000c 	.word	0x2000000c

080073b8 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80073bc:	4802      	ldr	r0, [pc, #8]	; (80073c8 <MX_USB_HOST_Process+0x10>)
 80073be:	f7fe fdb1 	bl	8005f24 <USBH_Process>
}
 80073c2:	bf00      	nop
 80073c4:	bd80      	pop	{r7, pc}
 80073c6:	bf00      	nop
 80073c8:	200001b4 	.word	0x200001b4

080073cc <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80073cc:	b480      	push	{r7}
 80073ce:	b083      	sub	sp, #12
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
 80073d4:	460b      	mov	r3, r1
 80073d6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80073d8:	78fb      	ldrb	r3, [r7, #3]
 80073da:	3b01      	subs	r3, #1
 80073dc:	2b04      	cmp	r3, #4
 80073de:	d819      	bhi.n	8007414 <USBH_UserProcess+0x48>
 80073e0:	a201      	add	r2, pc, #4	; (adr r2, 80073e8 <USBH_UserProcess+0x1c>)
 80073e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073e6:	bf00      	nop
 80073e8:	08007415 	.word	0x08007415
 80073ec:	08007405 	.word	0x08007405
 80073f0:	08007415 	.word	0x08007415
 80073f4:	0800740d 	.word	0x0800740d
 80073f8:	080073fd 	.word	0x080073fd
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80073fc:	4b08      	ldr	r3, [pc, #32]	; (8007420 <USBH_UserProcess+0x54>)
 80073fe:	2203      	movs	r2, #3
 8007400:	701a      	strb	r2, [r3, #0]
  break;
 8007402:	e008      	b.n	8007416 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8007404:	4b06      	ldr	r3, [pc, #24]	; (8007420 <USBH_UserProcess+0x54>)
 8007406:	2202      	movs	r2, #2
 8007408:	701a      	strb	r2, [r3, #0]
  break;
 800740a:	e004      	b.n	8007416 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800740c:	4b04      	ldr	r3, [pc, #16]	; (8007420 <USBH_UserProcess+0x54>)
 800740e:	2201      	movs	r2, #1
 8007410:	701a      	strb	r2, [r3, #0]
  break;
 8007412:	e000      	b.n	8007416 <USBH_UserProcess+0x4a>

  default:
  break;
 8007414:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8007416:	bf00      	nop
 8007418:	370c      	adds	r7, #12
 800741a:	46bd      	mov	sp, r7
 800741c:	bc80      	pop	{r7}
 800741e:	4770      	bx	lr
 8007420:	200000b0 	.word	0x200000b0

08007424 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b08a      	sub	sp, #40	; 0x28
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800742c:	f107 0314 	add.w	r3, r7, #20
 8007430:	2200      	movs	r2, #0
 8007432:	601a      	str	r2, [r3, #0]
 8007434:	605a      	str	r2, [r3, #4]
 8007436:	609a      	str	r2, [r3, #8]
 8007438:	60da      	str	r2, [r3, #12]
 800743a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007444:	d147      	bne.n	80074d6 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007446:	2300      	movs	r3, #0
 8007448:	613b      	str	r3, [r7, #16]
 800744a:	4b25      	ldr	r3, [pc, #148]	; (80074e0 <HAL_HCD_MspInit+0xbc>)
 800744c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800744e:	4a24      	ldr	r2, [pc, #144]	; (80074e0 <HAL_HCD_MspInit+0xbc>)
 8007450:	f043 0301 	orr.w	r3, r3, #1
 8007454:	6313      	str	r3, [r2, #48]	; 0x30
 8007456:	4b22      	ldr	r3, [pc, #136]	; (80074e0 <HAL_HCD_MspInit+0xbc>)
 8007458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800745a:	f003 0301 	and.w	r3, r3, #1
 800745e:	613b      	str	r3, [r7, #16]
 8007460:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8007462:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007466:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007468:	2300      	movs	r3, #0
 800746a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800746c:	2300      	movs	r3, #0
 800746e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007470:	f107 0314 	add.w	r3, r7, #20
 8007474:	4619      	mov	r1, r3
 8007476:	481b      	ldr	r0, [pc, #108]	; (80074e4 <HAL_HCD_MspInit+0xc0>)
 8007478:	f7f9 fdcc 	bl	8001014 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800747c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007480:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007482:	2302      	movs	r3, #2
 8007484:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007486:	2300      	movs	r3, #0
 8007488:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800748a:	2300      	movs	r3, #0
 800748c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800748e:	230a      	movs	r3, #10
 8007490:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007492:	f107 0314 	add.w	r3, r7, #20
 8007496:	4619      	mov	r1, r3
 8007498:	4812      	ldr	r0, [pc, #72]	; (80074e4 <HAL_HCD_MspInit+0xc0>)
 800749a:	f7f9 fdbb 	bl	8001014 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800749e:	4b10      	ldr	r3, [pc, #64]	; (80074e0 <HAL_HCD_MspInit+0xbc>)
 80074a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074a2:	4a0f      	ldr	r2, [pc, #60]	; (80074e0 <HAL_HCD_MspInit+0xbc>)
 80074a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074a8:	6353      	str	r3, [r2, #52]	; 0x34
 80074aa:	2300      	movs	r3, #0
 80074ac:	60fb      	str	r3, [r7, #12]
 80074ae:	4b0c      	ldr	r3, [pc, #48]	; (80074e0 <HAL_HCD_MspInit+0xbc>)
 80074b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074b2:	4a0b      	ldr	r2, [pc, #44]	; (80074e0 <HAL_HCD_MspInit+0xbc>)
 80074b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80074b8:	6453      	str	r3, [r2, #68]	; 0x44
 80074ba:	4b09      	ldr	r3, [pc, #36]	; (80074e0 <HAL_HCD_MspInit+0xbc>)
 80074bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80074c2:	60fb      	str	r3, [r7, #12]
 80074c4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80074c6:	2200      	movs	r2, #0
 80074c8:	2100      	movs	r1, #0
 80074ca:	2043      	movs	r0, #67	; 0x43
 80074cc:	f7f9 fd6b 	bl	8000fa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80074d0:	2043      	movs	r0, #67	; 0x43
 80074d2:	f7f9 fd84 	bl	8000fde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80074d6:	bf00      	nop
 80074d8:	3728      	adds	r7, #40	; 0x28
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}
 80074de:	bf00      	nop
 80074e0:	40023800 	.word	0x40023800
 80074e4:	40020000 	.word	0x40020000

080074e8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b082      	sub	sp, #8
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80074f6:	4618      	mov	r0, r3
 80074f8:	f7ff f8e6 	bl	80066c8 <USBH_LL_IncTimer>
}
 80074fc:	bf00      	nop
 80074fe:	3708      	adds	r7, #8
 8007500:	46bd      	mov	sp, r7
 8007502:	bd80      	pop	{r7, pc}

08007504 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b082      	sub	sp, #8
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007512:	4618      	mov	r0, r3
 8007514:	f7ff f91c 	bl	8006750 <USBH_LL_Connect>
}
 8007518:	bf00      	nop
 800751a:	3708      	adds	r7, #8
 800751c:	46bd      	mov	sp, r7
 800751e:	bd80      	pop	{r7, pc}

08007520 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b082      	sub	sp, #8
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800752e:	4618      	mov	r0, r3
 8007530:	f7ff f924 	bl	800677c <USBH_LL_Disconnect>
}
 8007534:	bf00      	nop
 8007536:	3708      	adds	r7, #8
 8007538:	46bd      	mov	sp, r7
 800753a:	bd80      	pop	{r7, pc}

0800753c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800753c:	b480      	push	{r7}
 800753e:	b083      	sub	sp, #12
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
 8007544:	460b      	mov	r3, r1
 8007546:	70fb      	strb	r3, [r7, #3]
 8007548:	4613      	mov	r3, r2
 800754a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800754c:	bf00      	nop
 800754e:	370c      	adds	r7, #12
 8007550:	46bd      	mov	sp, r7
 8007552:	bc80      	pop	{r7}
 8007554:	4770      	bx	lr

08007556 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007556:	b580      	push	{r7, lr}
 8007558:	b082      	sub	sp, #8
 800755a:	af00      	add	r7, sp, #0
 800755c:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007564:	4618      	mov	r0, r3
 8007566:	f7ff f8d9 	bl	800671c <USBH_LL_PortEnabled>
}
 800756a:	bf00      	nop
 800756c:	3708      	adds	r7, #8
 800756e:	46bd      	mov	sp, r7
 8007570:	bd80      	pop	{r7, pc}

08007572 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007572:	b580      	push	{r7, lr}
 8007574:	b082      	sub	sp, #8
 8007576:	af00      	add	r7, sp, #0
 8007578:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007580:	4618      	mov	r0, r3
 8007582:	f7ff f8d8 	bl	8006736 <USBH_LL_PortDisabled>
}
 8007586:	bf00      	nop
 8007588:	3708      	adds	r7, #8
 800758a:	46bd      	mov	sp, r7
 800758c:	bd80      	pop	{r7, pc}
	...

08007590 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b082      	sub	sp, #8
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800759e:	2b01      	cmp	r3, #1
 80075a0:	d12a      	bne.n	80075f8 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80075a2:	4a18      	ldr	r2, [pc, #96]	; (8007604 <USBH_LL_Init+0x74>)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	4a15      	ldr	r2, [pc, #84]	; (8007604 <USBH_LL_Init+0x74>)
 80075ae:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80075b2:	4b14      	ldr	r3, [pc, #80]	; (8007604 <USBH_LL_Init+0x74>)
 80075b4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80075b8:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80075ba:	4b12      	ldr	r3, [pc, #72]	; (8007604 <USBH_LL_Init+0x74>)
 80075bc:	2208      	movs	r2, #8
 80075be:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80075c0:	4b10      	ldr	r3, [pc, #64]	; (8007604 <USBH_LL_Init+0x74>)
 80075c2:	2201      	movs	r2, #1
 80075c4:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80075c6:	4b0f      	ldr	r3, [pc, #60]	; (8007604 <USBH_LL_Init+0x74>)
 80075c8:	2200      	movs	r2, #0
 80075ca:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80075cc:	4b0d      	ldr	r3, [pc, #52]	; (8007604 <USBH_LL_Init+0x74>)
 80075ce:	2202      	movs	r2, #2
 80075d0:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80075d2:	4b0c      	ldr	r3, [pc, #48]	; (8007604 <USBH_LL_Init+0x74>)
 80075d4:	2200      	movs	r2, #0
 80075d6:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80075d8:	480a      	ldr	r0, [pc, #40]	; (8007604 <USBH_LL_Init+0x74>)
 80075da:	f7f9 fecd 	bl	8001378 <HAL_HCD_Init>
 80075de:	4603      	mov	r3, r0
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d001      	beq.n	80075e8 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80075e4:	f7f9 f9a0 	bl	8000928 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80075e8:	4806      	ldr	r0, [pc, #24]	; (8007604 <USBH_LL_Init+0x74>)
 80075ea:	f7fa faae 	bl	8001b4a <HAL_HCD_GetCurrentFrame>
 80075ee:	4603      	mov	r3, r0
 80075f0:	4619      	mov	r1, r3
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f7ff f85a 	bl	80066ac <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80075f8:	2300      	movs	r3, #0
}
 80075fa:	4618      	mov	r0, r3
 80075fc:	3708      	adds	r7, #8
 80075fe:	46bd      	mov	sp, r7
 8007600:	bd80      	pop	{r7, pc}
 8007602:	bf00      	nop
 8007604:	2000058c 	.word	0x2000058c

08007608 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b084      	sub	sp, #16
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007610:	2300      	movs	r3, #0
 8007612:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007614:	2300      	movs	r3, #0
 8007616:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800761e:	4618      	mov	r0, r3
 8007620:	f7fa fa1f 	bl	8001a62 <HAL_HCD_Start>
 8007624:	4603      	mov	r3, r0
 8007626:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007628:	7bfb      	ldrb	r3, [r7, #15]
 800762a:	4618      	mov	r0, r3
 800762c:	f000 f95a 	bl	80078e4 <USBH_Get_USB_Status>
 8007630:	4603      	mov	r3, r0
 8007632:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007634:	7bbb      	ldrb	r3, [r7, #14]
}
 8007636:	4618      	mov	r0, r3
 8007638:	3710      	adds	r7, #16
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}

0800763e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800763e:	b580      	push	{r7, lr}
 8007640:	b084      	sub	sp, #16
 8007642:	af00      	add	r7, sp, #0
 8007644:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007646:	2300      	movs	r3, #0
 8007648:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800764a:	2300      	movs	r3, #0
 800764c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007654:	4618      	mov	r0, r3
 8007656:	f7fa fa27 	bl	8001aa8 <HAL_HCD_Stop>
 800765a:	4603      	mov	r3, r0
 800765c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800765e:	7bfb      	ldrb	r3, [r7, #15]
 8007660:	4618      	mov	r0, r3
 8007662:	f000 f93f 	bl	80078e4 <USBH_Get_USB_Status>
 8007666:	4603      	mov	r3, r0
 8007668:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800766a:	7bbb      	ldrb	r3, [r7, #14]
}
 800766c:	4618      	mov	r0, r3
 800766e:	3710      	adds	r7, #16
 8007670:	46bd      	mov	sp, r7
 8007672:	bd80      	pop	{r7, pc}

08007674 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b084      	sub	sp, #16
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800767c:	2301      	movs	r3, #1
 800767e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007686:	4618      	mov	r0, r3
 8007688:	f7fa fa6d 	bl	8001b66 <HAL_HCD_GetCurrentSpeed>
 800768c:	4603      	mov	r3, r0
 800768e:	2b02      	cmp	r3, #2
 8007690:	d00c      	beq.n	80076ac <USBH_LL_GetSpeed+0x38>
 8007692:	2b02      	cmp	r3, #2
 8007694:	d80d      	bhi.n	80076b2 <USBH_LL_GetSpeed+0x3e>
 8007696:	2b00      	cmp	r3, #0
 8007698:	d002      	beq.n	80076a0 <USBH_LL_GetSpeed+0x2c>
 800769a:	2b01      	cmp	r3, #1
 800769c:	d003      	beq.n	80076a6 <USBH_LL_GetSpeed+0x32>
 800769e:	e008      	b.n	80076b2 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80076a0:	2300      	movs	r3, #0
 80076a2:	73fb      	strb	r3, [r7, #15]
    break;
 80076a4:	e008      	b.n	80076b8 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80076a6:	2301      	movs	r3, #1
 80076a8:	73fb      	strb	r3, [r7, #15]
    break;
 80076aa:	e005      	b.n	80076b8 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80076ac:	2302      	movs	r3, #2
 80076ae:	73fb      	strb	r3, [r7, #15]
    break;
 80076b0:	e002      	b.n	80076b8 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80076b2:	2301      	movs	r3, #1
 80076b4:	73fb      	strb	r3, [r7, #15]
    break;
 80076b6:	bf00      	nop
  }
  return  speed;
 80076b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80076ba:	4618      	mov	r0, r3
 80076bc:	3710      	adds	r7, #16
 80076be:	46bd      	mov	sp, r7
 80076c0:	bd80      	pop	{r7, pc}

080076c2 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80076c2:	b580      	push	{r7, lr}
 80076c4:	b084      	sub	sp, #16
 80076c6:	af00      	add	r7, sp, #0
 80076c8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076ca:	2300      	movs	r3, #0
 80076cc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80076ce:	2300      	movs	r3, #0
 80076d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80076d8:	4618      	mov	r0, r3
 80076da:	f7fa fa02 	bl	8001ae2 <HAL_HCD_ResetPort>
 80076de:	4603      	mov	r3, r0
 80076e0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80076e2:	7bfb      	ldrb	r3, [r7, #15]
 80076e4:	4618      	mov	r0, r3
 80076e6:	f000 f8fd 	bl	80078e4 <USBH_Get_USB_Status>
 80076ea:	4603      	mov	r3, r0
 80076ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80076ee:	7bbb      	ldrb	r3, [r7, #14]
}
 80076f0:	4618      	mov	r0, r3
 80076f2:	3710      	adds	r7, #16
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bd80      	pop	{r7, pc}

080076f8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b082      	sub	sp, #8
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
 8007700:	460b      	mov	r3, r1
 8007702:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800770a:	78fa      	ldrb	r2, [r7, #3]
 800770c:	4611      	mov	r1, r2
 800770e:	4618      	mov	r0, r3
 8007710:	f7fa fa08 	bl	8001b24 <HAL_HCD_HC_GetXferCount>
 8007714:	4603      	mov	r3, r0
}
 8007716:	4618      	mov	r0, r3
 8007718:	3708      	adds	r7, #8
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}

0800771e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800771e:	b590      	push	{r4, r7, lr}
 8007720:	b089      	sub	sp, #36	; 0x24
 8007722:	af04      	add	r7, sp, #16
 8007724:	6078      	str	r0, [r7, #4]
 8007726:	4608      	mov	r0, r1
 8007728:	4611      	mov	r1, r2
 800772a:	461a      	mov	r2, r3
 800772c:	4603      	mov	r3, r0
 800772e:	70fb      	strb	r3, [r7, #3]
 8007730:	460b      	mov	r3, r1
 8007732:	70bb      	strb	r3, [r7, #2]
 8007734:	4613      	mov	r3, r2
 8007736:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007738:	2300      	movs	r3, #0
 800773a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800773c:	2300      	movs	r3, #0
 800773e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8007746:	787c      	ldrb	r4, [r7, #1]
 8007748:	78ba      	ldrb	r2, [r7, #2]
 800774a:	78f9      	ldrb	r1, [r7, #3]
 800774c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800774e:	9302      	str	r3, [sp, #8]
 8007750:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007754:	9301      	str	r3, [sp, #4]
 8007756:	f897 3020 	ldrb.w	r3, [r7, #32]
 800775a:	9300      	str	r3, [sp, #0]
 800775c:	4623      	mov	r3, r4
 800775e:	f7f9 fe6d 	bl	800143c <HAL_HCD_HC_Init>
 8007762:	4603      	mov	r3, r0
 8007764:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8007766:	7bfb      	ldrb	r3, [r7, #15]
 8007768:	4618      	mov	r0, r3
 800776a:	f000 f8bb 	bl	80078e4 <USBH_Get_USB_Status>
 800776e:	4603      	mov	r3, r0
 8007770:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007772:	7bbb      	ldrb	r3, [r7, #14]
}
 8007774:	4618      	mov	r0, r3
 8007776:	3714      	adds	r7, #20
 8007778:	46bd      	mov	sp, r7
 800777a:	bd90      	pop	{r4, r7, pc}

0800777c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b084      	sub	sp, #16
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
 8007784:	460b      	mov	r3, r1
 8007786:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007788:	2300      	movs	r3, #0
 800778a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800778c:	2300      	movs	r3, #0
 800778e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007796:	78fa      	ldrb	r2, [r7, #3]
 8007798:	4611      	mov	r1, r2
 800779a:	4618      	mov	r0, r3
 800779c:	f7f9 fedd 	bl	800155a <HAL_HCD_HC_Halt>
 80077a0:	4603      	mov	r3, r0
 80077a2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80077a4:	7bfb      	ldrb	r3, [r7, #15]
 80077a6:	4618      	mov	r0, r3
 80077a8:	f000 f89c 	bl	80078e4 <USBH_Get_USB_Status>
 80077ac:	4603      	mov	r3, r0
 80077ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80077b0:	7bbb      	ldrb	r3, [r7, #14]
}
 80077b2:	4618      	mov	r0, r3
 80077b4:	3710      	adds	r7, #16
 80077b6:	46bd      	mov	sp, r7
 80077b8:	bd80      	pop	{r7, pc}

080077ba <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80077ba:	b590      	push	{r4, r7, lr}
 80077bc:	b089      	sub	sp, #36	; 0x24
 80077be:	af04      	add	r7, sp, #16
 80077c0:	6078      	str	r0, [r7, #4]
 80077c2:	4608      	mov	r0, r1
 80077c4:	4611      	mov	r1, r2
 80077c6:	461a      	mov	r2, r3
 80077c8:	4603      	mov	r3, r0
 80077ca:	70fb      	strb	r3, [r7, #3]
 80077cc:	460b      	mov	r3, r1
 80077ce:	70bb      	strb	r3, [r7, #2]
 80077d0:	4613      	mov	r3, r2
 80077d2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80077d4:	2300      	movs	r3, #0
 80077d6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80077d8:	2300      	movs	r3, #0
 80077da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80077e2:	787c      	ldrb	r4, [r7, #1]
 80077e4:	78ba      	ldrb	r2, [r7, #2]
 80077e6:	78f9      	ldrb	r1, [r7, #3]
 80077e8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80077ec:	9303      	str	r3, [sp, #12]
 80077ee:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80077f0:	9302      	str	r3, [sp, #8]
 80077f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f4:	9301      	str	r3, [sp, #4]
 80077f6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80077fa:	9300      	str	r3, [sp, #0]
 80077fc:	4623      	mov	r3, r4
 80077fe:	f7f9 fecf 	bl	80015a0 <HAL_HCD_HC_SubmitRequest>
 8007802:	4603      	mov	r3, r0
 8007804:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8007806:	7bfb      	ldrb	r3, [r7, #15]
 8007808:	4618      	mov	r0, r3
 800780a:	f000 f86b 	bl	80078e4 <USBH_Get_USB_Status>
 800780e:	4603      	mov	r3, r0
 8007810:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007812:	7bbb      	ldrb	r3, [r7, #14]
}
 8007814:	4618      	mov	r0, r3
 8007816:	3714      	adds	r7, #20
 8007818:	46bd      	mov	sp, r7
 800781a:	bd90      	pop	{r4, r7, pc}

0800781c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b082      	sub	sp, #8
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
 8007824:	460b      	mov	r3, r1
 8007826:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800782e:	78fa      	ldrb	r2, [r7, #3]
 8007830:	4611      	mov	r1, r2
 8007832:	4618      	mov	r0, r3
 8007834:	f7fa f963 	bl	8001afe <HAL_HCD_HC_GetURBState>
 8007838:	4603      	mov	r3, r0
}
 800783a:	4618      	mov	r0, r3
 800783c:	3708      	adds	r7, #8
 800783e:	46bd      	mov	sp, r7
 8007840:	bd80      	pop	{r7, pc}

08007842 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8007842:	b580      	push	{r7, lr}
 8007844:	b082      	sub	sp, #8
 8007846:	af00      	add	r7, sp, #0
 8007848:	6078      	str	r0, [r7, #4]
 800784a:	460b      	mov	r3, r1
 800784c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8007854:	2b01      	cmp	r3, #1
 8007856:	d103      	bne.n	8007860 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8007858:	78fb      	ldrb	r3, [r7, #3]
 800785a:	4618      	mov	r0, r3
 800785c:	f000 f86e 	bl	800793c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8007860:	20c8      	movs	r0, #200	; 0xc8
 8007862:	f7f9 faa5 	bl	8000db0 <HAL_Delay>
  return USBH_OK;
 8007866:	2300      	movs	r3, #0
}
 8007868:	4618      	mov	r0, r3
 800786a:	3708      	adds	r7, #8
 800786c:	46bd      	mov	sp, r7
 800786e:	bd80      	pop	{r7, pc}

08007870 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8007870:	b480      	push	{r7}
 8007872:	b085      	sub	sp, #20
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
 8007878:	460b      	mov	r3, r1
 800787a:	70fb      	strb	r3, [r7, #3]
 800787c:	4613      	mov	r3, r2
 800787e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007886:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8007888:	78fb      	ldrb	r3, [r7, #3]
 800788a:	68fa      	ldr	r2, [r7, #12]
 800788c:	212c      	movs	r1, #44	; 0x2c
 800788e:	fb01 f303 	mul.w	r3, r1, r3
 8007892:	4413      	add	r3, r2
 8007894:	333b      	adds	r3, #59	; 0x3b
 8007896:	781b      	ldrb	r3, [r3, #0]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d009      	beq.n	80078b0 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800789c:	78fb      	ldrb	r3, [r7, #3]
 800789e:	68fa      	ldr	r2, [r7, #12]
 80078a0:	212c      	movs	r1, #44	; 0x2c
 80078a2:	fb01 f303 	mul.w	r3, r1, r3
 80078a6:	4413      	add	r3, r2
 80078a8:	3354      	adds	r3, #84	; 0x54
 80078aa:	78ba      	ldrb	r2, [r7, #2]
 80078ac:	701a      	strb	r2, [r3, #0]
 80078ae:	e008      	b.n	80078c2 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80078b0:	78fb      	ldrb	r3, [r7, #3]
 80078b2:	68fa      	ldr	r2, [r7, #12]
 80078b4:	212c      	movs	r1, #44	; 0x2c
 80078b6:	fb01 f303 	mul.w	r3, r1, r3
 80078ba:	4413      	add	r3, r2
 80078bc:	3355      	adds	r3, #85	; 0x55
 80078be:	78ba      	ldrb	r2, [r7, #2]
 80078c0:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80078c2:	2300      	movs	r3, #0
}
 80078c4:	4618      	mov	r0, r3
 80078c6:	3714      	adds	r7, #20
 80078c8:	46bd      	mov	sp, r7
 80078ca:	bc80      	pop	{r7}
 80078cc:	4770      	bx	lr

080078ce <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80078ce:	b580      	push	{r7, lr}
 80078d0:	b082      	sub	sp, #8
 80078d2:	af00      	add	r7, sp, #0
 80078d4:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	f7f9 fa6a 	bl	8000db0 <HAL_Delay>
}
 80078dc:	bf00      	nop
 80078de:	3708      	adds	r7, #8
 80078e0:	46bd      	mov	sp, r7
 80078e2:	bd80      	pop	{r7, pc}

080078e4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80078e4:	b480      	push	{r7}
 80078e6:	b085      	sub	sp, #20
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	4603      	mov	r3, r0
 80078ec:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80078ee:	2300      	movs	r3, #0
 80078f0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80078f2:	79fb      	ldrb	r3, [r7, #7]
 80078f4:	2b03      	cmp	r3, #3
 80078f6:	d817      	bhi.n	8007928 <USBH_Get_USB_Status+0x44>
 80078f8:	a201      	add	r2, pc, #4	; (adr r2, 8007900 <USBH_Get_USB_Status+0x1c>)
 80078fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078fe:	bf00      	nop
 8007900:	08007911 	.word	0x08007911
 8007904:	08007917 	.word	0x08007917
 8007908:	0800791d 	.word	0x0800791d
 800790c:	08007923 	.word	0x08007923
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8007910:	2300      	movs	r3, #0
 8007912:	73fb      	strb	r3, [r7, #15]
    break;
 8007914:	e00b      	b.n	800792e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8007916:	2302      	movs	r3, #2
 8007918:	73fb      	strb	r3, [r7, #15]
    break;
 800791a:	e008      	b.n	800792e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800791c:	2301      	movs	r3, #1
 800791e:	73fb      	strb	r3, [r7, #15]
    break;
 8007920:	e005      	b.n	800792e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8007922:	2302      	movs	r3, #2
 8007924:	73fb      	strb	r3, [r7, #15]
    break;
 8007926:	e002      	b.n	800792e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8007928:	2302      	movs	r3, #2
 800792a:	73fb      	strb	r3, [r7, #15]
    break;
 800792c:	bf00      	nop
  }
  return usb_status;
 800792e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007930:	4618      	mov	r0, r3
 8007932:	3714      	adds	r7, #20
 8007934:	46bd      	mov	sp, r7
 8007936:	bc80      	pop	{r7}
 8007938:	4770      	bx	lr
 800793a:	bf00      	nop

0800793c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b084      	sub	sp, #16
 8007940:	af00      	add	r7, sp, #0
 8007942:	4603      	mov	r3, r0
 8007944:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8007946:	79fb      	ldrb	r3, [r7, #7]
 8007948:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800794a:	79fb      	ldrb	r3, [r7, #7]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d102      	bne.n	8007956 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8007950:	2300      	movs	r3, #0
 8007952:	73fb      	strb	r3, [r7, #15]
 8007954:	e001      	b.n	800795a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8007956:	2301      	movs	r3, #1
 8007958:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800795a:	7bfb      	ldrb	r3, [r7, #15]
 800795c:	461a      	mov	r2, r3
 800795e:	2101      	movs	r1, #1
 8007960:	4803      	ldr	r0, [pc, #12]	; (8007970 <MX_DriverVbusFS+0x34>)
 8007962:	f7f9 fcf1 	bl	8001348 <HAL_GPIO_WritePin>
}
 8007966:	bf00      	nop
 8007968:	3710      	adds	r7, #16
 800796a:	46bd      	mov	sp, r7
 800796c:	bd80      	pop	{r7, pc}
 800796e:	bf00      	nop
 8007970:	40020800 	.word	0x40020800

08007974 <__errno>:
 8007974:	4b01      	ldr	r3, [pc, #4]	; (800797c <__errno+0x8>)
 8007976:	6818      	ldr	r0, [r3, #0]
 8007978:	4770      	bx	lr
 800797a:	bf00      	nop
 800797c:	2000002c 	.word	0x2000002c

08007980 <__libc_init_array>:
 8007980:	b570      	push	{r4, r5, r6, lr}
 8007982:	4d0d      	ldr	r5, [pc, #52]	; (80079b8 <__libc_init_array+0x38>)
 8007984:	4c0d      	ldr	r4, [pc, #52]	; (80079bc <__libc_init_array+0x3c>)
 8007986:	1b64      	subs	r4, r4, r5
 8007988:	10a4      	asrs	r4, r4, #2
 800798a:	2600      	movs	r6, #0
 800798c:	42a6      	cmp	r6, r4
 800798e:	d109      	bne.n	80079a4 <__libc_init_array+0x24>
 8007990:	4d0b      	ldr	r5, [pc, #44]	; (80079c0 <__libc_init_array+0x40>)
 8007992:	4c0c      	ldr	r4, [pc, #48]	; (80079c4 <__libc_init_array+0x44>)
 8007994:	f000 f8f6 	bl	8007b84 <_init>
 8007998:	1b64      	subs	r4, r4, r5
 800799a:	10a4      	asrs	r4, r4, #2
 800799c:	2600      	movs	r6, #0
 800799e:	42a6      	cmp	r6, r4
 80079a0:	d105      	bne.n	80079ae <__libc_init_array+0x2e>
 80079a2:	bd70      	pop	{r4, r5, r6, pc}
 80079a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80079a8:	4798      	blx	r3
 80079aa:	3601      	adds	r6, #1
 80079ac:	e7ee      	b.n	800798c <__libc_init_array+0xc>
 80079ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80079b2:	4798      	blx	r3
 80079b4:	3601      	adds	r6, #1
 80079b6:	e7f2      	b.n	800799e <__libc_init_array+0x1e>
 80079b8:	08007bc0 	.word	0x08007bc0
 80079bc:	08007bc0 	.word	0x08007bc0
 80079c0:	08007bc0 	.word	0x08007bc0
 80079c4:	08007bc4 	.word	0x08007bc4

080079c8 <malloc>:
 80079c8:	4b02      	ldr	r3, [pc, #8]	; (80079d4 <malloc+0xc>)
 80079ca:	4601      	mov	r1, r0
 80079cc:	6818      	ldr	r0, [r3, #0]
 80079ce:	f000 b861 	b.w	8007a94 <_malloc_r>
 80079d2:	bf00      	nop
 80079d4:	2000002c 	.word	0x2000002c

080079d8 <free>:
 80079d8:	4b02      	ldr	r3, [pc, #8]	; (80079e4 <free+0xc>)
 80079da:	4601      	mov	r1, r0
 80079dc:	6818      	ldr	r0, [r3, #0]
 80079de:	f000 b80b 	b.w	80079f8 <_free_r>
 80079e2:	bf00      	nop
 80079e4:	2000002c 	.word	0x2000002c

080079e8 <memset>:
 80079e8:	4402      	add	r2, r0
 80079ea:	4603      	mov	r3, r0
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d100      	bne.n	80079f2 <memset+0xa>
 80079f0:	4770      	bx	lr
 80079f2:	f803 1b01 	strb.w	r1, [r3], #1
 80079f6:	e7f9      	b.n	80079ec <memset+0x4>

080079f8 <_free_r>:
 80079f8:	b538      	push	{r3, r4, r5, lr}
 80079fa:	4605      	mov	r5, r0
 80079fc:	2900      	cmp	r1, #0
 80079fe:	d045      	beq.n	8007a8c <_free_r+0x94>
 8007a00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a04:	1f0c      	subs	r4, r1, #4
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	bfb8      	it	lt
 8007a0a:	18e4      	addlt	r4, r4, r3
 8007a0c:	f000 f8ac 	bl	8007b68 <__malloc_lock>
 8007a10:	4a1f      	ldr	r2, [pc, #124]	; (8007a90 <_free_r+0x98>)
 8007a12:	6813      	ldr	r3, [r2, #0]
 8007a14:	4610      	mov	r0, r2
 8007a16:	b933      	cbnz	r3, 8007a26 <_free_r+0x2e>
 8007a18:	6063      	str	r3, [r4, #4]
 8007a1a:	6014      	str	r4, [r2, #0]
 8007a1c:	4628      	mov	r0, r5
 8007a1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a22:	f000 b8a7 	b.w	8007b74 <__malloc_unlock>
 8007a26:	42a3      	cmp	r3, r4
 8007a28:	d90b      	bls.n	8007a42 <_free_r+0x4a>
 8007a2a:	6821      	ldr	r1, [r4, #0]
 8007a2c:	1862      	adds	r2, r4, r1
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	bf04      	itt	eq
 8007a32:	681a      	ldreq	r2, [r3, #0]
 8007a34:	685b      	ldreq	r3, [r3, #4]
 8007a36:	6063      	str	r3, [r4, #4]
 8007a38:	bf04      	itt	eq
 8007a3a:	1852      	addeq	r2, r2, r1
 8007a3c:	6022      	streq	r2, [r4, #0]
 8007a3e:	6004      	str	r4, [r0, #0]
 8007a40:	e7ec      	b.n	8007a1c <_free_r+0x24>
 8007a42:	461a      	mov	r2, r3
 8007a44:	685b      	ldr	r3, [r3, #4]
 8007a46:	b10b      	cbz	r3, 8007a4c <_free_r+0x54>
 8007a48:	42a3      	cmp	r3, r4
 8007a4a:	d9fa      	bls.n	8007a42 <_free_r+0x4a>
 8007a4c:	6811      	ldr	r1, [r2, #0]
 8007a4e:	1850      	adds	r0, r2, r1
 8007a50:	42a0      	cmp	r0, r4
 8007a52:	d10b      	bne.n	8007a6c <_free_r+0x74>
 8007a54:	6820      	ldr	r0, [r4, #0]
 8007a56:	4401      	add	r1, r0
 8007a58:	1850      	adds	r0, r2, r1
 8007a5a:	4283      	cmp	r3, r0
 8007a5c:	6011      	str	r1, [r2, #0]
 8007a5e:	d1dd      	bne.n	8007a1c <_free_r+0x24>
 8007a60:	6818      	ldr	r0, [r3, #0]
 8007a62:	685b      	ldr	r3, [r3, #4]
 8007a64:	6053      	str	r3, [r2, #4]
 8007a66:	4401      	add	r1, r0
 8007a68:	6011      	str	r1, [r2, #0]
 8007a6a:	e7d7      	b.n	8007a1c <_free_r+0x24>
 8007a6c:	d902      	bls.n	8007a74 <_free_r+0x7c>
 8007a6e:	230c      	movs	r3, #12
 8007a70:	602b      	str	r3, [r5, #0]
 8007a72:	e7d3      	b.n	8007a1c <_free_r+0x24>
 8007a74:	6820      	ldr	r0, [r4, #0]
 8007a76:	1821      	adds	r1, r4, r0
 8007a78:	428b      	cmp	r3, r1
 8007a7a:	bf04      	itt	eq
 8007a7c:	6819      	ldreq	r1, [r3, #0]
 8007a7e:	685b      	ldreq	r3, [r3, #4]
 8007a80:	6063      	str	r3, [r4, #4]
 8007a82:	bf04      	itt	eq
 8007a84:	1809      	addeq	r1, r1, r0
 8007a86:	6021      	streq	r1, [r4, #0]
 8007a88:	6054      	str	r4, [r2, #4]
 8007a8a:	e7c7      	b.n	8007a1c <_free_r+0x24>
 8007a8c:	bd38      	pop	{r3, r4, r5, pc}
 8007a8e:	bf00      	nop
 8007a90:	200000b4 	.word	0x200000b4

08007a94 <_malloc_r>:
 8007a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a96:	1ccd      	adds	r5, r1, #3
 8007a98:	f025 0503 	bic.w	r5, r5, #3
 8007a9c:	3508      	adds	r5, #8
 8007a9e:	2d0c      	cmp	r5, #12
 8007aa0:	bf38      	it	cc
 8007aa2:	250c      	movcc	r5, #12
 8007aa4:	2d00      	cmp	r5, #0
 8007aa6:	4606      	mov	r6, r0
 8007aa8:	db01      	blt.n	8007aae <_malloc_r+0x1a>
 8007aaa:	42a9      	cmp	r1, r5
 8007aac:	d903      	bls.n	8007ab6 <_malloc_r+0x22>
 8007aae:	230c      	movs	r3, #12
 8007ab0:	6033      	str	r3, [r6, #0]
 8007ab2:	2000      	movs	r0, #0
 8007ab4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ab6:	f000 f857 	bl	8007b68 <__malloc_lock>
 8007aba:	4921      	ldr	r1, [pc, #132]	; (8007b40 <_malloc_r+0xac>)
 8007abc:	680a      	ldr	r2, [r1, #0]
 8007abe:	4614      	mov	r4, r2
 8007ac0:	b99c      	cbnz	r4, 8007aea <_malloc_r+0x56>
 8007ac2:	4f20      	ldr	r7, [pc, #128]	; (8007b44 <_malloc_r+0xb0>)
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	b923      	cbnz	r3, 8007ad2 <_malloc_r+0x3e>
 8007ac8:	4621      	mov	r1, r4
 8007aca:	4630      	mov	r0, r6
 8007acc:	f000 f83c 	bl	8007b48 <_sbrk_r>
 8007ad0:	6038      	str	r0, [r7, #0]
 8007ad2:	4629      	mov	r1, r5
 8007ad4:	4630      	mov	r0, r6
 8007ad6:	f000 f837 	bl	8007b48 <_sbrk_r>
 8007ada:	1c43      	adds	r3, r0, #1
 8007adc:	d123      	bne.n	8007b26 <_malloc_r+0x92>
 8007ade:	230c      	movs	r3, #12
 8007ae0:	6033      	str	r3, [r6, #0]
 8007ae2:	4630      	mov	r0, r6
 8007ae4:	f000 f846 	bl	8007b74 <__malloc_unlock>
 8007ae8:	e7e3      	b.n	8007ab2 <_malloc_r+0x1e>
 8007aea:	6823      	ldr	r3, [r4, #0]
 8007aec:	1b5b      	subs	r3, r3, r5
 8007aee:	d417      	bmi.n	8007b20 <_malloc_r+0x8c>
 8007af0:	2b0b      	cmp	r3, #11
 8007af2:	d903      	bls.n	8007afc <_malloc_r+0x68>
 8007af4:	6023      	str	r3, [r4, #0]
 8007af6:	441c      	add	r4, r3
 8007af8:	6025      	str	r5, [r4, #0]
 8007afa:	e004      	b.n	8007b06 <_malloc_r+0x72>
 8007afc:	6863      	ldr	r3, [r4, #4]
 8007afe:	42a2      	cmp	r2, r4
 8007b00:	bf0c      	ite	eq
 8007b02:	600b      	streq	r3, [r1, #0]
 8007b04:	6053      	strne	r3, [r2, #4]
 8007b06:	4630      	mov	r0, r6
 8007b08:	f000 f834 	bl	8007b74 <__malloc_unlock>
 8007b0c:	f104 000b 	add.w	r0, r4, #11
 8007b10:	1d23      	adds	r3, r4, #4
 8007b12:	f020 0007 	bic.w	r0, r0, #7
 8007b16:	1ac2      	subs	r2, r0, r3
 8007b18:	d0cc      	beq.n	8007ab4 <_malloc_r+0x20>
 8007b1a:	1a1b      	subs	r3, r3, r0
 8007b1c:	50a3      	str	r3, [r4, r2]
 8007b1e:	e7c9      	b.n	8007ab4 <_malloc_r+0x20>
 8007b20:	4622      	mov	r2, r4
 8007b22:	6864      	ldr	r4, [r4, #4]
 8007b24:	e7cc      	b.n	8007ac0 <_malloc_r+0x2c>
 8007b26:	1cc4      	adds	r4, r0, #3
 8007b28:	f024 0403 	bic.w	r4, r4, #3
 8007b2c:	42a0      	cmp	r0, r4
 8007b2e:	d0e3      	beq.n	8007af8 <_malloc_r+0x64>
 8007b30:	1a21      	subs	r1, r4, r0
 8007b32:	4630      	mov	r0, r6
 8007b34:	f000 f808 	bl	8007b48 <_sbrk_r>
 8007b38:	3001      	adds	r0, #1
 8007b3a:	d1dd      	bne.n	8007af8 <_malloc_r+0x64>
 8007b3c:	e7cf      	b.n	8007ade <_malloc_r+0x4a>
 8007b3e:	bf00      	nop
 8007b40:	200000b4 	.word	0x200000b4
 8007b44:	200000b8 	.word	0x200000b8

08007b48 <_sbrk_r>:
 8007b48:	b538      	push	{r3, r4, r5, lr}
 8007b4a:	4d06      	ldr	r5, [pc, #24]	; (8007b64 <_sbrk_r+0x1c>)
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	4604      	mov	r4, r0
 8007b50:	4608      	mov	r0, r1
 8007b52:	602b      	str	r3, [r5, #0]
 8007b54:	f7f9 f858 	bl	8000c08 <_sbrk>
 8007b58:	1c43      	adds	r3, r0, #1
 8007b5a:	d102      	bne.n	8007b62 <_sbrk_r+0x1a>
 8007b5c:	682b      	ldr	r3, [r5, #0]
 8007b5e:	b103      	cbz	r3, 8007b62 <_sbrk_r+0x1a>
 8007b60:	6023      	str	r3, [r4, #0]
 8007b62:	bd38      	pop	{r3, r4, r5, pc}
 8007b64:	20000890 	.word	0x20000890

08007b68 <__malloc_lock>:
 8007b68:	4801      	ldr	r0, [pc, #4]	; (8007b70 <__malloc_lock+0x8>)
 8007b6a:	f000 b809 	b.w	8007b80 <__retarget_lock_acquire_recursive>
 8007b6e:	bf00      	nop
 8007b70:	20000898 	.word	0x20000898

08007b74 <__malloc_unlock>:
 8007b74:	4801      	ldr	r0, [pc, #4]	; (8007b7c <__malloc_unlock+0x8>)
 8007b76:	f000 b804 	b.w	8007b82 <__retarget_lock_release_recursive>
 8007b7a:	bf00      	nop
 8007b7c:	20000898 	.word	0x20000898

08007b80 <__retarget_lock_acquire_recursive>:
 8007b80:	4770      	bx	lr

08007b82 <__retarget_lock_release_recursive>:
 8007b82:	4770      	bx	lr

08007b84 <_init>:
 8007b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b86:	bf00      	nop
 8007b88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b8a:	bc08      	pop	{r3}
 8007b8c:	469e      	mov	lr, r3
 8007b8e:	4770      	bx	lr

08007b90 <_fini>:
 8007b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b92:	bf00      	nop
 8007b94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b96:	bc08      	pop	{r3}
 8007b98:	469e      	mov	lr, r3
 8007b9a:	4770      	bx	lr
